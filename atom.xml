<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pb</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-14T14:47:11.089Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现Comparator接口来排序</title>
    <link href="http://example.com/2021/07/14/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/07/14/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2021-07-14T14:11:34.000Z</published>
    <updated>2021-07-14T14:47:11.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对任意类型集合对象进行整体排序，排序时将此接口的实现传递给Collections.sort方法或者Arrays.sort方法排序.主要是实现Comparator接口中的 int compare(T o1, T o2)方法。</p></blockquote><a id="more"></a><p>要弄清什么时候是升序什么时候是降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>  o1 - o2 ;  升序</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  o2 - o1; 降序 </span><br></pre></td></tr></table></figure><p>或者,下面这段代码同样表示升序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(o1 - o2 &lt; <span class="number">0</span>)  <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(o2 - o1 &lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="单一条件排序"><a href="#单一条件排序" class="headerlink" title="单一条件排序"></a>单一条件排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">60</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.对学生集合按年龄进行排序</span></span><br><span class="line">Collections.sort(stus, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 升序  第一个参数减去第二个参数，返回值为负数</span></span><br><span class="line"><span class="comment">//return s1.getAge()-s2.getAge();</span></span><br><span class="line"><span class="keyword">return</span> s1.getAge().compareTo(s2.getAge());</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="comment">// return s2.getAge()-s1.getAge();</span></span><br><span class="line"><span class="comment">// return s2.getAge().compareTo(s1.getAge());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对学生集合按姓名首字母排序</span></span><br><span class="line">Comparator comparator = Collator.getInstance(Locale.CHINA);</span><br><span class="line">Collections.sort(stus, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comparator.compare(s1.getName(), s2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>我们也可以采用lambda表达式来简化代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">60</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对学生集合按年龄进行排序</span></span><br><span class="line"><span class="comment">//(s1,s2)相当于形参，且不用写出类型，java会根据程序自动推断</span></span><br><span class="line"><span class="comment">// 返回值就是 ‘-&gt;’ 后面的表达式</span></span><br><span class="line">Collections.sort(stus, (s1,s2)-&gt;(s1.getAge()-s2.getAge()));</span><br></pre></td></tr></table></figure><h2 id="多条件排序"><a href="#多条件排序" class="headerlink" title="多条件排序"></a>多条件排序</h2><p>先按照年龄升序排序，若年龄相同则比较学号按学号升序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, <span class="number">1</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">2</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">40</span>, <span class="number">3</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;赵六&quot;</span>, <span class="number">30</span>, <span class="number">4</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;陈七&quot;</span>, <span class="number">40</span>, <span class="number">5</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;周八&quot;</span>, <span class="number">20</span>, <span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Collections.sort(stus,<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="comment">// 首选按年龄升序排序</span></span><br><span class="line">flag = s1.getAge()-s2.getAge();</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">// 再按学号升序排序</span></span><br><span class="line">flag = s1.getNum()-s2.getNum();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;年龄       学号       姓名  &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Student s : stus)&#123;</span><br><span class="line">System.out.println(s.getAge()+<span class="string">&quot;   &quot;</span>+s.getNum()+<span class="string">&quot;   &quot;</span>+s.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjIyMTE0MzM4ODk4" alt="这里写图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;对任意类型集合对象进行整体排序，排序时将此接口的实现传递给Collections.sort方法或者Arrays.sort方法排序.主要是实现Comparator接口中的 int compare(T o1, T o2)方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>匿名内部类和lambda表达式</title>
    <link href="http://example.com/2021/07/14/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/07/14/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-07-14T12:18:33.000Z</published>
    <updated>2021-07-14T13:22:46.830Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用lambda表达式可以简化匿名内部类的写法</p></blockquote><a id="more"></a><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li>匿名内部类必须继承一个父类，或实现一个接口，但最多只能继承一个父类，或实现一个接口。</li><li>由于匿名内部类不能是抽象类，所以匿名内部类必须实现它的抽象父类或接口里包含的所有抽象方法。</li></ul><p><strong>什么时候会用到？</strong></p><p>当我们需要一个类的对象（一般这个类的对象作为参数传入一个函数中），只被用到一次，所以并不需要类名。</p><p>匿名内部类的两种实现方式：</p><p><strong>第一种</strong>，实现接口，重写方法</p><p><strong>第二种</strong>，继承父类，也可以重写方法</p><p>第一种 ，匿名类实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous_inner_class2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        inter i = <span class="keyword">new</span> inter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;   <span class="comment">//此时i是inter接口的一个实现对象</span></span><br><span class="line">        i.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种，匿名类继承父类</p><ul><li><p>当通过接口来创建匿名内部类时，匿名内部类不能显示创建构造器，因此匿名内部类里只有一个隐式的无参构造器，故new接口名后的括号里不能传入参数值。</p></li><li><p>如果通过继承父类来创建匿名内部类时，匿名内部类将拥有和父类相似的构造器，此处的相似指的是拥有相同的形参列表。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous_inner_class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        person p = <span class="keyword">new</span> person()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写父类方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p><strong>作用：</strong></p><p>lambda表达式， 是Java8中的一个新特性。可以理解为一个<strong>匿名函数。</strong></p><p>lambda表达式可以理解为将一个函数浓缩为一行代码，使代码更加简洁紧凑。</p><p><strong>注意：</strong></p><p>Lambda表达式只支持函数式接口  也就是只有一个抽象方法的接口</p><p><strong>lambda表达式语法</strong>：</p><p>(parameters) -&gt; statement;</p><p>或</p><p>(parameters) -&gt; {statements;}</p><p>参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parameters：参数， 可以指定或不指定参数类型， 当只有一个参数时可以不要圆括号</span><br><span class="line">statement：函数返回值，直接返回该值，无需大括号</span><br><span class="line">statements：函数体，当使用大括号时需要指明表达式返回的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lambda表达式实例：</span><br><span class="line"><span class="comment">// 无参，返回5</span></span><br><span class="line">() -&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 接收参数x，返回2*x</span></span><br><span class="line">x -&gt; <span class="number">2</span> * x;</span><br><span class="line"><span class="comment">// 接收参数x y, 返回x+y</span></span><br><span class="line">(x, y) -&gt; x + y;</span><br><span class="line"><span class="comment">// 指明接收参数类型</span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y;</span><br><span class="line"><span class="comment">// 接收字符串并打印，无返回值</span></span><br><span class="line">(String s) -&gt; System.out.print(s);</span><br><span class="line"><span class="comment">// 包括函数体</span></span><br><span class="line">(String s) -&gt; &#123;</span><br><span class="line"> System.out.print(s);</span><br><span class="line"> <span class="keyword">return</span> s; </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>示例一：用lambda表达式来替换匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            inter i = new inter() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void method() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;匿名内部类。&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;;   //此时i是inter接口的一个实现对象</span></span><br><span class="line"><span class="comment">//            i.method();</span></span><br><span class="line">        <span class="comment">//我们使用 lambda表达式实现上面匿名内部类的作用</span></span><br><span class="line">            inter i = () -&gt; System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            i.method();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">inter</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二：lambda表达式遍历集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">            list.forEach(n -&gt; System.out.println(n));   </span><br><span class="line">        <span class="comment">// list.forEach(System.out::println);   //这样写也是可行的</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用lambda表达式可以简化匿名内部类的写法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>String类和Arrays工具类的常用方法</title>
    <link href="http://example.com/2021/07/14/String%E7%B1%BB%E5%92%8CArrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/07/14/String%E7%B1%BB%E5%92%8CArrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-14T07:26:16.000Z</published>
    <updated>2021-07-14T14:33:08.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java 的String类中我们常用到一些方法来处理String字符串    ， java.lang.String</p><p>Arrays工具类中我们常永道一些方法来处理数组  ,     java.util.Arrays</p></blockquote><a id="more"></a><h2 id="String-类中常用方法"><a href="#String-类中常用方法" class="headerlink" title="String 类中常用方法"></a>String 类中常用方法</h2><p>String类：</p><p>String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，<a href="http://www.runoob.com/java/java-stringbuffer.html">StringBuffer &amp; StringBuilder 类</a>。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 <a href="https://blog.csdn.net/suyu_yuan/article/details/51396972">详情解释请点击</a>  包含在一对双引号之间。</p><p>String字符串变量的创建：</p><p>声明：  　String 变量名;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　　　　　　　String str;</span><br></pre></td></tr></table></figure><p>声明并初始化：　　String 变量名=”初始值”;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str &#x3D; &quot;挨点博客&quot;;</span><br></pre></td></tr></table></figure><p><strong>String常用方法：</strong></p><p>1、<strong>int length();</strong>　　语法：字符串变量名.length();　　返回值为 int 类型。得到一个字符串的字符个数（中、英、空格、转义字符皆为字符，计入长度）</p><p>　　　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">&quot;挨点aidian \t\n&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> l = a.length();</span><br><span class="line">System.out.println(l);运行结果：<span class="number">11</span></span><br></pre></td></tr></table></figure><p>2、<strong>char charAt(值);</strong>　　语法 ：字符串名.charAt(值);　　返回值为 char 类型。从字符串中取出指定位置的字符 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　　　　String str=<span class="string">&quot;张三疯&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;指定字符为：&quot;</span> + c); </span><br><span class="line"></span><br><span class="line">运行结果：指定字符为：疯 </span><br></pre></td></tr></table></figure><p> 3、<strong>char toCharArray();</strong>　　语法 ：字符串名.toCharArray();　　返回值为 char 数组类型。将字符串变成一个字符数组 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;张三疯&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;指定字符为：&quot;</span> + c); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：指定字符为：疯</span><br></pre></td></tr></table></figure><p>4、<strong>int indexOf(“字符”)</strong>　　</p><p>语法 ：字符串名.indexOf(“字符”)；</p><p>字符串名.indexOf(“字符”,查找起始位置)；    查找一个指定的字符串是否存在，返回的是字符串的位置，<strong>如果不存在，则返回-1 。</strong> </p><p><strong>int lastIndexOf(“字符”)</strong> 得到指定内容最后一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;只为挨你近一点&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> a1 = str.indexOf(<span class="string">&quot;你&quot;</span>);<span class="comment">// 查找字符你的位置 </span></span><br><span class="line"><span class="keyword">int</span> a2 = str.indexOf(<span class="string">&quot;为&quot;</span>, <span class="number">2</span>);<span class="comment">// 查找为的位置，从第3个开始查找</span></span><br><span class="line"><span class="keyword">int</span> a3 = str.lastIndexOf(<span class="string">&quot;点&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;你的位置为:&quot;</span> + a1); </span><br><span class="line">System.out.println(<span class="string">&quot;为的位置为:&quot;</span> + a2);</span><br><span class="line">System.out.println(<span class="string">&quot;点最后出现的位置为:&quot;</span> + a3);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">你的位置为:<span class="number">3</span></span><br><span class="line">为的位置为:-<span class="number">1</span></span><br><span class="line">点最后出现的位置为:<span class="number">7</span></span><br></pre></td></tr></table></figure><p>5、**toUpperCase()； toLowerCase()**；字符串大小写的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;将字符串转大写为：&quot;</span> + str.toUpperCase());</span><br><span class="line">System.out.println(<span class="string">&quot;将字符串转换成小写为：&quot;</span> + str.toUpperCase().toLowerCase());</span><br><span class="line"></span><br><span class="line">运算结果：</span><br><span class="line">将字符串转大写为：HELLO WORLD</span><br><span class="line">将字符串转换成小写为：hello world</span><br></pre></td></tr></table></figure><p>6、<strong>String[] split(“字符”)</strong>　　根据给定的正则表达式的匹配来拆分此字符串。形成一个新的String数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;boo:and:foo&quot;</span>;</span><br><span class="line">String[] arr1 = str.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">String[] arr2 = str.split(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">运行结果：　　</span><br><span class="line">arr1　　<span class="comment">//&#123; &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; &#125;　　</span></span><br><span class="line">arr2　　<span class="comment">//&#123; &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>7、<strong>boolean equals(Object anObject)</strong>　　语法 ：字符串变量名.wquals(字符串变量名);　　返回值为布尔类型。所以这里用 if 演示。比较两个字符串是否相等，返回布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str1=<span class="string">&quot;world&quot;</span>;  </span><br><span class="line"><span class="keyword">if</span>(str.equals(str1)) </span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;这俩字符串值相等&quot;</span>); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这俩字符串值不相等&quot;</span>);  </span><br><span class="line">&#125;　　　　　　</span><br><span class="line"></span><br><span class="line">运行结果：这俩字符串值不相等</span><br></pre></td></tr></table></figure><p>　　　　　　　　　 </p><p>8、<strong>trim();</strong>　　去掉字符串左右空格　　**replace(char oldChar,char newChar);**新字符替换旧字符，也可以达到去空格的效果一种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;       挨点博客         &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;去掉左右空格后:&quot;</span> + str.trim()); </span><br><span class="line"></span><br><span class="line">运行结果：去掉左右空格后:挨点博客</span><br></pre></td></tr></table></figure><p>　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第二种：</span><br><span class="line">String str = <span class="string">&quot;       挨点博客         &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;去掉左右空格后:&quot;</span> + str.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)); </span><br><span class="line"></span><br><span class="line">运行结果：去掉左右空格后:挨点博客</span><br></pre></td></tr></table></figure><p>9、<strong>String substring(int beginIndex,int endIndex)</strong>　　截取子字符串，包括begin，不包括endindex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;123挨点博客456&quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;截取后的字符为：&quot;</span> + str.substring(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">// 截取0-3个位置的内容   不含3 </span></span><br><span class="line">System.out.println(<span class="string">&quot;截取后字符为：&quot;</span> + str.substring(<span class="number">2</span>));<span class="comment">// 从第3个位置开始截取    含2　　</span></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">截取后的字符为：<span class="number">123</span></span><br><span class="line">截取后字符为：<span class="number">3</span>挨点博客<span class="number">456</span></span><br></pre></td></tr></table></figure><p>　　　　</p><p>10、<strong>boolean equalsIgnoreCase(String)</strong> 忽略大小写的比较两个字符串的值是否一模一样，返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.equalsIgnoreCase(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个字符串相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个字符串不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：　两个字符串相等</span><br></pre></td></tr></table></figure><p>　　　</p><p>11、<strong>boolean contains(String)</strong> 判断一个字符串里面是否包含指定的内容，返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;WO&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.contains(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在WO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在WO</span><br></pre></td></tr></table></figure><p>　　</p><p>12、<strong>boolean startsWith(String)</strong>　　测试此字符串是否以指定的前缀开始。返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;HE&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.startsWith(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在HE前缀开头&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在HE前缀开头</span><br></pre></td></tr></table></figure><p>　　</p><p>13、<strong>boolean endsWith(String)</strong>　　测试此字符串是否以指定的后缀结束。返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;挨点博客&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;博客&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.endsWith(str1))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在\&#x27;博客\&#x27;后缀结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在<span class="string">&#x27;博客&#x27;</span>后缀结束</span><br></pre></td></tr></table></figure><p>14、上面提到了replace方法，接下继续补充一下  </p><p><strong>String replaceAll(String,String)</strong> 将某个内容全部替换成指定内容，　　 </p><p><strong>String repalceFirst(String,String)</strong> 将第一次出现的某个内容替换成指定的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;，，，，，，挨点博客，，，，， &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;改变后：&quot;</span> + str.replaceAll(<span class="string">&quot;，&quot;</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">改变后：aaaaaa挨点博客aaaaa </span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;，，，，，，挨点博客，帅吗，帅吗，，，，， &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;改变后：&quot;</span> + str.replaceFirst(<span class="string">&quot;帅吗&quot;</span>,<span class="string">&quot;很帅哦&quot;</span>));</span><br><span class="line"></span><br><span class="line">运行结果：改变后：，，，，，，挨点博客，很帅哦，帅吗，，，，， </span><br></pre></td></tr></table></figure><p>15、 <strong>int comparaTo(String)</strong>  两个字符串作比较，返回比较的值</p><p>比较规则：如果两个字符串长度不相同，则返回长度的差值</p><p>如果两个字符串的长度相同，逐个字符进行比较，返回不相同字符的ASCII码差值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">        String str2=<span class="string">&quot;1234112&quot;</span>;</span><br><span class="line">        String str3=<span class="string">&quot;125&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> a = str1.compareTo(str2); <span class="comment">//-4   ,长度短4</span></span><br><span class="line">        <span class="keyword">int</span> b = str1.compareTo(str3); <span class="comment">//-2    ,3-5 = -2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays工具类常用方法"><a href="#Arrays工具类常用方法" class="headerlink" title="Arrays工具类常用方法"></a>Arrays工具类常用方法</h2><p><strong>Arrays.sort()</strong><br>对数组的排序(从小到大)</p><p><strong>Arrays.binarySerch()</strong><br>二分查找，找到则定位元素下标</p><p><strong>Arrays.toString()</strong><br>数组的打印</p><p><strong>Arrays.fill()</strong><br>数组的填充</p><p><strong>Arrays.equals()</strong><br>判断两个数组大小是否相等</p><p><strong>Arrays.asList()</strong><br>将数组转换为列表</p><p><strong>Arrays.copyOf(数组，int n)</strong><br>将数组的前n个值传给另一个数组</p><p><strong>Arrays.copyOfRange()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[] = Arrays.copyOf(a, <span class="number">4</span>);    <span class="comment">//4,3,6,5</span></span><br><span class="line"><span class="keyword">int</span> c[] = Arrays.copyOfRange(a, <span class="number">2</span>, <span class="number">4</span>);   <span class="comment">//6,5</span></span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line">System.out.println(Arrays.toString(c));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java 的String类中我们常用到一些方法来处理String字符串    ， java.lang.String&lt;/p&gt;
&lt;p&gt;Arrays工具类中我们常永道一些方法来处理数组  ,     java.util.Arrays&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>《格局》《视野》</title>
    <link href="http://example.com/2021/07/11/%E3%80%8A%E6%A0%BC%E5%B1%80%E3%80%8B%E3%80%8A%E8%A7%86%E9%87%8E%E3%80%8B/"/>
    <id>http://example.com/2021/07/11/%E3%80%8A%E6%A0%BC%E5%B1%80%E3%80%8B%E3%80%8A%E8%A7%86%E9%87%8E%E3%80%8B/</id>
    <published>2021-07-11T02:56:29.000Z</published>
    <updated>2021-07-11T14:28:07.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>格局小了   视野窄了 </p></blockquote><a id="more"></a><p>格局小了  视野窄了  思维局限了  </p><p>=》 上限低了</p><p>上限是由你的思维方式和定的目标确定的。。</p><p>应该是<strong>先入门</strong>， 突破外部屏障，才能真真切切的看到顶楼有多高，否则是看不到云雾缭绕的顶层的。</p><p>只有想或者不想，没有能或者不能</p><p>任何一个请求总有两种响应    200   和    404       </p><p>有些东西只能做好自己，不能强求，得到或者没得到并不能改变什么，你也不能通过得到这些东西而额外收获什么实质性的东西，也不会因为没有得到而额外失去什么   ，并且就算失去了看起来情况也不那么坏</p><p>attitude  is  magic </p><hr><p>在微博上看到一个话题  ：  内向的人是否很容易精神内耗</p><p>其实这玩意很神奇，对我而言类似于王阳明的格物致知精神一般，三天三夜也不能探究出什么，有时候也会陷入精神内耗的状态，在很多情况下是不可取的</p><p>所以</p><p><strong>精神内耗</strong>是个什么玩意？怎么克服<strong>精神内耗</strong>？</p><p><a href="https://zhuanlan.zhihu.com/p/377800318">教你如何克服精神内耗</a></p><p>《被讨厌的勇气》</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;格局小了   视野窄了 &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Arrays.asList使用注意</title>
    <link href="http://example.com/2021/07/10/Arrays.asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <id>http://example.com/2021/07/10/Arrays.asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</id>
    <published>2021-07-10T14:36:26.000Z</published>
    <updated>2021-07-10T14:41:29.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>new ArrayList&lt;&gt;()  和 Arrays.asList()  区别</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正常的创建的集合</span></span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list1 = &quot;</span> + list1.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组转的集合</span></span><br><span class="line">        String[] st1 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list2 = Arrays.asList(st1);</span><br><span class="line">        list2.add(<span class="string">&quot;4&quot;</span>);   <span class="comment">// 此处会抛出异常，不能使用add方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list2 = &quot;</span> + list2.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时不报错，运行时报错，原因是：虽然返回的List的都继承了AbstractList<E>，</p><p>但new ArrayList&lt;&gt;对某些方法做了重写，而Arrays.asList(st1)只做了继承，没有重写，</p><p>因而不能执行add和remove操作</p><p><img src="/images/%E2%80%98Arrays-asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E2%80%99/1583027-20200902113344541-1662617028.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;new ArrayList&amp;lt;&amp;gt;()  和 Arrays.asList()  区别&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>java集合</title>
    <link href="http://example.com/2021/06/11/java%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/06/11/java%E9%9B%86%E5%90%88/</id>
    <published>2021-06-11T04:19:16.000Z</published>
    <updated>2021-06-12T01:43:13.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java集合的一些总结，理清框架结构</p></blockquote><a id="more"></a><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><h2 id="Collection子接口List"><a href="#Collection子接口List" class="headerlink" title="Collection子接口List"></a>Collection子接口List</h2><h2 id="Collection子接口Set"><a href="#Collection子接口Set" class="headerlink" title="Collection子接口Set"></a>Collection子接口Set</h2><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h2 id="Connections工具类"><a href="#Connections工具类" class="headerlink" title="Connections工具类"></a>Connections工具类</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java集合的一些总结，理清框架结构&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java多线程</title>
    <link href="http://example.com/2021/05/30/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2021/05/30/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-05-30T03:40:21.000Z</published>
    <updated>2021-06-07T07:38:07.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java多线程学习</p></blockquote><a id="more"></a><p>java.lang.Thread</p><p>还差一个死锁和生产者消费者问题没有解决，用到的时候再来补充</p><h2 id="多线程的创建"><a href="#多线程的创建" class="headerlink" title="多线程的创建"></a>多线程的创建</h2><h3 id="方法一：继承与Thread子类"><a href="#方法一：继承与Thread子类" class="headerlink" title="方法一：继承与Thread子类"></a>方法一：继承与Thread子类</h3><p>1.继承Thread类的子类</p><p>2.重写run()方法（线程执行的操作在run方法中）</p><p>3.创建子类对象</p><p>4.通过此对象调用start()方法   （start方法作用：1.启动当前线程  2.调用当前线程的run方法）</p><p><strong>注意</strong>：</p><p>1.要启用新的线程要使用start()方法，而不能直接使用run()方法，否则不会被认为开启了新线程</p><p>2.不可以让已经启动了的线程再去start，否则会报IlleagalThreadStatteException的错误</p><p>运行下列代码，线程t1、线程t1、main线程并发，相当于没有先后顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span> ; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test1 t1 = <span class="keyword">new</span> Test1();    <span class="comment">//线程t1</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Test1 t2 = <span class="keyword">new</span> Test1();   <span class="comment">// 线程t2</span></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;   <span class="comment">// 主线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：-实现Runnable接口"><a href="#方法二：-实现Runnable接口" class="headerlink" title="方法二： 实现Runnable接口"></a>方法二： 实现Runnable接口</h3><p>1.定义子类实现Runnable接口</p><p>2.重写run（）方法</p><p>3.创建Runnable子类对象</p><p>4.将子类对象作为参数传入到Thread类的构造器中</p><p>5.调用start（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test2 = <span class="keyword">new</span> Test2();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(test2);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h3><p>开发中优先选择实现接口的方式<br>实现方式的好处：</p><p> 1.避免了单继承的局限性 （因为一个类若继承Thread类则不可以继承其他类了）</p><p>2.多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</p><h3 id="几个Thread类中的方法："><a href="#几个Thread类中的方法：" class="headerlink" title="几个Thread类中的方法："></a>几个Thread类中的方法：</h3><p>start（）、run（）、getName（）、setName（String name）</p><p>static Thread currentThread(): 返回当前线程。</p><p>static void yield()：线程让步  1.暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p><p>2.若队列中没有同优先级的线程，忽略此方法</p><p>join（）:当某个线程调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止。比如main线程中调用t1.join()，那么main线程将会被阻塞直到t1线程执行完毕</p><p>sleep（）：休眠，单位毫秒</p><h3 id="JDK5-0新增的创建多线程的方法"><a href="#JDK5-0新增的创建多线程的方法" class="headerlink" title="JDK5.0新增的创建多线程的方法"></a>JDK5.0新增的创建多线程的方法</h3><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p>抢占式：高优先级的线程抢占CPU</p><p>1.Java的调度方法 ：</p><p>​    1.同优先级线程组成先进先出队列（先到先服务）</p><p>​    2.对高优先级，使用优先调度的抢占式策略</p><p>2.线程的优先级等级 ：</p><p>MAX_PRIORITY：10 </p><p>MIN _PRIORITY：1 </p><p>NORM_PRIORITY：5 </p><p>3.涉及的方法</p><p>1.getPriority() ：返回线程优先值 </p><p>2.setPriority(int newPriority) ：改变线程的优先级</p><p>注意：</p><p>1.线程创建时继承父线程的优先级</p><p>2.不一定说先执行完优先高的再执行优先级低的，优先级高只是说执行概率高</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606163249026.png" alt="线程的生命周期"></p><p>注意我们start（）后不是就立即执行了，而是去抢夺cpu执行权</p><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>线程安全问题的描述：线程还在一段代码执行中没有出来，比如说先打印了票数，票数还没有自减，另一个线程就进入了代码中，导致了线程的安全问题</p><p>解决方法：当线程a在操作共享数据时，其他线程不能参与进来，线程a操作完后，其他线程才可以参与进来。这种情况即便线程a出现了阻塞（相当于在休眠），其他线程也不能参与进来。</p><p>比如说在下面这个卖车票的例子中，当车票只有1张时，3个线程都同时进入了run（）方法中，导致车票数量为负数。</p><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606215332549.png" alt="卖票的例子"></p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606215644487.png" alt="出现错误的情况" style="zoom: 67%;" /><h3 id="方法一：同步代码块"><a href="#方法一：同步代码块" class="headerlink" title="方法一：同步代码块"></a>方法一：同步代码块</h3><p>synchronized（同步监视器）{</p><p>​            //需要被同步的代码，即操作同步数据的代码</p><p>}</p><p>说明：1.同步监视器就是我们俗称的锁，任何一个类的对象都可以充当锁。</p><p>​                    要求：多个线程必须共享<strong>同一把锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        <span class="comment">//这里我们使用当前对象的字节码对象作为同步锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">       <span class="comment">// 也可以synchronized(window.class)   用该类做为锁，且只会加载一次，所以是唯一的</span></span><br><span class="line">         <span class="comment">// 也可以synchronized(this)         以该类的对象作为锁</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：同步方法"><a href="#方法二：同步方法" class="headerlink" title="方法二：同步方法"></a>方法二：同步方法</h3><p>使用同步方法的注意点：</p><ul><li><p>使用方法：public synchronized void 方法名（）{}</p></li><li><p>同步方法是让整个方法同步，若方法中有循环，则一个线程进入这个同步方法后会一直卡在这个循环中，这时候要考虑用同步方法块，缩小同步的范围</p></li><li><p>同步方法的同步监视器默认为this，注意看这样会不会是同一把锁，特别是在继承的方式实现同步时，很容易就不是同一把锁了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        sell();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然这里我们也能用同步代码块的方法解决，即去掉synchronized修饰，再用同步代码块包起来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// synchronized(this)&#123;&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三：使用锁机制"><a href="#方法三：使用锁机制" class="headerlink" title="方法三：使用锁机制"></a>方法三：使用锁机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一共有 50 张票，继承机制开启线程，资源是共享的，所以不用加 static</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">50</span>;</span><br><span class="line"><span class="comment">//创建一个锁对象</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="synchronized和Lock的对比"><a href="#synchronized和Lock的对比" class="headerlink" title="synchronized和Lock的对比"></a>synchronized和Lock的对比</h3><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210607103706448.png" alt="synchronized与lock的对比"></p><h2 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h2><p>1.不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁 </p><p>2.出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续</p><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h3 id="线程通信的三个方法"><a href="#线程通信的三个方法" class="headerlink" title="线程通信的三个方法"></a>线程通信的三个方法</h3><p>wait(): 执行此方法时，当前线程进入阻塞状态，并释放同步监视器</p><p>notify(): 执行此方法时，就会唤醒被wait的一个线程，如有多个线程，优先级大的那个被唤醒</p><p>notifyAll(): 执行此方法时，就会唤醒被wait的所有有线程</p><p>注意点：</p><ul><li>三个方法都必须使用在同步代码块或者同步方法中</li><li>三个方法都的调用者都必须是同步代码块或者同步方法中的同步监视器（默认为this，若不相同则会报错）</li><li>三个方法定义在java.lang.Object类中，因为任何对象都需要有这三个方法</li></ul><h3 id="例子：两个线程交替打印1-100的数"><a href="#例子：两个线程交替打印1-100的数" class="headerlink" title="例子：两个线程交替打印1~100的数"></a>例子：两个线程交替打印1~100的数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;num &lt;= <span class="number">100</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                notify();  <span class="comment">//</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();  <span class="comment">//</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 =  <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 =  <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sleep-和wait-的对比"><a href="#sleep-和wait-的对比" class="headerlink" title="sleep()和wait()的对比"></a>sleep()和wait()的对比</h3><p><strong>相同点</strong>：</p><ul><li>一旦执行方法，都可以使线程进入阻塞状态</li></ul><p><strong>不同点</strong>：</p><ul><li>方法声明的位置不同，Thread类中声明sleep(), Object类中声明wait()</li><li>调用的要求不同：sleep可以在任何需要的场景下调用，wait()必须使用在同步方法块或者同步代码中</li><li>sleep()不会释放同步监视器，wait()会释放同步监视器</li></ul><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p><strong>问题描述</strong>：</p><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p><strong>具体实现</strong>：</p><h2 id="线程池创建多线程"><a href="#线程池创建多线程" class="headerlink" title="线程池创建多线程"></a>线程池创建多线程</h2><p>在开发当中，我们真正用的都是线程池</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        NumberThread num = <span class="keyword">new</span> NumberThread();</span><br><span class="line">        NumberThread1 num1 = <span class="keyword">new</span> NumberThread1();</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        service.execute(num);</span><br><span class="line">        service.execute(num1);</span><br><span class="line">        <span class="comment">// 关闭线程</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=446&spm_id_from=pageDriver">java尚硅谷视频</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java多线程学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="多线程" scheme="http://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>面向github学习</title>
    <link href="http://example.com/2021/05/27/%E9%9D%A2%E5%90%91github%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/05/27/%E9%9D%A2%E5%90%91github%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-27T08:43:05.000Z</published>
    <updated>2021-05-27T08:45:16.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>面向github学习</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;面向github学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>静态变量与成员变量区别</title>
    <link href="http://example.com/2021/05/27/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/05/27/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB/</id>
    <published>2021-05-27T01:22:17.000Z</published>
    <updated>2021-05-27T14:40:10.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java中静态变量</p></blockquote><a id="more"></a><p>几个没弄懂的？</p><ul><li><p>（关于变量的创建过程以及堆内存  方法区的理解？</p></li><li><p>String类  </p></li><li><p>```</p><ul><li>1.静态变量（类变量）与成员变量有什么区别？</li><li>2.8种基本数据类型 6中数字类型，一种布尔型，一种字符型，byte、short、int、long、float、double、boolean、char</li><li>都是小写、大写的是包装类，且String不是基本数据类型</li><li>3.基本数据类型的取值范围都已经存在了包装类中，无需记忆Integer.MAX_VALUE、Integer.SIZE</li><li>4.如何定义常量?</li><li>5.自动类型转换，简单记忆：位数小的自动转为大的，大的转化为小的要强制转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">静态变量(类变量)与成员变量的区别:</span><br><span class="line"></span><br><span class="line">![image-20210527214548415](&#x2F;images&#x2F;123&#x2F;image-20210527214548415.png)</span><br><span class="line"></span><br><span class="line">关于静态变量的测试如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Member &#123;</span><br><span class="line">   public static int x &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(Member.x);  &#x2F;&#x2F;可以通过 类名.静态变量名 直接调用，而不需要新建一个对象</span><br><span class="line">       Member a &#x3D; new Member();</span><br><span class="line">       Member b &#x3D; new Member();</span><br><span class="line">        System.out.println(a.x);  &#x2F;&#x2F;4</span><br><span class="line">        System.out.println(b.x);  &#x2F;&#x2F;5</span><br><span class="line">        a.x &#x3D; 5;                  &#x2F;&#x2F;测试一下类a中静态变量x变化是否会影响类b</span><br><span class="line">        System.out.println(b.x);  &#x2F;&#x2F;5  ,我们只改变了a中的变量，但b中变量也变化了，说明改变的是这个类</span><br><span class="line">        Member c &#x3D; new Member();</span><br><span class="line">        System.out.println(c.x);  &#x2F;&#x2F;5 ,此时新建类c也可以看出</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java中静态变量&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-25T03:34:40.000Z</published>
    <updated>2021-05-26T03:22:41.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天手敲了一下数据结构，归纳一下链表、栈、队列、串、树的代码</p></blockquote><a id="more"></a><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>如果需要支持随机访问的话，链表没办法做到。</li><li>如果需要存储的数据元素的个数不确定，并且需要经常<strong>添加和删除数据</strong>的话，使用链表比较合适。</li><li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li></ul><h3 id="数组-vs-链表"><a href="#数组-vs-链表" class="headerlink" title="数组 vs 链表"></a>数组 vs 链表</h3><ul><li><strong>数组支持随机访问，而链表不支持</strong>。</li><li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li><li>数据的大小固定，而链表则天然支持<strong>动态扩容</strong>。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>无论是插入操作还是删除操作，都要找到指定结点的前驱结点</li><li>注意头插法和尾插法的区别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义结点类，包含数据域和指针域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有结点值的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line"><span class="comment">//        this.data = data;</span></span><br><span class="line"><span class="comment">//        this.next = null;</span></span><br><span class="line">        <span class="comment">//相当于是调用了最后一个构造器</span></span><br><span class="line">        <span class="keyword">this</span>(data,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带有结点值和后继结点的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义链表类，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node head;  <span class="comment">//单链表头节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数构造长度为n的单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> Order)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">if</span>(Order)</span><br><span class="line">            create1(n);   <span class="comment">// 尾插法</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            create2(n);   <span class="comment">// 头插法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法顺序建立单链表,每次插入将新节点插入到链表的表尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            insert(length(),sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头插法顺序建立单链表，次插入将新节点插入到链表的表头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            insert(<span class="number">0</span>,sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将链表置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head.data = <span class="keyword">null</span>;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在位置i插入元素x</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Object x)</span></span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//移动指针到指定节点的前驱结点</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j &lt; i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        Node s = <span class="keyword">new</span> Node(x);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定值的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; p.data != x )&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出链表值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主函数测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入值：&quot;</span>);</span><br><span class="line">        LinkList linkList = <span class="keyword">new</span> LinkList(<span class="number">5</span>,<span class="keyword">false</span>);</span><br><span class="line">        linkList.display();</span><br><span class="line">        System.out.println(linkList.isEmpty());</span><br><span class="line">        System.out.println(linkList.length());</span><br><span class="line">        linkList.clear();</span><br><span class="line">        System.out.println(linkList.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p><strong>栈</strong> (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p></li><li><p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p></li><li><p>满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性</p></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用栈中的数量来进行的，栈元素的数量可以理解为栈顶元素下一个存储单元的位置下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] storage;<span class="comment">//存放栈中元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;<span class="comment">//栈的容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//栈中元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_FACTOR = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不带初始容量的构造方法。默认容量为8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">this</span>.storage=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带初始容量的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Capacity too small.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.capacity = initialCapacity;</span><br><span class="line">        <span class="keyword">this</span>.storage = <span class="keyword">new</span> <span class="keyword">int</span>[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈,如果栈中的数量已满时，会自动扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == capacity) &#123;</span><br><span class="line">            ensureCapacity();</span><br><span class="line">        &#125;</span><br><span class="line">        storage[count++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确保容量大小</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    Arrays的copyOf()方法传回的数组是新的数组对象，改变传回数组中的元素值，不会影响原来的数组。</span></span><br><span class="line"><span class="comment">copyOf()的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值，例如：</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = capacity * GROW_FACTOR;</span><br><span class="line">        storage = Arrays.copyOf(storage, newCapacity);</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈顶元素并出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> storage[count];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈顶元素不出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> storage[count-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈中元素的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyStack stack = <span class="keyword">new</span> MyStack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><ul><li>一般用两个指针来实现，front头指针指向队首，出队时front后移，rear指向队尾的后一个元素，入队时rear后移</li><li>当空队列时，front = rear = 0</li><li>当满队列时，rear = maxSize</li></ul><p><strong>缺点：</strong></p><p>顺序队列存在<strong>“假溢出”</strong>的问题也就是明明有位置却不能添加的情况。</p><p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20210525155152412.png" alt="image-20210525155152412"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequeue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数，容量为8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxSize = <span class="number">8</span>;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造最大存储单元格数为maxSize的空队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequeue</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear - front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取队首元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rear == maxSize)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        queueElem[rear++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 看看是不是返回后再减</span></span><br><span class="line">        <span class="keyword">return</span> queueElem[front++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印队列值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">                System.out.println(queueElem[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//测试主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sequeue sequeue = <span class="keyword">new</span> Sequeue();</span><br><span class="line">        sequeue.offer(<span class="number">1</span>);</span><br><span class="line">        sequeue.offer(<span class="number">2</span>);</span><br><span class="line">        sequeue.clear();</span><br><span class="line">        System.out.println(sequeue.isEmpty());</span><br><span class="line">        sequeue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>使用循环队列可以解决顺序队列的<strong>假溢出</strong>和<strong>越界问题</strong></p><ul><li>队列容量 = maxSize -1，即rear总是指向空闲的位置，</li><li>空队列时，rear = front</li><li>满队列时，(rear + 1) % maxSize == front  ，考虑rear在front前面和后面两种情况可得出此结论</li><li>队列的长度：(rear - front + maxSize) % maxSize</li><li>头指针和尾指针的移动语句：front = (front + 1) % maxSize；  rear = (rear + 1) % maxSize</li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20210525155822770.png" alt="image-20210525155822770"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">队列为空的时候就是 front==rear ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSequeue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxSize = <span class="number">8</span>;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSequeue</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = x;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rear = front = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队列的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + maxSize) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取队首元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((rear + <span class="number">1</span>) % maxSize == front)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        queueElem[rear] = x;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object p = queueElem[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; length(); i = (i + <span class="number">1</span>) % maxSize)&#123;</span><br><span class="line">                System.out.println(queueElem[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此队列为空队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleSequeue circleSequeue = <span class="keyword">new</span> CircleSequeue();</span><br><span class="line">        circleSequeue.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>对字符串的一系列操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] strValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> curLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">        curLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以字符串常量构造串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Converts this string to a new character array.</span></span><br><span class="line">        <span class="keyword">char</span>[] p =str.toCharArray();</span><br><span class="line">        strValue = p;</span><br><span class="line">        curLen = p.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以字符数组构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">(<span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[str.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            strValue[i] = str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        curLen = str.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将串变为空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        curLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curLen ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回串的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回位置序号为i的字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;超出范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strValue[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将串的长度扩充为newCapcity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> newCapcity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] tmp = strValue;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[newCapcity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++)&#123;</span><br><span class="line">            strValue[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        curLen = newCapcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回位置序号从 begin 到 end - 1 的子串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || end &gt; curLen || begin &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;范围错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] tmp = <span class="keyword">new</span> <span class="keyword">char</span>[end - begin];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            tmp[i - begin] = strValue[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第 i 个字符之前插入子串str (i &gt;= 0 &amp;&amp; i &lt;= n)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i ,String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">int</span> len1 = curLen;  <span class="comment">//存储原字符串的长度，因为后面扩容长度会改变</span></span><br><span class="line">        <span class="keyword">int</span> newCapcity = len + curLen;</span><br><span class="line">        allocate(newCapcity);   <span class="comment">//重新分配存储空间为 newCapcity 的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = len1 - <span class="number">1</span>; j &gt;= i; j--)&#123;</span><br><span class="line">            strValue[j + len] = strValue[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新字符串插入到从 i 开始的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len + i; j++)&#123;</span><br><span class="line">            strValue[j] = str.charAt(j - i);  <span class="comment">//charAt 函数取出String中指定位置的字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除位置序号从 begin 到 end - 1 的子串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> begin , <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || end &gt; curLen || begin &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向前移动</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt; end ; i++)&#123;</span><br><span class="line">            strValue[i] = strValue[end + i - begin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 改变容量</span></span><br><span class="line">        curLen = curLen - end + begin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将 str 连接到字符串的后面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">concat</span> <span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="comment">//        for(int i = curLen; i &lt; curLen + str.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">//            strValue[i] = str.charAt(i - curLen);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        curLen = curLen + str.length();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//也可以直接调用插入操作，插入到字符串最后的位置</span></span><br><span class="line">         insert(curLen, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较 str 和当前字符串的大小, 取两个字符串较短者作为公共长度进行比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Math.min(curLen, str.length());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strValue[i] &gt; str.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(strValue[i] &lt; str.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从位置序号为 begin 的字符串开始搜索与 str 相等的子串   ?未解决</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || begin + str.length() &gt;= curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围内或没有这样的子串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; length();i++)&#123;</span><br><span class="line">            System.out.println(strValue[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SeqString str = <span class="keyword">new</span> SeqString(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">        str.display();</span><br><span class="line">        System.out.println(str.curLen);</span><br><span class="line">        str.concat(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(str.curLen);</span><br><span class="line">        str.display();</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        str.insert(<span class="number">1</span>,<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        str.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>后序遍历的非递归算法没看懂，怎样更好的理解递归，递归的实质应该是由栈所构成的。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line">    <span class="keyword">public</span> BitreeNode lchild,rchild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供了三中类型的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">(Object data, BitreeNode lchild, BitreeNode rchild)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.lchild = lchild;</span><br><span class="line">        <span class="keyword">this</span>.rchild = rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(data,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BitreeNode root;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BiTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BiTree</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    采用递归算法如下所示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先序遍历的结果是：&quot;</span>);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历的结果是：&quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历的结果是：&quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    采用非递归算法如下所示</span></span><br><span class="line"><span class="comment">    因为递归实现的过程就是程序自己在处理圧栈和弹栈，改用非递归实现时，用栈模拟系统的圧栈与弹栈，就可以了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、申请一个栈stack，然后将头节点压入stack中。</span></span><br><span class="line"><span class="comment">     * 2、从stack中弹出栈顶节点，打印，再将其右孩子节点（不为空的话）先压入stack中，最后将其左孩子节点（不为空的话）压入stack中。</span></span><br><span class="line"><span class="comment">     * 3、不断重复步骤2，直到stack为空，全部过程结束。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack.pop();</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            <span class="keyword">if</span>(p.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(p.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(p.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、申请一个栈stack，</span></span><br><span class="line"><span class="comment">     * 2、先把root压入栈中，依次把左孩子压入栈中，即不停的令root=root.left</span></span><br><span class="line"><span class="comment">     * 3、重复步骤2，直到root为null，从stack中弹出一个节点并打印该结点的值，并令root=root.right,重复步骤2</span></span><br><span class="line"><span class="comment">     * 第三步相当于是压入一个右结点，就把该右结点当做根结点，看它有没有左孩子，有就不断将它的左孩子压入栈中，这样最先打印出来的也是左孩子</span></span><br><span class="line"><span class="comment">     * 4、当stack为空且cur为空时，整个过程停止。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.lchild;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                root = root.rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//后序遍历,没太看懂？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack1.pop();</span><br><span class="line">            stack2.push(p);</span><br><span class="line">            <span class="keyword">if</span>(p.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack1.push(p.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack1.push(p.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack2.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack2.pop();</span><br><span class="line">            System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//层次遍历，使用队列来解决，左右结点分别入队，结点出队后再将其左右结点入队，不断重复这个步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;层序遍历的结果是：&quot;</span>);</span><br><span class="line">        Queue&lt;BitreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;BitreeNode&gt;();</span><br><span class="line">        BitreeNode p =root;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            BitreeNode q = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(q.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(q.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(q.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(q.data + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在二叉树中查找值为x的节点，若找到返回该结点，否则返回空值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BitreeNode <span class="title">searchNode</span><span class="params">(BitreeNode root,Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.data.equals(x)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    BitreeNode lresult = searchNode(root.lchild, x);</span><br><span class="line">                    <span class="keyword">if</span> (lresult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> searchNode(root.rchild, x);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> lresult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计二叉树结点的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nodeCount</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                count += nodeCount(root.lchild);</span><br><span class="line">                count += nodeCount(root.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求二叉树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ldepth = getDepth(root.lchild);</span><br><span class="line">        <span class="keyword">int</span> rdepth = getDepth(root.rchild);</span><br><span class="line">        <span class="keyword">if</span>(ldepth &lt; rdepth)&#123;</span><br><span class="line">            <span class="keyword">return</span> rdepth + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ldepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">javaGuide大佬的笔记</a></p><p><a href="https://www.cnblogs.com/bigsai/p/11393609.html">二叉树——前序遍历、中序遍历、后序遍历、层序遍历详解(递归非递归)</a></p><p><a href="http://www.tup.tsinghua.edu.cn/bookscenter/book_07232901.html#">数据结构(java版) 清华大学出版社 吕云翔著</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这几天手敲了一下数据结构，归纳一下链表、栈、队列、串、树的代码&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>5.22</title>
    <link href="http://example.com/2021/05/22/5-22/"/>
    <id>http://example.com/2021/05/22/5-22/</id>
    <published>2021-05-22T02:14:00.000Z</published>
    <updated>2021-05-22T02:52:10.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咕咕咕咕</p></blockquote><a id="more"></a><p>先说说几天前的事，没想到第一次牵小周的手竟然是这样的。。</p><p>呜呜即便在出门前我脑子里这场景已经排练好n次，但是最后一刻我又怂了。。</p><p>你在怕什么呢？</p><p>怕这样太轻浮了？怕这样会惹她不开心？</p><p>醒醒pb，你们都认识半年了~不对真要算起来初中就认识了，你是男生？你好怂！怂包！</p><p>估计这场面我会永生难忘，哈哈感觉接触的那一刻身体被电了一下，走在路上人都是酥麻酥麻的~</p><p>呼，不想了要不然我人又得麻</p><p>总之吧，希望你不只是为了你自己，还要为了你的家人，你喜欢的人，这样更能有动力前行</p><hr><p>今天呢，和实验室研三学长聊了聊，探讨了下实验室情况和未来几年个人成长。</p><p>结论就是：实验室很好，老师很好，学长也很好</p><p>当一切外部环境都变得十分友好时，接下来的路就要靠你自己来走</p><hr><p>跌跌撞撞走来，一切都很神奇，我这个向来不相信神学各种玄学的人也会觉得这是命运的安排</p><p>几年前你不会觉得你还有机会再次遇到她</p><p>一个月前你也不会觉得你会来到这个实验室</p><p>我向来是坚信你朝着哪个方向努力了，就会有相应结果</p><p>但是这些事情你不曾料到过</p><p>可能这就是缘分吧~</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;咕咕咕咕&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>5-5</title>
    <link href="http://example.com/2021/05/05/5-5/"/>
    <id>http://example.com/2021/05/05/5-5/</id>
    <published>2021-05-05T03:22:34.000Z</published>
    <updated>2021-05-05T03:38:11.059Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>呱呱呱</p></blockquote><a id="more"></a><p>今早坐在空无一人的教室里，莫名心潮澎湃</p><p>当我把眼光放低点的时候，突然间感觉好幸福~</p><p>现在该有的都有了，我还缺什么呢？</p><p>有大把时间供自己安排，不用去卷成绩，不用去担心情感的依托，不用去顾忌各种有的没的</p><p>一句话就是：想做啥做啥。</p><p>我的思绪已经飘到了异国他乡</p><p>打住，我可能已经看着屏幕傻笑了半小时了</p><p>那又有什么关系呢~</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;呱呱呱&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>4.28</title>
    <link href="http://example.com/2021/04/28/4-28/"/>
    <id>http://example.com/2021/04/28/4-28/</id>
    <published>2021-04-28T11:32:30.000Z</published>
    <updated>2021-05-05T03:28:01.654Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>选择真的大于努力吗？</p></blockquote><a id="more"></a><p>先阐述我的观点：是的</p><p>抛开各种一元论（单单只讲选择重要性或者只讲努力的重要性都是耍流氓）、极端情况。</p><p>也不论几年前入职拼多多、字节、比特币实现财富自由的人，更不甚前几个月押注显卡的人，时机和选择让人有了一种暴发户的感觉。</p><p>谈谈我的人生选择：</p><p>我来自一个普通的家庭，唯一的帮助就是父母都是老师（家里有一种学习的底蕴），其余全是靠自己的选择和努力</p><ul><li>初一选择中途转学到更好的学校，脱离舒适区，我在想要是我还在那所学校，虽然能成绩一马当先，面对老师的夸奖，同龄人的羡慕，可这样走下来，肯定到不了现在这个学校，也不能取得现在的成绩</li><li>初三毕业没有选择去市里的一中读书，选择了在本地继续上学，</li><li>高中毕业没有选择去一众985，选择了当下热门的计算机强校211</li><li>大一听闻计算机更有前途，放弃了所在的电子专业，选择了和计算机相近的信息工程</li><li>。。。</li></ul><p>这些从现在看来大部分都是很正确的，我无法想象初一呆在一个连考上一本都很难上学校学习三年，这样我三年后会不会也像他们那样为考一个一本而挣扎不已呢？我无法想象要是选择了985的四大天坑专业，可能我现在还在忙着跨考或者准备工作吧？</p><p>每个节骨点上的选择都尤为重要，我们无法从上帝视角中看出哪个选择在将来就一定是正确的，但是我们可以吸取前人的观点，至少不会出大乱子，至少方向是对的，即便多走了一些弯路。</p><p>因此，我们花费同样的时间和精力在选择上是优于努力的。</p><p>有时候我在想，我是不是精致的利己主义者（当然这个词在我眼中并不是贬义词，前提是并不损害别人的利益，可以另开一篇讨论），或者我就是一个机器学习程序，在不断寻找最优解。</p><p>只想在现在努把力，不至于将来平平庸庸（无贬义）再来抱怨自己当时为什么不选择更好的。</p><p>我们经常会看到某个人很幸运，类似于无心插柳柳成荫，取得了巨大成功，从概率角度这是一种小概率事件，我们身边更多的是无数个失败的案例。但是我们能通过选择来使这种失败的概率最小化，这样即便将来有些人会把这归结为运气，但我知道这是在做出最小化失败率选择后取得的成功，并不是一种运气。</p><p>所谓的时运不济，命途多舛真的是吗？还是自己没有去努力改变呢？希望这不是失败者的自怨自艾。而是文人雅士的牢骚罢了。</p><p>最优解排序：</p><p>选择对了+努力  &gt;  选择对了+不怎么努力  &gt;  选择错了 + 努力  &gt;  选择错了 + 不怎么努力</p><p>会很累吗？有点。但是我更不希望将来平平庸庸（无贬义）却没有了再次选择的机会。到头来只能说：”没办法，现在就只能这样做了”。</p><p>哦对了，今天很感谢小周能听我想法（牢骚），如果有一天你能看到这篇文章，那就。。嗯到时候再叫我</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;选择真的大于努力吗？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>怎么查美赛成绩</title>
    <link href="http://example.com/2021/04/24/%E6%80%8E%E4%B9%88%E6%9F%A5%E7%BE%8E%E8%B5%9B%E6%88%90%E7%BB%A9/"/>
    <id>http://example.com/2021/04/24/%E6%80%8E%E4%B9%88%E6%9F%A5%E7%BE%8E%E8%B5%9B%E6%88%90%E7%BB%A9/</id>
    <published>2021-04-24T07:21:46.000Z</published>
    <updated>2021-04-24T07:52:48.671Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>等待是最煎熬的过程，本人闲得无聊，写了个程序，美赛成绩一出将自动下载获奖证书发送到QQ邮箱，就不用每隔一段时间就去查成绩出了没</p></blockquote><a id="more"></a><p><strong>准备工作：</strong></p><ul><li>语言：python</li><li>下载第三方库 ：requests、yagmail</li><li><a href="https://blog.csdn.net/qq_41622603/article/details/106801525">配置qq邮箱</a></li></ul><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要配置的信息</span></span><br><span class="line">team_num = <span class="string">&#x27;xxxxxxx&#x27;</span>   <span class="comment"># 队伍号码</span></span><br><span class="line">certificate_name = team_num + <span class="string">&#x27;.pdf&#x27;</span>  <span class="comment"># 获奖证书命名</span></span><br><span class="line"></span><br><span class="line">imap = <span class="string">&#x27;xxxxxxxxxxxxxxxx&#x27;</span>  <span class="comment"># 16位qq邮箱授权码</span></span><br><span class="line">qq_mail_send = <span class="string">&#x27;12345678@qq.com&#x27;</span>  <span class="comment"># 发件邮箱</span></span><br><span class="line">qq_mail_receive = <span class="string">&#x27;12345678@qq.com&#x27;</span>  <span class="comment"># 收件邮箱</span></span><br><span class="line"><span class="comment"># 若需要群发给队友， qq_mail_receive = [&#x27;12345678@qq.com&#x27;, &#x27;87654321@qq.com&#x27;]</span></span><br><span class="line">subject = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 邮件主题</span></span><br><span class="line">contents = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 邮件正文</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.comap-math.com/mcm/202Certs/&#123;&#125;.pdf&#x27;</span>.<span class="built_in">format</span>(team_num)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    time.sleep(<span class="number">10</span>)  <span class="comment"># 每隔10s查询一次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若已出成绩，返回请求成功代码200</span></span><br><span class="line">    print(response.status_code)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 打印当前时间</span></span><br><span class="line">        localtime = time.asctime(time.localtime(time.time()))</span><br><span class="line">        print(<span class="string">&quot;呜呜呜终于出成绩啦！时间是:&quot;</span>, localtime)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将获奖证书以pdf格式下载到本地</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(certificate_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接邮件服务器</span></span><br><span class="line">        yag = yagmail.SMTP(user=qq_mail_send, password=imap, host=<span class="string">&quot;smtp.qq.com&quot;</span>)</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        yag.send(to=qq_mail_receive,  <span class="comment"># 接收邮箱</span></span><br><span class="line">                 subject=subject,  <span class="comment"># 标题</span></span><br><span class="line">                 contents=contents,  <span class="comment"># 正文</span></span><br><span class="line">                 attachments=certificate_name  <span class="comment"># 附件</span></span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;等待是最煎熬的过程，本人闲得无聊，写了个程序，美赛成绩一出将自动下载获奖证书发送到QQ邮箱，就不用每隔一段时间就去查成绩出了没&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分享" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>4.2</title>
    <link href="http://example.com/2021/04/20/4-20/"/>
    <id>http://example.com/2021/04/20/4-20/</id>
    <published>2021-04-20T02:36:36.000Z</published>
    <updated>2021-04-24T07:56:49.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果生活中的事情能够多线程互不干扰就好了</p></blockquote><a id="more"></a><p>单线程阻塞了不能影响主进程的运行，选择挂起</p><hr><p>现在的策略是：</p><p>将事务扔进沙箱，心情是主线，即便事务不再进行了，也不会影响主线。</p><p>希望如此。。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果生活中的事情能够多线程互不干扰就好了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习笔记</title>
    <link href="http://example.com/2021/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-14T13:54:14.000Z</published>
    <updated>2021-04-16T03:32:07.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上学期的机器学习全忘了，人在江湖飘，不会点机器学习都找不着导师了</p><p>只写一些不太记得的地方和重点</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1.机器学习分类</p><ul><li>监督学习</li><li>无监督学习</li><li>半监督学习</li><li>强化学习</li></ul><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>1.<strong>线性可分定义</strong></p><p>直观上：一条<strong>直线</strong>将一堆点和一堆圈分成两部分</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414220001685.png"></p><p>数学上：yi = +1 或 -1是两种分类的结果，想象一下点在直线上方和点在直线下方分别代表大于0和小于0情况</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414215757889.png"></p><hr><p><strong>2</strong>.<strong>怎样找到一条直线使得划分平面效果最优？</strong></p><p>若有很多种分类方法，找到其中<strong>最大间隔</strong>的一种分类方式</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414220909703.png"></p><p>得出下面结论：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414221050814.png"></p><hr><p><strong>3.如何用数学证明将寻找最优化超平面的过程写成一个最优化问题？</strong>（未解决？）</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415083407475.png">凸优化问题，采用梯度下降法不断寻找极值点</p><hr><p><strong>4.在线性不可分的情况下采用最优化算法</strong></p><p>但是这里采用的仍然是线性函数，在某些情况下并不能进行很好的分类</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415084431459.png"></p><hr><p><strong>5.当线性不可分时，因为直接在特征空间上采用最优化算法效果并不好，将特征空间由低纬到高纬的变换，使得可以线性可分</strong></p><p>下面有一个定理，说明了这个问题，可知当维度增加时，使得训练样本线性可分的概率增大了，无穷大时趋近于0</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415085218205.png"></p><p>回到问题四上面，将xi改成**φ(xi)**，同时使Ω的维度与φ(xi)相同，那么这个问题就类似于低纬问题的凸优化解法</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415085451183.png"></p><hr><p><strong>6.具体探究φ(xi)的形式</strong></p><p>核函数（kernel function）是一个实数，如下：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416105818055.png"></p><hr><p>下面介绍核函数与映射φ(x)之间的关系，</p><p>例子1：已知映射关系，求核函数</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110202133.png" alt="image-20210416110202133"></p><p>K（x1，x2）结果如下，是一个常数。</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110303215.png" alt="image-20210416110303215"></p><p>例子2，已知核函数，求映射φ(x)</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110535259.png" alt="image-20210416110535259"></p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110628633.png" alt="image-20210416110628633"></p><p>7.原问题与对偶问题</p><p>原问题：<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110845884.png" alt="image-20210416110845884"></p><p>对偶问题：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110928482.png" alt="image-20210416110928482"></p><p>9.支持向量机总体算法流程</p><h2 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h2><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416111930608.png" alt="image-20210416111930608"></p><p>感知器算法：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416112441104.png" alt="image-20210416112441104"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上学期的机器学习全忘了，人在江湖飘，不会点机器学习都找不着导师了&lt;/p&gt;
&lt;p&gt;只写一些不太记得的地方和重点&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>4-2</title>
    <link href="http://example.com/2021/04/02/4-2/"/>
    <id>http://example.com/2021/04/02/4-2/</id>
    <published>2021-04-02T02:29:02.000Z</published>
    <updated>2021-04-02T04:04:46.720Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>歪歪唧唧歪歪唧唧</p></blockquote><a id="more"></a><p>恰逢近些天找导师找的有些烦闷，集体出游计划也泡汤了，看到论坛上几句话分享一下：</p><p>看到一个感情贴：</p><blockquote><p>不论男女，都可以表达自己不开心的情绪，但请一定明白，每一次的矛盾，都是双方相互试探底线的过程，甩脸子要有意义和价值，要知道自己的诉求到底是什么，传达出对方以后不能xxx的信号，而不是一味的发泄情绪，这样才不会消耗感情，才能长久                                                                                                                                    ——论坛老哥A</p></blockquote><p>人在不开心的时候一定要表达自己的诉求，而不是单纯的对别人发泄情绪。这样做的后果往往是别人被训斥了一顿，一头雾水还不知道自己哪里错了，到头来就算再犯也不知道，这对别人而言是很无辜的，对自己而言也会被这种错误再次伤害到。</p><p>形象的表示：  </p><p>发泄情绪-&gt;我反正生气了我不管你一定要哄着我（就算我不说你也要明白你哪里错了，你自己品）     （x）</p><p>发泄情绪-&gt;提出诉求-&gt;说清楚自己的底线是什么-&gt;达成共识                 （√）</p><p>这里其实对于 生气 其实还蛮那啥的，成年人一定要控制好自己的情绪，是真的，绝对没错，<strong>所以请千万不要随便发脾气！</strong>但是为什么讲有时候要发脾气呢，如上面所言，是一个试探的过程，需要用合适的方式传达自己的情绪。</p><p>其实谈到为什么要发脾气，人在发脾气的时候激素（肾上腺素、甲状腺素）水平会升高，会屏蔽掉外界的一切观点，当复盘后会发现往往有以下几个原因：</p><ul><li>stereotype（固有印象）或者说 Inherent thinking（固有思维），有这样的场景：我，想法<strong>一直</strong>是这样的，你，这种想法与之不符，所以，你错了，我要生气。遵循这种闭环的思维方式，就会有以上场景发生。无法包容无法接受新观点，把某件事想成是理所当然的，这种因素需要自己去改变。</li><li>见识少，比如我们在生活中常说：你为什么会这样想？为什么要这样做？这是两种思维方式抵触的过程。这种因素往往会随着阅历增加而减弱。</li></ul><p>至于怎么做，我以前经常看到这样的论调：每当你要生气的时候，就先心里默念不要生气，这样持续一段时间后就没那么生气了。从生理的角度来分析有一定道理，让激素水平下降了来控制情绪。缺点是什么？只是从生理上强制解决了，并没有从心理上来认同这件事，可能你以后想起来依然会心有芥蒂。</p><p>我认为有一种较为合理的方式：换位思考和共情。当对方有什么事让你觉得很生气了。从上帝视角来看，别人并不知道这样会让你生气，也不知道这样做到底有什么错（当然，排除掉故意让你生气的这种情况，所占比例极小，如果是这样的话，那更简单，那又何必顺遂他意让自己生气呢？），此时我们可能会这样想：为什么他要这样做，明明这样做是错的，他为什么会这样想，他难道不知道这样做会xxx吗？但这时你要反问自己，对呀，为什么别人就一定知道呢？为什么你会觉得别人就一定会这样想呢？要是我是对方的话，我样说会不会真表达其他意思呢？可能思维链不是很连贯，但或多或少能解决自己的一点迷惑，等到过一段日子再去回顾的时候，你会发现，还真是思维的差异罢了，这种思维的差异并没有说谁对说错，仅仅就是差异。所以别人这样想也是很正常的，自己的生气或者情绪死不是就能避免掉了呢？这种非强制性的思考会让我们心理上更好的接受这件事</p><hr><p>另一个话题：</p><blockquote><p>天，感同身受<br>电动牙刷那段真的几乎一样。<br>后来真的想明白了，爱家人不是让他们按照我们觉得的方式生活，其实包括对所有人都是，自己觉得好的东西，不一定非得让别人都接受都用上。<br>我爸糖尿病 心脏不好，之前总因为戒烟戒酒的事说他，后来看他真的努力戒了，但是真的戒不掉，看到他偷偷抽烟，心理真的难受。<br>后来觉得，这么大年纪了，想抽点抽点，想喝点喝点吧，活得开心就好，反正医院定期复查就好。回家的时候也喜欢配他喝上两杯。现在就是后悔，非常后悔，自己没有及早醒悟。<br><strong>人呐，有时候就是很可笑，明明自己天天熬夜，却让别人早睡，明明自己天天喝可乐，却让别人多喝热水。</strong><br><strong>用自己心中理想的爱人方式爱着别人，到头来不爱自己也不是真正的爱别人。</strong>害</p><p>​                                                                                                                            ——论坛网友B</p></blockquote><p>​                                                            </p><p>算了不写了，太多想法了。</p><p>总结一下，抛开极端想法不谈，人与人之间的思维差异是固有存在的，我们要做的不是去强迫别人顺从自己的想法，而是去包容，对家人、对爱人、对朋友都是如此。</p><p>记得初中数学老师的一句话：你以为你以为就是你以为的，其他什么都不是。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;歪歪唧唧歪歪唧唧&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2021/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-27T13:29:55.000Z</published>
    <updated>2021-03-28T03:03:52.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正则表达式学习</p></blockquote><a id="more"></a><p>本想自己总结的，怎奈网上的总结实在太好了，难以超越，下面为转载：</p><p>先推荐两个正则的好用工具</p><ul><li><a href="https://regex101.com/">https://regex101.com/</a>    用来预览匹配效果</li><li><a href="https://jex.im/regulex/#!flags=&amp;re=">https://jex.im/regulex/#!flags=&amp;re=</a>    类似于思维图，帮我们理清匹配的过程</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="1-正则表达式介绍"><a href="#1-正则表达式介绍" class="headerlink" title="1. 正则表达式介绍"></a><strong>1. 正则表达式介绍</strong></h3><p><strong>正则表达式概念：</strong></p><blockquote><p> 正则表达式就是记录文本规则的代码</p></blockquote><p><strong>正则表达式的样子：</strong></p><blockquote><p> 0\d{2}-\d{8} 这个就是一个正则表达式，表达的意思是匹配的是座机号码</p></blockquote><p><strong>正则表达式的特点：</strong></p><ul><li>正则表达式的语法很令人头疼，可读性差</li><li>正则表达式通用行很强，能够适用于很多编程语言</li></ul><h3 id="2-re模块介绍"><a href="#2-re模块介绍" class="headerlink" title="2.  re模块介绍"></a><strong>2.  re模块介绍</strong></h3><p><strong>&lt;1&gt; re模块的使用过程</strong></p><p>在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入re模块</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用match方法进行匹配操作</span></span><br><span class="line">    result = re.match(正则表达式,要匹配的字符串)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span></span><br><span class="line">    result.group()</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; re模块示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">    result = re.match(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result.group()</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="3-匹配单个字符"><a href="#3-匹配单个字符" class="headerlink" title="3.  匹配单个字符"></a><strong>3.  匹配单个字符</strong></h3><p><strong>正则表达式的单字符匹配</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-0260360bb832e30995ccec67f64a21a8_b.jpg" alt="img"></p><p><strong>示例1：<code>.</code></strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;t.o&quot;</span>,<span class="string">&quot;too&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;t.o&quot;</span>,<span class="string">&quot;two&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">too</span><br><span class="line">two</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>[]</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符小写，那么正则表达式需要小写的h</span></span><br><span class="line">ret = re.match(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;hello Python&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符大写，那么正则表达式需要大写的H</span></span><br><span class="line">ret = re.match(<span class="string">&quot;H&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写h都可以的情况</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]&quot;</span>,<span class="string">&quot;hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]ello Python&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第一种写法</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0123456789]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第二种写法</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个正则不能够匹配到数字4，因此ret为None</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;4Hello Python&quot;</span>)</span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">H</span><br><span class="line">h</span><br><span class="line">H</span><br><span class="line">Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>\d</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的匹配方式</span></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥1号&quot;</span>,<span class="string">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥2号&quot;</span>,<span class="string">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥3号&quot;</span>,<span class="string">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用\d进行匹配</span></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号</span><br><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>\D</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\D&quot;</span>, <span class="string">&quot;f&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f</span><br></pre></td></tr></table></figure><p><strong>示例5：<code>\s</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空格属于空白字符</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\sworld&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    result = match_obj.group()</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># \t 属于空白字符</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\sworld&quot;</span>, <span class="string">&quot;hello\tworld&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    result = match_obj.group()</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>示例6：<code>\S</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\Sworld&quot;</span>, <span class="string">&quot;hello&amp;world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">result = match_obj.group()</span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\Sworld&quot;</span>, <span class="string">&quot;hello$world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">result = match_obj.group()</span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello&amp;world  </span><br><span class="line">hello$world</span><br></pre></td></tr></table></figure><p><strong>示例7：<code>\w</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配非特殊字符中的一位</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\w&quot;</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure><p><strong>示例8：<code>\W</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配特殊字符中的一位</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\W&quot;</span>, <span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br></pre></td></tr></table></figure><h3 id="4-匹配多个字符（量词）"><a href="#4-匹配多个字符（量词）" class="headerlink" title="4.  匹配多个字符（量词）"></a><strong>4.  匹配多个字符</strong>（量词）</h3><p><strong>匹配多个字符的相关格式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-4c64fdb20c4429fc06dd4d673203b341_b.jpg" alt="img"></p><p><strong>示例1：<code>\*</code></strong></p><p>需求：匹配出一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可 有可无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;Aabcdef&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">Mnn</span><br><span class="line">Aabcdef</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>+</code></strong></p><p>需求：匹配一个字符串，第一个字符是t,最后一个字符串是o,中间至少有一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;t.+o&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>?</code></strong></p><p>需求：匹配出这样的数据，但是https 这个s可能有，也可能是http 这个s没有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;https?&quot;</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>&#123;m&#125;、&#123;m,n&#125;</code></strong></p><p>需求：匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;6&#125;&quot;</span>,<span class="string">&quot;12a3g45678&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;8,20&#125;&quot;</span>,<span class="string">&quot;1ad12f23s34455ff66&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12a3g4</span><br><span class="line">1ad12f23s34455ff66</span><br></pre></td></tr></table></figure><h3 id="5-匹配开头和结尾"><a href="#5-匹配开头和结尾" class="headerlink" title="5.  匹配开头和结尾"></a><strong>5.  匹配开头和结尾</strong></h3><p><strong>匹配开头和结尾的正则表达式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-695a262b87d336824c950ac007caf25e_b.png" alt="img"></p><p><strong>示例1：<code>^</code></strong></p><p>需求：匹配以数字开头的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以数字开头的数据</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;^\d.*&quot;</span>, <span class="string">&quot;3hello&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3hello</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>$</code></strong></p><p>需求: 匹配以数字结尾的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 匹配以数字结尾的数据</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;.*\d$&quot;</span>, <span class="string">&quot;hello5&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello5</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>^ 和 $</code></strong></p><p>需求: 匹配以数字开头中间内容不管以数字结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;^\d.*\d$&quot;</span>, <span class="string">&quot;4hello4&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4hello4</span><br></pre></td></tr></table></figure><p><strong>示例4: 除了指定字符以外都匹配</strong></p><blockquote><p><strong>[^指定字符]: 表示除了指定字符都匹配</strong></p></blockquote><p>需求: 第一个字符除了aeiou的字符都匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;[^aeiou]&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h</span><br></pre></td></tr></table></figure><h3 id="6-匹配分组"><a href="#6-匹配分组" class="headerlink" title="6.  匹配分组"></a><strong>6.  匹配分组</strong></h3><p><strong>匹配分组相关正则表达式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-795d0957376752babb4eda4d77925151_b.jpg" alt="img"></p><p><strong>示例1：<code>|</code></strong></p><p>需求：在列表中[“apple”, “banana”, “orange”, “pear”]，匹配apple和pear</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 水果列表</span></span><br><span class="line">fruit_list = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数据</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> fruit_list:</span><br><span class="line">    <span class="comment"># |    匹配左右任意一个表达式</span></span><br><span class="line">    match_obj = re.match(<span class="string">&quot;apple|pear&quot;</span>, value)</span><br><span class="line">    <span class="keyword">if</span> match_obj:</span><br><span class="line">        print(<span class="string">&quot;%s是我想要的&quot;</span> % match_obj.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;%s不是我要的&quot;</span> % value)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apple是我想要的</span><br><span class="line">banana不是我要的</span><br><span class="line">orange不是我要的</span><br><span class="line">pear是我想要的</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>( )</code></strong></p><p>需求：匹配出163、126、qq等邮箱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;4,20&#125;@(163|126|qq|sina|yahoo)\.com&quot;</span>, <span class="string">&quot;hello@163.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    <span class="comment"># 获取分组数据</span></span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello@163.com</span><br><span class="line">163</span><br></pre></td></tr></table></figure><p>需求: 匹配qq:10567这样的数据，提取出来qq文字和qq号码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;(qq):([1-9]\d&#123;4,10&#125;)&quot;</span>, <span class="string">&quot;qq:10567&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    <span class="comment"># 分组:默认是1一个分组，多个分组从左到右依次加1</span></span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 提取第二个分组数据</span></span><br><span class="line">    print(match_obj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qq</span><br><span class="line">10567</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>\num</code></strong></p><p>需求：匹配出<code>hh</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;[a-zA-Z1-6]+&gt;.*&lt;/[a-zA-Z1-6]+&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;hh&lt;/div&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\1&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;hh&lt;/div&gt;</span><br><span class="line">&lt;html&gt;hh&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>需求：匹配出<code>www.baidu.cn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;([a-zA-Z1-6]+)&gt;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\2&gt;&lt;/\\1&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>(?P)</code></strong> <strong><code>(?P=name)</code></strong></p><p>需求：匹配出<code>www.baidu.cn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;(?P&lt;name1&gt;[a-zA-Z1-6]+)&gt;&lt;(?P&lt;name2&gt;[a-zA-Z1-6]+)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="7-re模块的高级用法"><a href="#7-re模块的高级用法" class="headerlink" title="7.  re模块的高级用法"></a><strong>7.  re模块的高级用法</strong></h3><p><strong>&lt;1&gt; search</strong></p><p>需求：匹配出水果的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据正则表达式查找数据，提示：只查找一次</span></span><br><span class="line"><span class="comment"># 1.pattern: 正则表达式</span></span><br><span class="line"><span class="comment"># 2.string: 要匹配的字符串</span></span><br><span class="line">match_obj = re.search(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;水果有20个 其中苹果10个&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果数据</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; 查找多个字符findall</strong></p><p>需求：匹配出多种水果的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = re.findall(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;苹果10个 鸭梨5个 总共15个水果&quot;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;10&#x27;, &#x27;5&#x27;, &#x27;15&#x27;]</span><br></pre></td></tr></table></figure><p><strong>&lt;3&gt; sub 将匹配到的数据进行替换</strong></p><p>需求：将匹配到的评论数改成22</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern: 正则表达式</span></span><br><span class="line"><span class="comment"># repl: 替换后的字符串</span></span><br><span class="line"><span class="comment"># string: 要匹配的字符串</span></span><br><span class="line"><span class="comment"># count=0 替换次数，默认全部替换 , count=1根据指定次数替换</span></span><br><span class="line">result = re.sub(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;评论数:10 赞数:20&quot;</span>, count=<span class="number">1</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">评论数:22 赞数:20</span><br></pre></td></tr></table></figure><p>需求：将匹配到的阅读数加1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># match_obj:该参数系统自动传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">match_obj</span>):</span></span><br><span class="line">    <span class="comment"># 获取匹配结果的数据</span></span><br><span class="line">    value = match_obj.group()</span><br><span class="line">    result = <span class="built_in">int</span>(value) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回值必须是字符串类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(result)</span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">&quot;\d+&quot;</span>, add, <span class="string">&quot;阅读数:10&quot;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阅读数:11</span><br></pre></td></tr></table></figure><p><strong>&lt;4&gt; split 根据匹配进行切割字符串，并返回一个列表</strong></p><p>需求：切割字符串”貂蝉,杨玉环:西施,王昭君”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 正则</span></span><br><span class="line"><span class="comment"># 2. 要匹配的字符串</span></span><br><span class="line"><span class="comment"># maxsplit=1 分割次数， 默认全部分割</span></span><br><span class="line">result = re.split(<span class="string">&quot;,|:&quot;</span>, my_str, maxsplit=<span class="number">1</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;貂蝉&#x27;, &#x27;杨玉环:西施,王昭君&#x27;]</span><br></pre></td></tr></table></figure><h3 id="8-贪婪和非贪婪"><a href="#8-贪婪和非贪婪" class="headerlink" title="8.  贪婪和非贪婪"></a><strong>8.  贪婪和非贪婪</strong></h3><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p><strong>在”*“,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</strong>（当？在匹配单个字符的后面时，就是匹配0次或1次）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;This is a number 234-235-22-423&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">&quot;.+(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;4-235-22-423&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">&quot;.+?(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;234-235-22-423&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>正则表达式模式中使用到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满足匹配最长字符串，在我们上面的例子里面，“.+”会从字符串的启始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配，所以它匹配了数字“4”，而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p><p><strong>解决方式：非贪婪操作符“？”，这个操作符可以用在”*“,”+”,”?”的后面，这样?前面的正则表达式不能匹配?后面正则表达式的数据</strong></p><h3 id="9-r的作用"><a href="#9-r的作用" class="headerlink" title="9. r的作用"></a><strong>9. r的作用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm = <span class="string">&quot;c:\\a\\b\\c&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm</span><br><span class="line"><span class="string">&#x27;c:\\a\\b\\c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mm)</span><br><span class="line">c:\a\b\c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">&quot;c:\\\\&quot;</span>,mm).group()</span><br><span class="line"><span class="string">&#x27;c:\\&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">&quot;c:\\\\&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">&quot;c:\\\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\a&quot;</span>,mm).group()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>说明</p><p><strong>Python中字符串前面加上 r 表示原生字符串，数据里面的反斜杠不需要进行转义，针对的只是反斜杠</strong></p><p>Python里的原生字符串很好地解决了这个问题，有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><p><strong>建议: 如果使用使用正则表达式匹配数据可以都加上r，要注意r针对的只是反斜杠起作用，不需要对其进行转义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br></pre></td></tr></table></figure><p>转载自：</p><p>作者：程序员小贤<br>链接：<a href="https://zhuanlan.zhihu.com/p/124167195">https://zhuanlan.zhihu.com/p/124167195</a><br>来源：知乎</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;正则表达式学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>b站视频下载器</title>
    <link href="http://example.com/2021/03/27/b%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <id>http://example.com/2021/03/27/b%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%99%A8/</id>
    <published>2021-03-27T12:18:29.000Z</published>
    <updated>2021-03-27T13:31:29.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>接上一篇，用Tkinter库做了一个下载器的界面</p></blockquote><a id="more"></a><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">version2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">功能：</span></span><br><span class="line"><span class="string">下载单个视频</span></span><br><span class="line"><span class="string">下载弹幕</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原理：</span></span><br><span class="line"><span class="string">界面是用python自带的Tkinter做的</span></span><br><span class="line"><span class="string">音频视频合成使用了第三方工具ffmpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author：</span></span><br><span class="line"><span class="string">pb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> scrolledtext</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标题中的不合法字符去掉，以便能够作为文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_title</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  下载视频,  url:b站视频链接    path:视频保存路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validate_title(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置音频和纯视频的保存位置</span></span><br><span class="line">    audio_filename = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line">    video_filename = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;_纯视频.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(audio_filename)</span></span><br><span class="line">    <span class="comment"># print(video_filename)</span></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(audio_filename, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line">    <span class="comment"># print(&#x27;音频下载完毕！&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(video_filename, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line">    <span class="comment"># print(&#x27;视频下载完毕！&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置合成后视频的保存位置</span></span><br><span class="line">    merge_video_filename = video_filename.strip(<span class="string">&#x27;_纯视频.mp4&#x27;</span>) + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    print(os.getcwd())  <span class="comment"># 获取当前工作目录路径</span></span><br><span class="line">    print(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))  <span class="comment"># 获取当前工作目录路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若该视频已存在则删除</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(merge_video_filename):</span><br><span class="line">        os.remove(merge_video_filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(os.path.isfile(merge_video_filename))</span></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    print(<span class="string">&#x27;视频正在下载中...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># os.system(f&#x27;ffmpeg -i &#123;audio_filename&#125; -i &#123;video_filename&#125; -c copy &#123;merge_video_filename&#125; -loglevel quiet&#x27;)</span></span><br><span class="line">    print(<span class="string">&#x27;视频下载完毕！&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打包后将ffmpeg所在文件夹放在文件同一目录下</span></span><br><span class="line">    cmd = <span class="string">f&#x27;<span class="subst">&#123;os.getcwd()&#125;</span>/FFmpeg/bin/ffmpeg -i <span class="subst">&#123;audio_filename&#125;</span> -i <span class="subst">&#123;video_filename&#125;</span> -c copy <span class="subst">&#123;merge_video_filename&#125;</span> -y&#x27;</span></span><br><span class="line">    subprocess.call(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合成后视频的大小</span></span><br><span class="line">    res_size = <span class="built_in">int</span>(os.stat(merge_video_filename).st_size / <span class="number">1024</span>)</span><br><span class="line">    res_size1 = <span class="built_in">int</span>(res_size / <span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;new_title&#125;</span>视频文件的大小为：<span class="subst">&#123;res_size&#125;</span>KB,<span class="subst">&#123;res_size1&#125;</span>MB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移除纯视频和纯音频</span></span><br><span class="line">    os.remove(audio_filename)</span><br><span class="line">    os.remove(video_filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_title, res_size1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载弹幕  url:b站视频链接    path:弹幕保存路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_danmu_download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    content = response.text</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 起个别名，防止不符合文件名称要求</span></span><br><span class="line">    new_title = validate_title(video_title)</span><br><span class="line">    danmu_file = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个视频都有一个自己独特的oid</span></span><br><span class="line">    oid = re.findall(<span class="string">&#x27;&quot;cids&quot;:&#123;&quot;1&quot;:\d*&#x27;</span>, content)[<span class="number">0</span>].split(<span class="string">&quot;\&quot;:&quot;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">    url = <span class="string">&#x27;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(oid)</span><br><span class="line">    response_danmu = requests.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 防止中文乱码</span></span><br><span class="line">    response_danmu.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    p = response_danmu.text.split(<span class="string">&quot;&lt;d p=&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(danmu_file, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 清除文件内容，防止</span></span><br><span class="line">        f.truncate(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">            each_danmu = (i.split(<span class="string">&quot;&gt;&quot;</span>))[<span class="number">1</span>].replace(<span class="string">&quot;&lt;/d&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">            f.write(each_danmu + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    window = Tk()</span><br><span class="line">    window.title(<span class="string">&quot;bilibili视频下载器_version1.0_pb&quot;</span>)</span><br><span class="line">    window.geometry(<span class="string">&#x27;450x290&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    l1 = Label(window, text=<span class="string">&#x27;视频url&#x27;</span>)</span><br><span class="line">    l1.grid(row=<span class="string">&#x27;0&#x27;</span>, column=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    l1 = Label(window, text=<span class="string">&#x27;选择文件夹&#x27;</span>)</span><br><span class="line">    l1.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="comment"># 输入视频url</span></span><br><span class="line">    txt1 = Entry(window, width=<span class="number">40</span>)</span><br><span class="line">    txt1.grid(row=<span class="string">&#x27;0&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置焦点位置</span></span><br><span class="line">    txt1.focus()</span><br><span class="line">    <span class="comment"># 选择视频保存位置</span></span><br><span class="line">    txt2 = Entry(window, width=<span class="number">40</span>)</span><br><span class="line">    txt2.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn1_clicked</span>():</span></span><br><span class="line">        directory = filedialog.askdirectory()</span><br><span class="line">        txt2.insert(<span class="number">0</span>, directory)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn2_clicked</span>():</span></span><br><span class="line">        <span class="comment"># txt3.insert(&#x27;insert&#x27;, &#x27;视频正在下载中...\n&#x27;)</span></span><br><span class="line">        url = txt1.get()</span><br><span class="line">        path = txt2.get()</span><br><span class="line">        new_title, size = bilibili_video_download(url, path)</span><br><span class="line">        txt3.insert(<span class="string">&#x27;insert&#x27;</span>, new_title + <span class="string">&#x27;\n视频下载完毕！大小为：&#123;&#125;Mb\n\n&#x27;</span>.<span class="built_in">format</span>(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn3_clicked</span>():</span></span><br><span class="line">        url = txt1.get()</span><br><span class="line">        path = txt2.get()</span><br><span class="line">        new_title = bilibili_danmu_download(url, path)</span><br><span class="line">        txt3.insert(<span class="string">&#x27;insert&#x27;</span>, new_title + <span class="string">&#x27;\n弹幕下载完毕！\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 浏览保存位置按钮</span></span><br><span class="line">    btn1 = Button(window, text=<span class="string">&quot;浏览&quot;</span>, command=btn1_clicked)</span><br><span class="line">    btn1.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频按钮</span></span><br><span class="line">    btn2 = Button(window, text=<span class="string">&#x27;下载视频&#x27;</span>, command=btn2_clicked)</span><br><span class="line">    btn2.grid(row=<span class="string">&#x27;2&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>, sticky=<span class="string">&#x27;w&#x27;</span>, padx=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载弹幕按钮</span></span><br><span class="line">    btn3 = Button(window, text=<span class="string">&#x27;下载弹幕&#x27;</span>, command=btn3_clicked)</span><br><span class="line">    btn3.grid(row=<span class="string">&#x27;2&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>, sticky=<span class="string">&#x27;e&#x27;</span>, padx=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出显示</span></span><br><span class="line">    txt3 = scrolledtext.ScrolledText(window, width=<span class="number">40</span>, height=<span class="number">10</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">    txt3.grid(row=<span class="string">&#x27;3&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    window.mainloop()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/b/image-20210327202118165.png"></p><p><img src="/images/b/image-20210327202226881.png"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;接上一篇，用Tkinter库做了一个下载器的界面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取bilibili视频</title>
    <link href="http://example.com/2021/03/23/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2021/03/23/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/</id>
    <published>2021-03-23T14:09:29.000Z</published>
    <updated>2021-03-27T12:27:28.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>任意给bilibili视频链接下载视频到本地</p></blockquote><a id="more"></a><p>直接贴代码，如下：</p><p>b站的视频和音频是分开的，所以请求的时候分开请求，最后再合并即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateTitle</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validateTitle(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ffmpeg -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp3&quot; -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp4&quot; -c copy &quot;<span class="subst">&#123;new_title&#125;</span>merge.mp4&quot; -loglevel quiet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.bilibili.com/video/BV1xx411c7yK&#x27;</span></span><br><span class="line">    bilibili_video_download(url)</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li><p>若运行不成功，看是否下载了ffmpeg，参考<a href="https://blog.csdn.net/pythonlaodi/article/details/109222790?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=1328689.95.16165087717508347&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">https://blog.csdn.net/pythonlaodi/article/details/109222790?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=1328689.95.16165087717508347&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control</a></p></li><li><p>不要尝试去下载番剧和电影（要是能成功，版权费你出？）格式为这样的可以下载成功<a href="https://www.bilibili.com/video/xxxxxxx">https://www.bilibili.com/video/xxxxxxx</a></p></li><li><p>下载后会生成三个文件（纯视频、纯音频、视频和音频合并后的视频）</p></li></ul><hr><p>3.24更新</p><p>批量爬取bilibili某一模块的视频，例如街舞模块</p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180307472.png" alt="image-20210324180307472"></p><p>这次我们采用请求js返回json数据的方式提取信息，找到下面圈起来的这个js数据，那么为什么是这个呢？</p><p>我们采取翻页的方式，发现每次翻页都多出来这个请求</p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180504048.png"></p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateTitle</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validateTitle(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提示信息</span></span><br><span class="line">    print(<span class="string">&quot;正在下载视频:   &quot;</span> + new_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ffmpeg -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp3&quot; -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp4&quot; -c copy &quot;<span class="subst">&#123;new_title&#125;</span>merge.mp4&quot; -loglevel quiet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excel_write</span>(<span class="params">row_title, videos_list</span>):</span></span><br><span class="line">    f = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建 workbook 即新建 excel 文件</span></span><br><span class="line">    sheet = f.add_sheet(<span class="string">&#x27;video_download&#x27;</span>)  <span class="comment"># 新建工作簿</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入数据每列的标题</span></span><br><span class="line">    <span class="comment"># row_title = [&#x27;帖子标题&#x27;, &#x27;发表时间&#x27;, &#x27;作者&#x27;, &#x27;最新回复时间&#x27;, &#x27;评论数&#x27;, &#x27;作者昵称&#x27;, &#x27;帖子链接&#x27;]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">        sheet.write(<span class="number">0</span>, i, row_title[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行程序的时候记得将最开始的excel表格关闭，否则会报错</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(videos_list)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">            sheet.write(i + <span class="number">1</span>, j, videos_list[i][j])</span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    f.save(<span class="string">&#x27;test_bilibili_video_download_data.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># start = time.time()</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&quot;CURRENT_FNVAL=80; blackside_state=1; rpdid=|(YuRk~RRlu0J&#x27;uYuJRYkkm~; CURRENT_QUALITY=112; buvid3=2EB5FD0E-A6B5-3C06-0973-23DA8AD6801924531infoc; buvid_fp=2EB5FD0E-A6B5-3C06-0973-23DA8AD6801924531infoc; fingerprint=93e30520ea623bc88c9f8aa1a56d7e6f; buvid_fp_plain=CF6BCDB8-1436-4480-A4F6-AA520429ECB953950infoc; SESSDATA=d6c9264e%2C1631957061%2C4ee9b%2A31; bili_jct=48ad82f0fa24bb9100b84f103784fd7d; DedeUserID=438011280; DedeUserID__ckMd5=301c698cae5ab89a; sid=d1cfs18g; bfe_id=cade757b9d3229a3973a5d4e9161f3bc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    videos_list = []</span><br><span class="line">    page = <span class="number">1</span>   <span class="comment"># 爬取页面数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, page + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">&#x27;正在爬取第&#123;&#125;页...&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        url = <span class="string">&#x27;https://api.bilibili.com/x/web-interface/newlist?rid=126&amp;type=0&amp;pn=&#123;&#125;&amp;ps=20&amp;jsonp=jsonp&amp;callback=jsonCallback_bili_30441364968260533&#x27;</span>.<span class="built_in">format</span>(page)</span><br><span class="line">        url = <span class="string">&#x27;https://api.bilibili.com/x/web-interface/newlist?rid=198&amp;type=0&amp;pn=1&amp;ps=20&amp;jsonp=jsonp&amp;callback=jsonCallback_bili_45428964604399673&#x27;</span></span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        j = response.text.split(<span class="string">&#x27;(&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将字符串转换为字典格式</span></span><br><span class="line">        dic = <span class="built_in">eval</span>(j)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            video_title = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">            <span class="comment"># 获得当前时间戳</span></span><br><span class="line">            timeStamp = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;pubdate&#x27;</span>]</span><br><span class="line">            timeArray = time.localtime(timeStamp)</span><br><span class="line">            <span class="comment"># 转换为指定的格式</span></span><br><span class="line">            video_publish_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class="line">            video_author = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;owner&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            video_url = <span class="string">&#x27;https://www.bilibili.com/video/&#x27;</span> + dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;bvid&#x27;</span>]</span><br><span class="line">            <span class="comment"># https://b23.tv/BV1Ay4y1b7D3</span></span><br><span class="line">            <span class="comment"># https://www.bilibili.com/video/BV1Ay4y1b7D3</span></span><br><span class="line">            video_face_picture_url = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line">            video_watch_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;view&#x27;</span>]</span><br><span class="line">            video_danmu_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;danmaku&#x27;</span>]</span><br><span class="line">            video_coin_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line">            video_like_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;like&#x27;</span>]</span><br><span class="line">            video_collection_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;favorite&#x27;</span>]</span><br><span class="line">            video_reply_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;reply&#x27;</span>]</span><br><span class="line">            video_duration = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 下载视频</span></span><br><span class="line">            bilibili_video_download(video_url)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将爬取的数据写进excel</span></span><br><span class="line">            row_title = [<span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;发布时间&#x27;</span>, <span class="string">&#x27;up主&#x27;</span>, <span class="string">&#x27;视频链接&#x27;</span>, <span class="string">&#x27;视频时长&#x27;</span>, <span class="string">&#x27;观看数&#x27;</span>, <span class="string">&#x27;点赞数&#x27;</span>, <span class="string">&#x27;收藏数&#x27;</span>, <span class="string">&#x27;弹幕数&#x27;</span>, <span class="string">&#x27;评论数&#x27;</span>, <span class="string">&#x27;投币数&#x27;</span>]</span><br><span class="line">            video_list = [video_title, video_publish_time, video_author, video_url, video_duration, video_watch_num,</span><br><span class="line">                          video_like_num, video_collection_num, video_danmu_num, video_reply_num, video_coin_num]</span><br><span class="line">            videos_list.append(video_list)</span><br><span class="line">            excel_write(row_title, videos_list)</span><br></pre></td></tr></table></figure><p>可自行设定爬取的板块（通过抓取对应板块的js数据），设定需要爬取的页数，这里只爬取了一页，效果如下：</p><p><strong>控制台打印数据</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180827048.png"></p><p><strong>在原项目下多出三个文件，分别是纯视频、纯音频、合成后的视频</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180846233.png"></p><p><strong>写入的excel文件中的数据</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324181031676.png"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;任意给bilibili视频链接下载视频到本地&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
</feed>
