<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pb</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-28T02:53:38.725Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>7.28java多线程学习</title>
    <link href="http://example.com/2021/07/28/7-28java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/28/7-28java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-28T02:42:49.000Z</published>
    <updated>2021-07-28T02:53:38.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>连续学习7天应该能召唤7龙珠吧</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;连续学习7天应该能召唤7龙珠吧&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>7.27java基础学习</title>
    <link href="http://example.com/2021/07/27/7-27java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/27/7-27java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-27T01:47:41.000Z</published>
    <updated>2021-07-28T02:41:35.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>资本是靠自己挣来的，不是靠别人得到的</p></blockquote><a id="more"></a><p>感觉有点慢，还是需要<strong>加快速度</strong> + 针对性复习，  你想想 java基础、集合、多线程、jvm、数据库、框架、算法题</p><p>集合这里耗了两天，还是有些源码没理解，多线程刚开始看，各种锁和同步机制，jvm里面也全是概念的需要背诵</p><p>项目还没开始做。。。</p><p>每天10h学习能保证吗？有效率的10h，我知道非科班学起来慢，但是人总得有个能成功的念想吧，没有什么事是能随随便便成功的，别嘻嘻哈哈了，每个阶段该干嘛干嘛</p><h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><ul><li>进程是程序的一次执行过程，是操作系统<strong>资源分配的基本单位</strong>，而线程是<strong>任务调度和执行的基本单位</strong></li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段和堆栈，进程的切换花销比较大</li><li>一个进程中可以有多个线程，（通过CPU调度，在每个时间片中只有一个线程执行），线程之间共享进程的<strong>堆和方法区资源</strong>，但是每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>。线程之间的切换花销比较小</li><li>线程是进程划分成的更小的运行单位，也被称为<strong>轻量级进程</strong>，线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li></ul><h2 id="并发与并行的关系"><a href="#并发与并行的关系" class="headerlink" title="并发与并行的关系"></a>并发与并行的关系</h2><p>并发： 在一个时间段，多个任务都在执行</p><p>并行：在一个时刻上，多个任务同时执行</p><p>因为cpu在多个进程之间得到切换速度很快，所以看起来是同时运行的</p><h2 id="为什么要使用多线程？"><a href="#为什么要使用多线程？" class="headerlink" title="为什么要使用多线程？"></a>为什么要使用多线程？</h2><p>从计算机底层来说：线程可以比作是轻量级的进程，是程序执行的最小单位，线程间的切换和调度的成本远远小于进程。</p><p>从互联网的发展趋势来看：现在的系统要求的并发量越来越大，使用多线程机制可以大大提高系统整体的并发能力以及性能。</p><p>同时多线程可以<strong>提高CPU利用率</strong>。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，CPU只会一个CPU核心被利用到，而创建多个线程就可以让多个CPU核心被利用到，这样就提高了CPU的利用率。</p><h2 id="使用多线程带来的问题"><a href="#使用多线程带来的问题" class="headerlink" title="使用多线程带来的问题"></a>使用多线程带来的问题</h2><p>我们使用多线程是想要提高程序的<strong>执行效率</strong>提高程序<strong>运行速度</strong>，也可能<strong>内存泄漏</strong>、<strong>上下文切换</strong>、<strong>死锁</strong></p><p>（后面会一一介绍到）</p><h2 id="线程的生命周期和所处状态"><a href="#线程的生命周期和所处状态" class="headerlink" title="线程的生命周期和所处状态"></a>线程的生命周期和所处状态</h2><p>线程的生命周期包含5个阶段，包括：<strong>新建</strong>、<strong>就绪</strong>、<strong>运行</strong>、<strong>阻塞</strong>、<strong>销毁</strong>。</p><ul><li><strong>新建</strong>：就是刚使用new方法，新建出来一个线程；</li><li><strong>就绪</strong>：就是调用的线程的**start()**方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;</li><li><strong>运行</strong>：当就绪的线程被调度并获得CPU资源时，便进入运行状态。（run方法定义了线程的操作和功能;</li><li><strong>阻塞</strong>：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify()或者notifyAll()方法。唤醒的线程不会立刻运行，它们要再次等待CPU分配资源进入运行状态;</li><li><strong>销毁</strong>：如果线程<strong>正常执行完毕后</strong>或线程被<strong>提前强制性的终止或出现异常</strong>导致结束，那么线程就要被销毁，释放资源;</li></ul><p><strong>如下图所示</strong>：</p><p><img src="/images/7-27java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210727205111030.png" alt="线程的生命周期"></p><h2 id="什么是上下文切换？"><a href="#什么是上下文切换？" class="headerlink" title="什么是上下文切换？"></a>什么是上下文切换？</h2><p>我们知道一个CPU核心在任意时刻只能被一个线程使用，为了实现多线程，CPU采取的策略是给每个线程分配时间片并进行轮转的。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p>概括来说就是：当前任务在执行完CPU时间片，并切换到另一个任务之前，会先保存自己的状态，以便下次再切换回这个任务，<strong>任务从保存到再加载的过程就是一次上下文切换。</strong></p><p>上下文切换通常是计算密集型，也就是说它就会带来系统开销，耗费大量的CPU时间，带来性能问题</p><h2 id="死锁的相关知识"><a href="#死锁的相关知识" class="headerlink" title="死锁的相关知识"></a>死锁的相关知识</h2><h3 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h3><p>是指多个线程在运行过程中因争夺资源而造成的一种僵局，它们中的一个或者多个都在等待某个资源被释放。</p><p>我们举一个例子：比如说，线程A持有资源2，线程B持有资源1，他们同时都想申请对方的资源，都在等待对方释放自己所需要的资源，那么这时候两个线程就会互相等待而进入死锁状态。</p><img src="/images/7-27java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210727212453831.png" alt="死锁的例子" style="zoom:67%;" /><h3 id="死锁产生的原因？"><a href="#死锁产生的原因？" class="headerlink" title="死锁产生的原因？"></a>死锁产生的原因？</h3><p>我们知道系统中的资源可以分为两类，一类是可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺。另一类资源是不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放。</p><p>第一个原因，因为多个进程之间<strong>竞争不可剥夺资源</strong>，比如说有一个进程抢占了打印机，其他进程只能等这个进程使用完成后才能使用。（举个例子假定进程PI已占用了打印机R1，进程P2已占用了磁带机R2，若P2继续要求打印机R1，P2将阻塞；P1若又要求磁带机，P1也将阻塞。于是，在P1和P2之间就形成了僵局）</p><p>第二个原因，竞争临时资源（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁</p><p>第三个原因，进程间推进顺序非法</p><p>若P1保持了资源R1,P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。</p><h3 id="死锁的必要条件？（4个，缺一不可）"><a href="#死锁的必要条件？（4个，缺一不可）" class="headerlink" title="死锁的必要条件？（4个，缺一不可）"></a>死锁的必要条件？（4个，缺一不可）</h3><p>1.<strong>互斥条件</strong>：进程要求对所分配的资源进行排它性控制，即一个资源每次只能被一个进程使用。</p><p>2.<strong>请求和保持条件</strong>：当进程因请求资源而阻塞时，对已获得的资源保持不放。</p><p>3.<strong>不剥夺条件</strong>：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</p><p>4.<strong>环路等待条件</strong>：在发生死锁时，必然存在一个进程–资源的环形链。（即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。）</p><h3 id="如何解决死锁问题？"><a href="#如何解决死锁问题？" class="headerlink" title="如何解决死锁问题？"></a>如何解决死锁问题？</h3><p>包括预防死锁、避免死锁、检测死锁、解除死锁四种方式</p><p><strong>预防死锁</strong></p><p>我们只要破坏产生死锁的四个条件中的其中一个就可以了。现在我们来挨个分析一下：</p><p>1.<strong>破坏互斥条件</strong>（无法实现）：这个条件我们没有办法破坏，因为我们用锁本来就是想让他们互斥的，如果互斥性被破坏的话，以打印机为例，多个进程共享使用打印机，则打印出来的结果就不正确了（临界资源需要互斥访问</p><p>2.<strong>破坏请求与保持条件</strong>：一次性申请所有的资源，该进程就可以顺利执行完毕（优点简单易于实现，缺点严重地降低了资源的利用率，有的资源在进程的后期才会使用，而其他进程要用这个资源的话就必须等待）</p><p>3.<strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</p><p>4.<strong>破坏循环等待条件</strong>：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。<br>破坏循环等待条件。（不足：1.需要知道资源的请求顺序、2.要请求某个序号比较大的资源时，需要先请求序号比较小的资源，占用了序号比较小的资源，使其利用率变低）</p><p><strong>避免死锁</strong></p><p>避免死锁可以采用判断<strong>系统是否会处于安全状态</strong>的方法</p><p>在进行系统资源分配之前，先计算此次资源分配的安全性。若此次分配不会导致系统进入不安全状态，则将资源分配给<strong>进程； 否则，让进程</strong>等待。这是一种保证系统不进入死锁状态的动态策略</p><blockquote><p>系统的安全状态</p><p>对于每一个进程Pi(1≤i≤n），它以后尚需要的资源量不超过系统当前剩余资源量与所有进程Pj (j &lt; i )当前占有资源量之和。</p></blockquote><p><strong>银行家算法</strong>（一个避免死锁的著名算法）</p><p>我们可以把操作系统看作是银行家，系统资源看做资金，客户看做进程。</p><p>算法要求：</p><p>1、申请的贷款额度不能超过银行现有的资金总额</p><p>2、分批次向银行提款，但是贷款额度不能超过一开始最大需求量的总额</p><p>3、如果银行暂时不能满足客户申请的资金额度时，可推迟放款并在有限时间内给予贷款</p><p>4、客户要在规定的时间内还款</p><p><strong>检测死锁</strong></p><p>这种方法并不需要事先采取任何限制性措施，即允许产生死锁，若检测到死锁则采取相应的方法解除死锁</p><p><strong>解除死锁</strong></p><p>如果利用死锁检测算法检测出系统已经出现了死锁 ，那么，此时就需要对系统采取相应的措施。常用的解除死锁的方法：<br>1、抢占资源：从一个或多个进程中抢占足够数量的资源分配给死锁进程，以解除死锁状态。<br>2、终止（或撤销）进程：终止或撤销系统中的一个或多个死锁进程，直至打破死锁状态。<br>    a、终止所有的死锁进程。这种方式简单粗暴，但是代价很大，很有可能会导致一些已经运行了很久的进程前功尽弃。<br>     b、逐个终止进程，直至死锁状态解除。该方法的代价也很大，因为每终止一个进程就需要使用死锁检测来检测系统当前是否处于死锁状态。另外，每次终止进程的时候终止那个进程呢？每次都应该采用最优策略来选择一个“代价最小”的进程来解除死锁状态。一般根据如下几个方面来决定终止哪个进程：<br>    进程的优先级<br>    进程已运行时间以及运行完成还需要的时间<br>    进程已占用系统资源<br>    进程运行完成还需要的资源<br>    终止进程数目<br>    进程是交互还是批处理</p><h2 id="sleep方法和wait方法的共同点"><a href="#sleep方法和wait方法的共同点" class="headerlink" title="sleep方法和wait方法的共同点"></a>sleep方法和wait方法的共同点</h2><h2 id="synchronized-关键字的了解"><a href="#synchronized-关键字的了解" class="headerlink" title="synchronized 关键字的了解"></a>synchronized 关键字的了解</h2><p>synchronized 关键字解决的是<strong>多个线程之间访问资源的同步性</strong>，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻<strong>只能有一个线程</strong>执行。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;资本是靠自己挣来的，不是靠别人得到的&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>7.26java基础学习</title>
    <link href="http://example.com/2021/07/26/7-26java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/26/7-26java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-26T01:07:33.000Z</published>
    <updated>2021-07-27T03:24:11.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>冲冲冲</p></blockquote><a id="more"></a><p>小插曲，很多人都有幸福的烦恼吧，至少是有兜底的吧，而我却没得选。</p><p>26日的内容全写在25日里面了，保证内容的连贯性</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;冲冲冲&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>7.25java基础学习</title>
    <link href="http://example.com/2021/07/25/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/25/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-25T01:32:40.000Z</published>
    <updated>2021-07-27T14:52:20.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>落后就要站直挨打，人菜就要多读书</p></blockquote><a id="more"></a><p>多关注一下底层的实现</p><h2 id="java集合框架"><a href="#java集合框架" class="headerlink" title="java集合框架"></a>java集合框架</h2><p><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210725103634078.png" alt="集合层次图"></p><p>主要分为<strong>Collection</strong> 和 <strong>Map</strong> 两种体系，他们都是接口</p><p>再细化一点，我们关注 Collection中的 list 和 Set </p><h2 id="说说-List-Set-Map-三者的区别？"><a href="#说说-List-Set-Map-三者的区别？" class="headerlink" title="说说 List,Set,Map 三者的区别？"></a>说说 List,Set,Map 三者的区别？</h2><p><strong>List</strong>：存储的元素是<strong>有序的</strong>、<strong>可重复的。</strong></p><p><strong>Set</strong>：存储的元素是<strong>无序的、不可重复的。</strong></p><p><strong>Map</strong>：使用键值对（kye-value）存储，Key是无序的、不可重复的，value是无序的、可重复的，每个key只能对应一个value</p><h2 id="为什么要使用集合？不是有数组这种东西吗？"><a href="#为什么要使用集合？不是有数组这种东西吗？" class="headerlink" title="为什么要使用集合？不是有数组这种东西吗？"></a>为什么要使用集合？不是有数组这种东西吗？</h2><p>由于<strong>数组的弊端</strong>： 数组只能存取相同类型的元素，且在使用之前必须声明长度且声明后就是固定的了，它的数据是可重复的、特点单一的。</p><p>而我们在实际的使用过程中，存储的数据类型是多种多样的，用集合来存储，可以存储<strong>不同类型、不同数量</strong>的对象，还可以保存具有映射关系的数据。</p><h2 id="如何选用集合"><a href="#如何选用集合" class="headerlink" title="如何选用集合?"></a>如何选用集合?</h2><p>根据要存放数据的特点来选择</p><p><strong>要存放具有映射关系的数据时</strong>，就用<strong>Map接口</strong>下的集合，要排序就用 TreeMap， 不需要排序用 HashMap， 需要保证线程安全就用 ConcurrentHashMap </p><p><strong>当我们只需要存放元素值时</strong>，就选择实现<strong>Collection接口</strong>的集合，需要保证<strong>元素唯一</strong>时选择实现 Set接口的集合比如TreeSet或HashSet，不需要就选择实现<strong>List接口</strong>的比如ArrayList或Linkedlist，然后再根据实现这些接口的集合的特点来选用。 </p><h2 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h2><p><strong>迭代器是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//集合中是否还有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//获得集合中的下⼀个元素</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义为：<strong>提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节。</strong></p><p><strong>为什么要用迭代器？</strong></p><p>迭代器目的是<strong>对集合进行遍历</strong>，而每一个集合内部的存储结构都是不同的，所以每一个集合存和取都是不一样，那么就需要在每一个类中定义<strong>hasNext()**方法和</strong>next()**方法，这样做是可以的，但是会让整个集合体系过于臃肿。</p><p>迭代器是将这样的方法向上抽取出接口，然后在每个类的内部，自己定义迭代方式。</p><p>这样做的好处有二：</p><p>第一，规定了整个集合体系的遍历方式都是hasNext()和next()方法；</p><p>第二，代码有底层内部实现，使用者不用管怎么实现的，会用即可 </p><p><strong>迭代器如何使用？</strong>（以map为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="comment">//这里我们可以写得更加精炼，用for-each语句来代替,就不用迭代器，在后面的集合遍历方式中会提到</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">        System.out.println(entry.getKey());</span><br><span class="line">        System.out.println(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有哪些集合是线程不安全的？怎么解决呢？"><a href="#有哪些集合是线程不安全的？怎么解决呢？" class="headerlink" title="有哪些集合是线程不安全的？怎么解决呢？"></a>有哪些集合是线程不安全的？怎么解决呢？</h2><p>我们常用的 Arraylist，Linkedlist，Hashmap，HashSet，TreeSet，TreeMap，PriorityQueue 不是线程安全的。解决办法很简单，可以<strong>使用线程安全的集合来代替。</strong><br>如果你要使用线程安全的集合的话，<code>java.util.concurrent</code>包（简称JUC包）中提供了很多<strong>并发容器</strong>供你使用：<br>1、ConcurrentHashMap：可以看作是线程安全的HashMap<br>2、CopyOnwriteArraylist：可以看作是线程安全的Arraylist，在读多写少的场合性能非常好，远远好于Vector<br>3、ConcurrentLinkedQueue：高效的并发队列，使用链表实现。可以看做一个线程安全的inkedList，这是一个非阻塞队列。<br>4、BlockingQueue：这是一个接口，JDK内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。<br>5、ConcurrentSkipListMap：跳表的实现。这是一个Map，使用跳表的数据结构进行快速查找。</p><h2 id="Collection子接口之List"><a href="#Collection子接口之List" class="headerlink" title="Collection子接口之List"></a>Collection子接口之List</h2><p>List接口下面主要有三个实现类：<strong>ArrayList</strong> 、 <strong>LinkedList</strong>、 <strong>Vector</strong></p><h3 id="ArrayList源码介绍"><a href="#ArrayList源码介绍" class="headerlink" title="ArrayList源码介绍"></a>ArrayList源码介绍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>与LinkedList不同的是，ArrayList实现了<strong>RandomAccess</strong>接口，没有实现<strong>Deque</strong>接口。</p><blockquote><p><strong>关于 RandomAccess 接口的作用？</strong></p><p>我们在源码中可以看到， RandomAccess 接口没有定义任何方法，相当于一个标识</p><p>只要集合中实现这个接口，就能支持快速随机访问，那什么是快速随机访问呢？</p><p>通过查看 Collections类中的binarySearch() 方法</p><p><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210725152536103.png" alt="Collections类中的binarySearch() 方法"></p><p>这两个方法有什么区别呢？</p><p>首先判断传入的list是否为 RandomAccess 的实例</p><p>实现 RandomAccess 接口的List集合采用一般的<strong>for循环遍历</strong>，而未实现这接口则采用<strong>迭代器</strong>。</p></blockquote><p><strong>结论：</strong>经过for 循环和 迭代器 两种方法的测试，</p><p> （1）如果有实现 RandomAccess接口，在遍历该集合时采用for循环效率会更高。</p><p>（2）如果没有实现 RandomAccess接口，那么在遍历该集合时采用Iterator迭代器的效率会更高一些。</p><p><strong>ArrayList有三种构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始容量大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带初始容量参数的构造函数,(用户可以在创建ArrayList对象时自己指定集合的初始大小)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个包含指定集合的元素的列表</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h3><p>以<strong>无参数构造方法</strong>创建 <code>ArrayList</code> 时，实际上初始化赋值的是一个<strong>空数组</strong>。当真正对数组进行<strong>添加元素操作</strong>时，才真正分配容量。<strong>即向数组中添加第一个元素时，数组容量扩为 10</strong>。</p><p><strong>以默认构造函数为例</strong>，此时elementData还是Object类型的空数组</p><p>1.首先我们添加一个元素，进入ensureCapacityInternal（size + 1）函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//添加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.此时的minCapacity = 1（因为最开始是空数组，size = 0，size + 1 = 1），进入if语句中，minCapcity = Max.math(10, 1) , 所以 minCapcity在添加完第一个元素后变成了10，接着进入ensureExplicitCapacity(minCapacity); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到最小扩容量</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">              <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.此时的elementData.length = 0，minCapcity = 10，进入grow函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4.在grow函数中，<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>这句话很重要，说明了新容量是旧容量的1.5倍，经过第一个元素的添加后newCapcity = 10，<code>elementData = Arrays.copyOf(elementData, newCapacity);</code>这句话将原数组扩充到新容量这么大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">       <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">      <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">      <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>5.以上就是第一个元素添加的过程，<strong>在添加第二个元素</strong>时进入 ensureExplicitCapacity 函数中，因为判断条件不满足（此时mincapcity = size + 1 = 2 ， 而elementData.length = 10），不会进入grow函数，也就不会扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">            grow(minCapacity);</span><br></pre></td></tr></table></figure><p>6.添加第 3、4···到第 10 个元素时，依然不会执行 grow 方法，数组容量都为 10。</p><p>直到添加<strong>第 11 个元素</strong>，minCapacity (为 11) 比 elementData.length（为 10）要大。进入 grow 方法进行扩容。</p><p>newCapcity为原来的1.5倍，大小为15，数组容量也从10扩充为15，不会进入hugeCapacity(minCapacity);方法中</p><blockquote><p><strong>关于扩容newCapcity扩容为1.5倍的准确说法</strong>：</p><p><strong>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1) **,  所以 ArrayList 每次扩容之后容量都会变为原来的 **1.5 倍左右</strong>（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！ 奇偶不同，比如 ：10+10/2 = 15, 33+33/2=49。<strong>如果是奇数的话会丢掉小数.</strong></p></blockquote><blockquote><p>关于<code>hugeCapacity(minCapacity);</code>函数：</p><p>感觉这部分代码有点多余，那段的代码实际意思就是：只要minCapcity大于MAX_ARRAY_SIZE（即Integer.MAX_VALUE - 8），minCapcity = Integer.MAX_VALUE</p></blockquote><blockquote><p><code>length()</code>  、 <code>length</code>  、<code>size()</code>    三者的比较</p><p>java 中的 <code>length</code>属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性.(相当于数组大小)</p><p>java 中的 <code>length()</code> 方法是针对字符串说的,如果想看这个字符串的长度则用到 <code>length()</code> 这个方法.</p><p>java 中的 <code>size()</code> 方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!（相当于元素多少）</p></blockquote><h3 id="ArrayList和数组的区别？"><a href="#ArrayList和数组的区别？" class="headerlink" title="ArrayList和数组的区别？"></a>ArrayList和数组的区别？</h3><p>数组内存地址是连续的，一旦声明后，长度就是不可变的了，存放的数据类型是固定的，便于查询，不方便删除和查找</p><p>ArrayList 底层是Object[]数组，容量可变，有自动扩容机制，存放的数据类型不是固定的，有许多api方便插入和删除使用</p><h3 id="ArrayList-和-Vector-的区别？"><a href="#ArrayList-和-Vector-的区别？" class="headerlink" title="ArrayList 和 Vector 的区别？"></a>ArrayList 和 Vector 的区别？</h3><p>1、ArrayList是List的<strong>主要实现类</strong>，底层使用 Object[] 存储，适用于<strong>频繁的查找工作，线程不安全</strong>；<br>2、Vector是List的<strong>古老实现类</strong>，底层使用 Object[] 存储，<strong>线程安全的</strong>。</p><h3 id="ArrayList-和-LinkedList-的区别？"><a href="#ArrayList-和-LinkedList-的区别？" class="headerlink" title="ArrayList 和 LinkedList 的区别？"></a>ArrayList 和 LinkedList 的区别？</h3><p>1、<strong>是否线程安全：</strong>都是线程不安全的</p><p>2、<strong>底层数据结构</strong>：Arraylist 底层使用的是 object数组；LinkedList底层使用的是<strong>双向链表</strong>（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</p><p>3、<strong>是否支持快速随机访问</strong>：LinkedList不支持高效的随机元素访问，而ArrayList支持。快速随机访问就是通过元素的序号快速获取元素对象（对应于get（int index）方法）。</p><p>4、<strong>内存空间占用</strong>：ArrayList的空间浪费主要体现在在list列表的<strong>结尾会预留一定的容量空间</strong>，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要<strong>存放直接后继和直接前驱以及数据</strong>）.</p><p>5.<strong>在使用上的不同点</strong>：</p><p>List 是集合列表接口，ArrayList 和 LinkedList 都是 List 接口的实现类。</p><p>ArrayList 是动态数组顺序表，顺序表的存储地址是连续的，所以<strong>查找比较快，但是插入和删除时由于需要把其它的元素顺序移动，所以比较耗时。</strong></p><p>LinkedList 是双向链表的数据结构，同时实现了双端队列 Deque 接口，链表节点的存储地址是不连续的，每个存储地址通过指针关联，在<strong>查找时需要进行指针遍历节点</strong>，所以<strong>查找比较慢，而在插入和删除时比较快。</strong></p><p><strong>LinkedList源码介绍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>可以看到 LinkedList 实现了<strong>Deque</strong>，可以作为一个双端队列，实现了<strong>Cloneable接口</strong>，能被克隆，实现了<strong>Serializable接口</strong>，因此它支持序列化，能够通过序列化传输。</p><p>LinkedList类中有一个内部私有类Node，这个类就代表双端链表的节点Node。这个类有三个属性，分别是前驱节点，本节点的值，后继节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//分别:前驱节点，本节点的值，后继节点</span></span><br><span class="line">       E item;</span><br><span class="line">       Node&lt;E&gt; next;</span><br><span class="line">       Node&lt;E&gt; prev;</span><br><span class="line">       Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">           <span class="keyword">this</span>.item = element;</span><br><span class="line">           <span class="keyword">this</span>.next = next;</span><br><span class="line">           <span class="keyword">this</span>.prev = prev;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210725115825089.png" alt="LinkedList结构图 -- 双向链表"></p><h2 id="Collection子接口之Set"><a href="#Collection子接口之Set" class="headerlink" title="Collection子接口之Set"></a>Collection子接口之Set</h2><h3 id="Comparable-和-Comparator-的区别"><a href="#Comparable-和-Comparator-的区别" class="headerlink" title="Comparable 和 Comparator 的区别"></a>Comparable 和 Comparator 的区别</h3><p>1、<strong>Comparable接口</strong>出自java.lang包它有一个<strong>compareTo（object obj）</strong>方法用来排序</p><p>2、<strong>Comparator接口</strong>出自java.util包它有一个<strong>compare（Object obj1，Object obj2）</strong>方法用来排序</p><p>1.Comparator定制排序，具体使用见<a href="D:\Blog\source_posts\实现Comparator接口来排序.md">实现Comparator接口来排序</a></p><p>2.实现Comparable接口来排序，需要重写接口中的compareTo方法，像String类和Integer类已经实现了Comparable接口，如果我们自定义一个类的话，需要手动实现接口，并重写方法</p><blockquote><p><code>compareTo():</code></p><p>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。</p><p>升序： o1.compareTo(o2)     降序： o2.compareTo(o1)</p></blockquote><h3 id="关于Set中无序性的解释"><a href="#关于Set中无序性的解释" class="headerlink" title="关于Set中无序性的解释"></a>关于Set中无序性的解释</h3><p>无序性<strong>不等于随机性</strong>，无序性指的是存储的数据在底层数组中并不是按照索引的顺序添加的，而是根<strong>据数据的哈希值确定的</strong></p><h3 id="HashSet如何检查重复？"><a href="#HashSet如何检查重复？" class="headerlink" title="HashSet如何检查重复？"></a>HashSet如何检查重复？</h3><p>HashSet是基于HashMap实现的，元素的值存储在key上，value的值所有元素都一样，都是这个 <code>private static final Object PRESENT = new Object();</code></p><p>HashSet在添加一个元素时（比如此时添加的是”a”这个元素），都会将该元素与set中所遍历到的每个元素作比较，比较的过程是这样的：</p><p>先用该元素的hashCode值与遍历到的每个元素的hashCode作比较，如果hashCode不相等，则直接添加；若hashCode的值一样，则继续用该元素的equals()方法比较（是被添加的equals()方法，与之比较的元素作为参数），如果equals()方法得到的值是一样的，说明两个元素是相通的则不再添加，如果equals()的值是不一样的，就会将该对象添加到其他内存地址（重新计算出不一样的hashCode）。</p><h3 id="比较HashSet，LinkedHashSet和TreeSet三者的异同"><a href="#比较HashSet，LinkedHashSet和TreeSet三者的异同" class="headerlink" title="比较HashSet，LinkedHashSet和TreeSet三者的异同"></a>比较HashSet，LinkedHashSet和TreeSet三者的异同</h3><p>如需要详细理解源码，看 <a href="https://blog.csdn.net/a724888/article/details/80295328">Java集合详解7：HashSet，TreeSet与LinkedHashSet</a> 这篇文章</p><p>HashSet与LinkedHashSet都是基于Set接口的实现类。TreeSet是Set的子接口SortedSet的实现类。Set接口及其子接口、实现类的结构如下所示：</p><p>Set接口</p><p>​        |——SortedSet接口——TreeSet实现类</p><p>​        |——HashSet实现类         </p><p>​        |——LinkedHashSet实现类</p><p><strong>1.HashSet</strong></p><p>底层基于<strong>HashMap</strong>实现的，使用HashMap保存所有元素，我们加入进去的元素相当于HashMap中的Key，所有的Value都是相同的。</p><p>1.HashSet中不能有相同的元素，可以有一个Null元素，存入的元素是<strong>无序</strong>的。</p><p>2.HashSet如何保证唯一性？</p><p>1).HashSet底层数据结构是哈希表，哈希表就是存储唯一系列的表，而哈希值是由对象的hashCode()方法生成。</p><p>2).确保唯一性的两个方法：hashCode()和equals()方法。</p><p>3.非线程安全</p><p><strong>2.LinkedHashSet</strong></p><p> LinkedHashSet底层使用 <strong>LinkedHashMap</strong> 来保存所有元素，继承了 HashSet，其所有的方法操作上又与 HashSet 相同</p><p>1.LinkedHashSet中不能有相同元素，可以有一个Null元素，是有序的，也就是说当遍历该集合时候，LinkedHashSet将会按照元素的添加顺序访问集合的元素。</p><p>2.LinkedHashSet如何保证有序和唯一性？</p><p>1).底层数据结构由哈<strong>希表和链表</strong>组成。</p><p>2).<strong>链表保证了元素的有序性</strong>，哈希表保证了元素的唯一性。</p><p>3.非线程安全</p><p><strong>3.TreeSet</strong></p><p>若想了解TreeSet中自然排序和定制排序，看这篇文章 <a href="https://www.cnblogs.com/lixiaolun/archive/2012/12/25/2832775.html">Tree自然排序和定制排序</a></p><p>1.TreeSet中不能有相同元素，<strong>不可以有Null元素</strong>（与前两个的区别），不可以放入两个类型不相同的元素，根据元素的<strong>自然顺序</strong>进行排序。</p><p>2.如果要将一个类的对象放入TreeSet中，这个类必须要实现Comparable接口，TreeSet会调用对象的comparaTo方法进行比较，没有实现这个接口，则会出现ClassCastException异常。</p><p>2.TreeSet如何保证元素的排序和唯一性？</p><p>底层的数据结构是红黑树(一种自平衡二叉查找树)</p><p>3.添加、删除操作时间复杂度都是O(log(n))</p><p>4.非线程安全</p><p>一个对象如果放到TreeSet中，必然会实现Comparable接口，实现Comparable的类必须实现compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比 较大小，TreeSet中有个比较大小的东西，两个不同种类的对象就不能比较大小啦。</p><blockquote><p> <strong>TreeSet的自然排序：</strong></p><p> TreeSet会调用集合元素的compareTo(Object obj)方法来比较元素之间大小关系，然后将集合元素按升序排列，这种方式就是自然排序。</p></blockquote><p><strong>总结：</strong><br>通过以上特点可以分析出，三者都保证了元素的唯一性，如果无排序要求可以选用HashSet；如果想取出元素的顺序和放入元素的顺序相同，那么可以选用LinkedHashSet。如果想插入、删除立即排序或者按照一定规则排序可以选用TreeSet。</p><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><p>主要有三个实现类：HashMap、HashTable、TreeMap</p><h3 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h3><p>1.<strong>线程是否安全</strong>：HashMap是<strong>非线程安全</strong>的，HashTable是<strong>线程安全</strong>的，因为HashTable内部的方法基本<strong>都经过synchronized修饰</strong>。（如果你要保证线程安全的话就使用<strong>ConcurrentHashMap</strong>吧！）；</p><p>2.<strong>效率</strong>：因为线程安全的问题，<strong>HashMap要比HashTable效率高一点</strong>。另外，<strong>HashTable基本被淘汰</strong>，不要在代码中使用它；<br>3.<strong>对Null key和Null value的支持</strong>：HashMap可以存储null的key和value，但null作为键只能有一个，null作为值可以有多个；HashTable<strong>不允许有null 键和null值</strong>，否则会抛出NullPointerException.</p><p>4.<strong>初始容量大小和每次扩充容量大小的不同</strong>：</p><p>①创建时<strong>如果不指定容量初始值</strong>，Hashtable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1，HashMap默认的初始化大小为16，之后每次扩充，容量变为原来的2倍。</p><p>②创建时<strong>如果给定了容量初始值</strong>，那么Hashtable会直接使用你给定的大小，而HashMap会将其扩充为2的幂次方大小（HashMap中的tablesizeFor（）方法保证，下面给出了源代码）。也就是说HashMap总是使用2的幂作为哈希表的大小、后面会介绍到为什么是2的幂次方。</p><p>5.<strong>底层实现结构不一样</strong></p><p>6.<strong>继承的类不一样</strong>，HashMap继承AbstractMap，AbstractMap实现了Map接口；Hashtable继承Dictionary类；都实现了Map，Cloneable（可复制），Serializable（可序列化）三个接口；</p><h3 id="HashMap介绍（未解决）"><a href="#HashMap介绍（未解决）" class="headerlink" title="HashMap介绍（未解决）"></a>HashMap介绍（未解决）</h3><p><strong>HashMap简介</strong></p><p>HashMap位于java.util目录下。 HashMap是一个散列表，存储的内容是&lt;key,value&gt;键值对。它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度。</p><p>HashMap继承于AbstractMap，实现了Map、Cloneable、Serializable接口 ，HashMap是线程不安全的，其中key、value都可以为null，且是无序的，但 null 作为键只能有一个，null 作为值可以有多个。</p><p><strong>JDK1.8 之前</strong> HashMap 由 <strong>数组+链表</strong> 组成的，数组是 HashMap 的主体，链表则是主要为了解决<strong>哈希冲突</strong>而存在的（“拉链法”解决冲突）。 JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p><p><code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。并且， <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小。</p><p><strong>HashMap源码分析</strong></p><p><strong>JDK1.8之前</strong></p><p>JDK1.8 之前 HashMap 底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。</p><p>HashMap 通过 key 的 hashCode() 函数, 再经过扰动函数处理过后得到 hash 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 <strong>n 指的是数组的长度</strong>），即数组的index下标，如果当前位置存在元素的话，就判断该位置元素与要存入的元素的 <strong>hash 值以及 key 是否相同</strong>（因为hash值不同也可能得到相同的数组位置），如果相同的话，直接覆盖，不相同就通过<strong>拉链法</strong>解决冲突。</p><blockquote><p>为什么要用扰动函数得到最后的hash值，而不直接用key的hashCode() 函数得到呢？</p><p>扰动函数是为了防止一些实现比较差的 hashCode() 方法 ，换句话说使用扰动函数之后可以<strong>减少碰撞</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扰动函数的具体实现如下：</span></span><br><span class="line"><span class="comment">// ^ ：按位异或</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)；</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>什么是拉链法？</p><p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可，如下图所示：</p><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210726220013547.png" alt="拉链法示意图" style="zoom:67%;" /></blockquote><p><strong>JDK1.8之后</strong></p><p>JDK1.8 以后在<strong>解决哈希冲突</strong>时有了较大的变化。</p><p>当链表长度大于阈值（默认为 8）时，会首先调用 <code>treeifyBin()</code>方法。这个方法会根据 HashMap 数组来决定是否转换为红黑树。只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是执行 <code>resize()</code> 方法对数组扩容。</p><ul><li><p><strong>loadFactor 加载因子</strong></p><p>loadFactor 加载因子是控制<strong>数组存放数据的疏密程度</strong>，loadFactor 越趋近于 1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor 越小，也就是趋近于 0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><p><strong>loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值</strong>。</p><p>给定的<strong>默认容量为 16，负载因子为 0.75</strong>。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p></li><li><p><strong>threshold 临界值</strong></p><p><strong>threshold = capacity * loadFactor</strong>，<strong>当 size &gt;= threshold</strong>的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是 <strong>衡量数组是否需要扩增的一个标准</strong>。</p></li></ul><h3 id="HashMap和HashSet的区别"><a href="#HashMap和HashSet的区别" class="headerlink" title="HashMap和HashSet的区别"></a>HashMap和HashSet的区别</h3><p>HashSet底层就<strong>是基于HashMap实现的</strong>。（HashSet的源码非常非常少，因为除了<code>clone()</code>、<code>writeObject()</code>、<code>readObject()</code> 是HashSet自己实现之外，其他方法都是<strong>直接调用HashMap中的方法。</strong></p><p>以HashSet的 get方法为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashSet中的add方法，直接调用HashMap中的put方法来实现的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210727105418705.png" alt="HashMap和HashSet比较" style="zoom: 80%;" /><h3 id="HashMap有哪几种常见的遍历方式？"><a href="#HashMap有哪几种常见的遍历方式？" class="headerlink" title="HashMap有哪几种常见的遍历方式？"></a>HashMap有哪几种常见的遍历方式？</h3><p>HashMap 遍历从大的方向来说，可分为<strong>以下 4 类</strong>：</p><ol><li>迭代器（Iterator）方式遍历；  2种</li><li>For Each 方式遍历；   2种</li><li>Lambda 表达式遍历（JDK 1.8+）    1种</li><li>Streams API 遍历（JDK 1.8+）  2种      </li></ol><p>但每种类型下又有不同的实现方式，因此具体的遍历方式又可以分为<strong>以下 7 种</strong>：</p><ol><li>使用迭代器（Iterator）EntrySet 的方式进行遍历；</li><li>使用迭代器（Iterator）KeySet 的方式进行遍历；</li><li>使用 For Each EntrySet 的方式进行遍历；</li><li>使用 For Each KeySet 的方式进行遍历；</li><li>使用 Lambda 表达式的方式进行遍历；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.print(key);</span><br><span class="line">            System.out.print(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.使用 Streams API 单线程的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    *<span class="comment">// 创建并赋值 HashMap*</span></span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line">    *<span class="comment">// 遍历*</span></span><br><span class="line">    map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">      System.out.print(entry.getKey());</span><br><span class="line">      System.out.print(entry.getValue());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>使用 Streams API 多线程的方式进行遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    *<span class="comment">// 创建并赋值 HashMap*</span></span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">    map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">    map.put(<span class="number">5</span>, <span class="string">&quot;Java中文社群&quot;</span>);</span><br><span class="line">    *<span class="comment">// 遍历*</span></span><br><span class="line">    map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">      System.out.print(entry.getKey());</span><br><span class="line">      System.out.print(entry.getValue());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="concurrentHashMap分析（未解决）"><a href="#concurrentHashMap分析（未解决）" class="headerlink" title="concurrentHashMap分析（未解决）"></a>concurrentHashMap分析（未解决）</h3><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p><strong>Collections工具类常用方法：</strong></p><p>1、排序<br>2、查找，替换操作<br>3、同步控制（不推荐，需要线程安全的集合类型时请考虑使用JUC包下的并发集合）</p><p><strong>排序操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list，Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list，<span class="keyword">int</span> i，<span class="keyword">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list，<span class="keyword">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将list的前distance个元素整体移到后</span></span></span><br></pre></td></tr></table></figure><p><strong>查找,替换操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarysearch</span><span class="params">(List list，Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。类比int min(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll，Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll，Comparator c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list，Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frequency</span><span class="params">(Collection c，object o)</span><span class="comment">//统计元素出现次数int indexOfSublist(List list，List target)//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source，list target).</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replaceAll</span><span class="params">(List list，Object oldVal，Object newVal)</span>，用新元素替换旧元素</span></span><br></pre></td></tr></table></figure><p><strong>同步控制</strong></p><p>Collections提供了多个<code>synchronizedxxx</code>方法，该方法可以<strong>将指定集合包装成线程同步的集合</strong>，<strong>从而解决多线程并发访问集合时的线程安全问题。</strong><br>我们知道HashSet，TreeSet，Arraylist，LinkedList，HashMap，TreeMap都是线程不安全的。Collections提供了多个静态方法可以把他们包装成线程同步的集合。<br><strong>最好不要用下面这些方法，效率非常低，</strong>需要线程安全的集合类型时请考虑使用 JUC包 下的并发集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronizedCollection(Collection&lt;T&gt; c)<span class="comment">//返回指定collection支持的同步（线程安全的）collection.</span></span><br><span class="line">synchronizedList(List&lt;T&gt; list)<span class="comment">//返回指定列表支持的同步（线程安全的）List.</span></span><br><span class="line">synchronizedMap(Map&lt;k，v&gt; m)<span class="comment">//返回由指定映射支持的同步（线程安全的）Map.</span></span><br><span class="line">synchronizedSet(Set&lt;T&gt; s)<span class="comment">//返回指定set支持的同步（线程安全的）set.</span></span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="什么是快速失败-fail-fast-？"><a href="#什么是快速失败-fail-fast-？" class="headerlink" title="什么是快速失败(fail-fast)？"></a>什么是快速失败(fail-fast)？</h3><p>在使用迭代器对集合进行迭代的过程中，如果 A 线程正在对集合进行遍历，此时 B 线程对集合进行修改（增加、删除、修改），或者 A 线程在遍历过程中对集合进行修改，都会导致 A 线程抛出 ConcurrentModificationException 异常。</p><p><strong>原理：</strong>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 <strong>modCount</strong> 变量。集合在被遍历期间如果内容发生变化，就会改变 modCount 的值。每当迭代器使用 hashNext()/next() 遍历下一个元素之前，都会<strong>检测 modCount 变量是否等于 expectedmodCount 值</strong>，是的话就返回遍历；否则抛出异常，终止遍历。</p><p><strong>注意：</strong>这里异常的抛出条件是检测到 <strong>modCount != expectedmodCount</strong> 这个条件。如果集合发生变化时修改 modCount 值刚好又设置为了 expectedmodCount 值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的 bug。</p><blockquote><p>注：通过 Iterator 的方法修改集合的话会修改到 expectedModCount 的值，所以不会抛出异常。</p><p>如下例所示：</p></blockquote><p><img src="/images/7-25java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210725222431894.png" alt="例子"></p><p>上面这个例子在反例中，  如果<strong>只添加两个元素</strong>，1 是 可以成功的， “1”换成”2”就会报错</p><p><strong>场景：</strong>java.util 包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。</p><h3 id="什么是安全失败-fail-safe-呢？"><a href="#什么是安全失败-fail-safe-呢？" class="headerlink" title="什么是安全失败(fail-safe)呢？"></a>什么是安全失败(fail-safe)呢？</h3><p>采用安全失败机制的集合容器，<strong>在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</strong></p><p><strong>原理：</strong>由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发 Concurrent Modification Exception。</p><p>&gt;缺点：基于拷贝内容的优点是避免了 Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p><p><strong>场景：</strong>java.util.concurrent 包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;落后就要站直挨打，人菜就要多读书&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>final,static,this,super 关键字总结</title>
    <link href="http://example.com/2021/07/24/final-static-this-super-%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/07/24/final-static-this-super-%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/</id>
    <published>2021-07-24T13:45:48.000Z</published>
    <updated>2021-07-25T02:23:10.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java中一些常见的关键字的总结</p></blockquote><a id="more"></a><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final关键字主要用在三个地方：<strong>变量</strong>、<strong>方法</strong>、<strong>类</strong>。</p><p><strong>1.修饰一个变量</strong></p><ul><li>若变量为基本数据类型，则该变量在初始化之后就不能修改</li><li>若变量为引用类型，比如对象、数组，则该对象、数组<strong>本身的内容可以修改</strong>，但在对其初始化之后便不能让其指向另一个对象。 （指向不能改，指向的对象的内容可以改）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = &#123;&#125;;</span><br><span class="line">    a = b; <span class="comment">//编译错误</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">//正确，可以修改引用指向的对象的内容</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>如果变量为成员变量（在类中的变量），则必须<strong>当场初始化</strong>，不能先声明，然后再赋值（上面两种情况都可以只声明不初始化）</li></ul><p><strong>2.修饰一个方法</strong></p><p>当使用final修饰方法时，这个方法将成为最终方法，<strong>无法被子类重写</strong>。但是，该方法<strong>仍然可以被继承</strong>。</p><p><strong>3.修饰一个类</strong></p><p>当用final修改类时，该类成为最终类，<strong>无法被继承</strong>。类中的方法被隐式地定义为final</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p><strong>1.修饰成员变量和成员方法</strong>（不能修饰局部变量）：被 static 修饰的成员<strong>属于类</strong>，不属于单个这个类的某个对象，<strong>被类中所有对象共享</strong>，可以并且可以通过类名调用。静态变量 存放在 Java 内存区域的<strong>方法区</strong>。调用格式：<code>类名.静态变量名</code> <code>类名.静态方法名()</code></p><p><strong>2.静态内部类</strong>（static修饰类的话<strong>只能修饰内部类</strong>） ：静态内部类与非静态内部类之间存在一个最大的区别：非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外部类，但是静态内部类却没有。没有这个引用就意味着：</p><ul><li>它的创建是不需要依赖外部类的创建。</li><li>它不能使用任何外部类的非static成员变量和方法。</li></ul><p><strong>需要注意的是</strong>：当一个内部类<strong>没有使用static</strong>修饰的时候，是不能直接使用内部类创建对象，须要先使用外部类对象点new内部类对象及(<strong>外部类对象.new 内部类（）</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Out.In in = <span class="keyword">new</span> Out.In();  <span class="comment">//静态内部类的创建，相当于把内部内看成一个属性来调用了</span></span><br><span class="line">       <span class="comment">// 若取消static，变为非静态内部类，需要先创建一个外部类的对象，通过 对象.new 内部类  调用</span></span><br><span class="line">       <span class="comment">// Out out = new Out();</span></span><br><span class="line">       <span class="comment">// Out.In in= out.new In();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">In</span></span>&#123;</span><br><span class="line">        In()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的例子演示了静态内部类只能调用外部类的<strong>静态成员变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">In</span></span>&#123;</span><br><span class="line">        In()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(a);  <span class="comment">//正确，a是外部类的静态成员变量</span></span><br><span class="line">            System.out.println(b);  <span class="comment">//错误，b是外部类的非静态成员变量</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.静态代码块</strong>：静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—&gt;非静态代码块—&gt;构造方法)。 该类不管创建多少对象，静态代码块只执行一次.</p><p><strong>4.静态导包：</strong>使用<code>import static</code>，导入某个类中的指定静态资源，并且<strong>不需要使用类名调用类中静态成员</strong>，可以直接使用类中静态成员变量和成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用</span></span><br><span class="line"> <span class="comment">//如果只想导入单一某个静态方法，只需要将*换成对应的方法名即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;<span class="comment">//换成import static java.lang.Math.max;具有一样的效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max = max(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于静态代码块、静态方法的执行顺序问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExeOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestExeOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类的构造方法执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str = getString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行了...1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法，赋值给静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行了...2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//普通代码块</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;普通代码块执行了...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;【第一次】&quot;</span>);</span><br><span class="line">            TestExeOrder testExeOrder1 = <span class="keyword">new</span> TestExeOrder();</span><br><span class="line">            System.out.println(<span class="string">&quot;【第二次】&quot;</span>);</span><br><span class="line">            TestExeOrder testExeOrder2 = <span class="keyword">new</span> TestExeOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果为：</strong></p><blockquote><p>静态方法执行了…<br>静态代码块执行了…1…<br>静态代码块执行了…2…</p><p>普通代码块执行了…<br>【第一次】<br>构造代码块执行了…<br>类的构造方法执行了…<br>【第二次】<br>构造代码块执行了…<br>类的构造方法执行了…</p></blockquote><p>先执行静态的方法或者代码块(即便不创建对象也会执行) -&gt; 接着构造代码块（非静态代码块）-&gt; 构造方法</p><p>需要jvm的类加载过程能够更加深入的理解</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>this 关键字<strong>用于引用类的当前实例</strong>。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    Employees[] employees;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">manageEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalEmp = <span class="keyword">this</span>.employees.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;Total employees: &quot;</span> + totalEmp);</span><br><span class="line">        <span class="keyword">this</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，this 关键字用于两个地方：</p><ul><li>this.employees.length：访问类 Manager 的当前实例的变量。</li><li>this.report（）：调用类 Manager 的当前实例的方法。</li></ul><p>此关键字<strong>是可选的</strong>，这意味着如果上面的示例<strong>在不使用此关键字的情况下表现相同</strong>。 但是，使用此关键字可能会使代码<strong>更易读或易懂</strong>。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super 关键字<strong>用于从子类访问父类的变量和方法</strong>。 主要有以下三种用法：</p><ol><li>在子类的成员方法中，访问父类的<strong>成员变量。</strong></li><li>在子类的成员方法中，访问父类的<strong>成员方法。</strong></li><li>在子类的构造方法中，访问父类的<strong>构造方法。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> number;</span><br><span class="line">    </span><br><span class="line">Super()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">showNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    Sub()&#123;</span><br><span class="line">        <span class="keyword">super</span>();    <span class="comment">// 访问父类的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.number = <span class="number">10</span>;   <span class="comment">//访问父类的变量</span></span><br><span class="line">        <span class="keyword">super</span>.showNumber();  <span class="comment">//访问父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 this 和 super 要注意的问题：</strong> </p><ul><li>在构造器中使用 <code>super()</code> 调用父类中的其他构造方法时，该语句<strong>必须处于构造器的首行</strong>，否则编译器会报错。另外，this 调用本类中的其他构造方法时，<strong>也要放在首行</strong>。  </li><li><strong>this、super 不能用在 static 方法中。</strong></li></ul><blockquote><p><strong>简单解释一下：</strong></p><p>被 static 修饰的成员<strong>属于类</strong>，不属于单个这个类的某个对象，<strong>被类中所有对象共享</strong>。而 this 代表对本类对象的引用，指向<strong>本类对象</strong>；而 super 代表对父类对象的引用，指向父类对象；所以， <strong>this 和 super 是属于对象范畴的东西，而静态方法是属于类范畴的东西</strong>。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java中一些常见的关键字的总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>7.24java基础学习</title>
    <link href="http://example.com/2021/07/24/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/24/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-24T00:51:41.000Z</published>
    <updated>2021-07-24T13:48:32.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笑死，根本看不完</p></blockquote><a id="more"></a><h2 id="java语言的值传递"><a href="#java语言的值传递" class="headerlink" title="java语言的值传递"></a>java语言的值传递</h2><p>Java程序设计语言总是采用<strong>按值调用</strong>。也就是说，方法得到的是所有参数值的<strong>一个拷贝</strong>，也就是说，方法不能修改传递给它的任何参数变量的内容。</p><p><strong>第一个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    swap(num1, num2);</span><br><span class="line">    System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);</span><br><span class="line">    System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">20</span></span><br></pre></td></tr></table></figure><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724104322838.png" style="zoom:67%;" /><p>也就是说，a，b相当于num1、num2的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p><strong>第二个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    change(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">   array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724104722405.png" style="zoom: 67%;" /><p>array被初始化为arr的拷贝对象，都指向同一个数组对象。因此，外部对引用对象的改变会映射到所对应的对象上</p><p><strong>总结一下：</strong></p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。 （参照第一个例子）</li><li>一个方法可以改变一个对象参数的状态。     （参照第二个例子）</li><li>一个方法不能让对象参数引用一个新的对象。（即不会修改这个对象的引用，只会拷贝这个引用，然后修改引用指向的对象的内容，但是原先的这个引用还是指向这个地址）</li></ul><h2 id="关于final关键字的总结"><a href="#关于final关键字的总结" class="headerlink" title="关于final关键字的总结"></a>关于final关键字的总结</h2><p>final关键字主要用在三个地方：<strong>变量</strong>、<strong>方法</strong>、<strong>类</strong>。</p><p><strong>1.修饰一个变量</strong></p><ul><li>若变量为基本数据类型，则该变量在初始化之后就不能修改</li><li>若变量为引用类型，比如对象、数组，则该对象、数组<strong>本身的内容可以修改</strong>，但指向该对象或数组的<strong>地址的引用不能修改。</strong>  （指向不能改，指向的对象的内容可以改）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = &#123;&#125;;</span><br><span class="line">    a = b; <span class="comment">//编译错误</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">//正确，可以修改引用指向的对象的内容</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>如果变量为成员变量（在类中的变量），则必须<strong>当场初始化</strong>，不能先声明，然后再赋值（上面两种情况都可以只声明不初始化）</li></ul><p><strong>2.修饰一个方法</strong></p><p>当使用final修饰方法时，这个方法将成为最终方法，<strong>无法被子类重写</strong>。但是，该方法<strong>仍然可以被继承</strong>。</p><p><strong>3.修饰一个类</strong></p><p>当用final修改类时，该类成为最终类，<strong>无法被继承</strong>。类中的方法被隐式地定义为final</p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>具体参考<a href="https://www.cnblogs.com/ysocean/p/8482979.html">Java的深拷贝和浅拷贝</a></p><p><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724120944934.png" alt="浅拷贝和深拷贝的对比"></p><p><strong>浅拷贝</strong>：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是基本数据类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。（修改副本也会对原始对象进行修改）</p><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724115209937.png" alt="浅拷贝" style="zoom: 67%;" /><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">浅拷贝通过调用Object类的clone()方法来实现，代码如下：</span><br><span class="line">Person p2 = (Person) p1.clone();</span><br><span class="line"></span><br><span class="line">注意：调用对象的 clone 方法，必须要让类实现 Cloneable 接口，并且覆写 clone 方法。如下：</span><br><span class="line"> <span class="meta">@Override</span>   <span class="comment">// 实现Cloneable接口，重写了类的clone()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();  <span class="comment">//返回的是父类的clone()方法，即Object类中的</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>深拷贝</strong>：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，无论该字段是值类型的还是引用类型，都复制独立的一份。当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。</p><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724115337869.png" alt="深拷贝" style="zoom:67%;" /><p><strong>深拷贝实现的两种方式</strong>：（待解决）</p><p><a href="https://blog.csdn.net/weixin_39792935/article/details/85703570">Java对象-深拷贝(实现Serializable, Cloneable两种方式)</a></p><p>1.实现Cloneable接口并重写Object类中的clone()方法；</p><p>2.实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</p><h2 id="java中的异常处理"><a href="#java中的异常处理" class="headerlink" title="java中的异常处理"></a>java中的异常处理</h2><p>Throwable</p><p>​        – Error</p><p>​        – Exception</p><p>​                    – RuntimeException</p><p>​                    – Non-RuntimeException</p><p><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724165814446.png"></p><p>Java通过API中“<strong>Throwable类的众多子类</strong>”，来描述各种不同的异常。</p><p>Throwable类有两个子类：<strong>Exception</strong>（异常）类和<strong>Error</strong>（错误）类。</p><h4 id="Exception类"><a href="#Exception类" class="headerlink" title="Exception类"></a>Exception类</h4><p><strong>可以被捕获并且可能恢复的异常类</strong>，用户程序也可以通过继承Exception类，自定义异常类</p><p>分为运行时异常和非运行时异常</p><p>（1）<strong>运行时异常</strong>： 都是RuntimeException类及其子类异常，如NullPointerExceotion、IndexOutOfBoundsException等，这些异常是<strong>不检查异常</strong>，程序可以选择捕获处理，<strong>也可以不处理</strong>。<br>（2）<strong>非运行时异常</strong>： 是RuntimeException以外的异常，类型上都属于Exception类及其子类。如IOException、SQLException等以及用户自定义的Exception异常。</p><h4 id="Error类"><a href="#Error类" class="headerlink" title="Error类"></a>Error类</h4><p>属于程序无法处理的错误，没有办法捕捉。用户不需要处理这些异常</p><p>这些错误发生时，Java虚拟机（JVM）一般会选择线程终止。</p><h4 id="Throwable类的常用方法"><a href="#Throwable类的常用方法" class="headerlink" title="Throwable类的常用方法"></a>Throwable类的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">getMessage</span><span class="params">()</span> ：返回异常发生时的简要描述</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">toString</span><span class="params">()</span>：返回异常发生时的详细信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> ：在控制台上打印Throwable对象封装的异常信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">getLocalizedMessage</span><span class="params">()</span> ：返回异常对象的本地化信息。使用Throwable的子类覆</span></span><br><span class="line"><span class="function">盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与</span></span><br><span class="line"><span class="function"><span class="title">getMessage</span><span class="params">()</span> 返回的结果相同</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h4 id="异常处理的关键字"><a href="#异常处理的关键字" class="headerlink" title="异常处理的关键字"></a>异常处理的关键字</h4><p>Java 的异常处理通过 5 个关键字来实现：<strong>try、catch、throw、throws 和 finally。</strong></p><p>作用如下图：</p><p><img src="/images/7-24java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210724172048270.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式如下所示：  <span class="keyword">catch</span> -- 捕获异常  <span class="keyword">throw</span> -- 抛出异常</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;  </span><br><span class="line">  代码块；</span><br><span class="line">  &#125; <span class="keyword">catch</span>(异常类名 异常形式参数名) &#123;    </span><br><span class="line">  异常处理代码块；</span><br><span class="line">  &#125; <span class="keyword">catch</span>(异常类名 异常形式参数名) &#123;  </span><br><span class="line">    异常处理代码块； </span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;    </span><br><span class="line">    无条件执行的代码块；</span><br><span class="line">  &#125;       <span class="comment">//catch语句可以0至多个，可以没有finally语句。</span></span><br></pre></td></tr></table></figure><p><strong>过程：</strong></p><p>1.如果try语句块中<strong>发生异常</strong>，相应的异常对象就会被抛出，catch就会依据所拋出异常对象的类型<strong>进行捕获</strong>，并处理。处理之后，程序会跳过 try 语句块中剩余的语句，开始执行finally语句块。</p><p>2.如果 try 语句块中<strong>没有发生异常</strong>，那么 try 块正常结束，后面的 <strong>catch 语句块被跳过</strong>，程序开始执行finally语句块。</p><blockquote><p>当有多个catch存在时，注意catch捕获异常的顺序：</p><p>捕获的多个异常类之间存在父子关系时，捕获异常时一般<strong>先捕获子类</strong>，<strong>再捕获父类。</strong>所以<strong>子类异常必须在父类异常的前面</strong>，否则全部给父类异常捕获到了，子类捕获不到。</p></blockquote><h4 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h4><p><strong>throw（抛出异常）</strong></p><p>抛出的异常为Throwable类及其子类或者为自定义类</p><p><strong>throws（声明异常）</strong></p><p>当一个方法产生一个它不处理的异常时，那么就需要在该方法的头部声明这个异常，以便将该异常传递到方法的外部进行处理。所以，<strong>使用 throws 声明的方法表示此方法不处理异常。</strong></p><ul><li>子类方法声明的异常必须<strong>小于等于父类</strong>方法声明的异常</li><li>一个方法可以声明多个异常，用逗号隔开</li><li>声明有这些异常，但不一定会发生</li></ul><p><strong>throws 关键字和 throw 关键字在使用上的几点区别如下：</strong></p><ul><li>throws 用来声明一个方法<strong>可能抛出</strong>的所有异常信息，表示出现异常的一种可能性，但并不一定会发生这些异常；throw则是指拋出的一个具体的异常类型，执行 throw 则一定抛出了某种异常对象。</li><li>通常在一个方法（类）的声明处通过 throws 声明方法（类）可能拋出的异常信息，而在方法（类）内部通过 throw声明一个具体的异常信息。</li><li>throws 通常不用显示地捕获异常，可由系统自动将所有捕获的异常信息抛给上级方法； throw则需要用户自己捕获相关的异常，而后再对其进行相关包装，最后将包装后的异常信息抛出。</li></ul><p>（具体是怎么解决这些异常的可以参照 <a href="D:\Blog\source_posts\java-异常处理.md">前面java异常处理的笔记</a>）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笑死，根本看不完&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>7.23java基础学习</title>
    <link href="http://example.com/2021/07/23/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/07/23/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-23T01:28:06.000Z</published>
    <updated>2021-07-27T03:06:47.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>滴滴滴</p></blockquote><a id="more"></a><h2 id="重载（overload）和重写（override）的区别"><a href="#重载（overload）和重写（override）的区别" class="headerlink" title="重载（overload）和重写（override）的区别"></a>重载（overload）和重写（override）的区别</h2><p><strong>重载</strong></p><p>重载就是同一个类中多个同名方法根据不同的的传参来执行不同的逻辑处理</p><p><strong>重写</strong></p><p>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</p><p><strong>具体介绍</strong>：</p><p>重载：发生在同一个类中，方法名必须相同，参数类型、个数、顺序不同，返回值类型和访问修饰符可以不同。</p><blockquote><p>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。如果<strong>编译器找不到匹配的参数</strong>，就会产生<strong>编译时错误</strong>，因为根本不存在匹配，或者没有一个比其他的更好。（这个过程被称为<strong>重载解析</strong>（overloading resolution））</p></blockquote><p>重写：</p><ul><li>如果父类方法访问修饰符为 private、final、static，则子类就不能重写该方法</li><li>构造方法无法被重写</li></ul><p><strong>方法的重写要遵循“两同两小一大”</strong></p><ul><li>“两同”即方法名相同、形参列表相同；</li><li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li><li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li></ul><blockquote><p>关于<strong>重写方法的返回值类型</strong></p><p>如果方法的返回类型是<strong>void和基本数据类型</strong>，则返回值重写时不可修改。但是如果方法的返回值是<strong>引用类型</strong>，重写时是可以返回该引用类型的子类的。</p></blockquote><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723093657151.png" alt="重载重写对比"></p><h2 id="用简单的语言来介绍一下封装、继承、多态"><a href="#用简单的语言来介绍一下封装、继承、多态" class="headerlink" title="用简单的语言来介绍一下封装、继承、多态"></a>用简单的语言来介绍一下封装、继承、多态</h2><p><strong>封装</strong>： 它将一个对象的属性私有化，同时提供一些可以供外界访问的属性的方法。也就是说用户是无需知道对象内部的细节，但可以通过该对象对外的提供的接口来访问该对象。</p><p><strong>继承</strong>：继承是使用已存在的类作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><blockquote><p>“但不能选择性地继承父类”:</p><p>即子类一旦与某个类发生继承关系.<br>这个子类必须继承它的父类的所<strong>有数据成员和方法</strong>,不能说只拿自己所需要的一部分属性和方法继承下来</p></blockquote><p><strong>多态</strong>：</p><p>（未搞懂？？今天有精力了找个时间再看一下）</p><h2 id="对String类对象以及String对象不可变的解释"><a href="#对String类对象以及String对象不可变的解释" class="headerlink" title="对String类对象以及String对象不可变的解释"></a>对String类对象以及String对象不可变的解释</h2><p>详细参考<a href="https://www.cnblogs.com/leskang/p/6110631.html#autoid-0-0-0">这篇文章</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">    <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>我们可以看到，在String类的源码中，类中定义的变量都是private的，且没有定义setter方法，所以在String类的外部无法修改String。也就是说这些变量一旦初始化就不能修改， 并且在String类的外部不能访问。</p><blockquote><p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 ： <code>private final byte[] value</code></p></blockquote><h3 id="关于String类的对象的一些解释："><a href="#关于String类的对象的一些解释：" class="headerlink" title="关于String类的对象的一些解释："></a><strong>关于String类的对象的一些解释：</strong></h3><p><strong>对象是如何存储的？</strong></p><p>我们知道，在jdk8中，使用value数组存储，它也只是一个引用，它指向一个真正的数组对象。其实执行了String s = “ABCabc”; 这句代码之后，真正的内存布局应该是这样的</p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723112201366.png"></p><p><strong>String内部方法并没有改变对象</strong></p><p>这些方法包括substring， replace， replaceAll， toLowerCase等，但是他们都是在方法内部重新创建新的String对象，并且返回这个新的对象。</p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723113053762.png" alt="replace方法源码" style="zoom:50%;" /><p><strong>String对象真的不可变吗？</strong></p><p>(简单来说就是不改变value的指向，但是改变value指向对象的值)</p><p>从上文可知String的成员变量是private final 的，也就是初始化之后不可改变。那么在这几个成员中， value比较特殊，因为<strong>他是一个引用变量，而不是真正的对象</strong>。value是final修饰的，也就是说<strong>final不能再指向其他数组对象，那么我能改变value指向的数组吗</strong>？ 比如将数组中的某个位置上的字符变为下划线“_”。 至少在我们自己写的普通代码中不能够做到，因为我们根本不能够访问到这个value引用，更不能通过这个引用去修改数组。 那么用什么方式可以访问私有成员呢？ 没错，用<strong>反射</strong>， 可以反射出String对象中的value属性， 进而改变通过获得的value引用改变数组的结构。下面是实例代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//创建字符串&quot;Hello World&quot;， 并赋给引用s</span></span><br><span class="line">    String s = <span class="string">&quot;Hello World&quot;</span>; </span><br><span class="line">     </span><br><span class="line">    System.out.println(<span class="string">&quot;s = &quot;</span> + s); <span class="comment">//Hello World</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取String类中的value字段</span></span><br><span class="line">    Field valueFieldOfString = String.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//改变value属性的访问权限</span></span><br><span class="line">    valueFieldOfString.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取s对象上的value属性的值</span></span><br><span class="line">    <span class="keyword">char</span>[] value = (<span class="keyword">char</span>[]) valueFieldOfString.get(s);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//改变value所引用的数组中的第5个字符</span></span><br><span class="line">    value[<span class="number">5</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">     </span><br><span class="line">    System.out.println(<span class="string">&quot;s = &quot;</span> + s);  <span class="comment">//Hello_World</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为： s = Hello World</p><p>s = Hello_World</p><h2 id="String-、StringBuffer、StringBuilder-三者区别？"><a href="#String-、StringBuffer、StringBuilder-三者区别？" class="headerlink" title="String 、StringBuffer、StringBuilder 三者区别？"></a>String 、StringBuffer、StringBuilder 三者区别？</h2><p><strong>可变性：</strong></p><p>String对象不可变，理由见上</p><p>StringBuffer 和 StringBuilder 可变，他们都继承于 AbstractStringBuilder 类，调用的是父类的构造方法，虽然父类的构造方法也是用 <code>char[] value</code>保存字符串的，但是没有用 final 来修饰，因此是可变的。</p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723114338124.png" style="zoom:50%;" /><p><strong>线程安全性：</strong></p><p>String 、StringBuilder 类是<strong>线程安全</strong>的  ，前者是不可变的相当于常量，后者对方法加了同步锁（在方法前面加了Synchronized修饰符）或者对调用的方法加了同步锁，所以是线程安全的</p><p>StringBuffer是<strong>线程不安全</strong>的 ，没有加同步锁</p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723115142680.png" alt="StringBuffer类中append方法是线程安全的"></p><p><strong>性能：</strong></p><p>每次对String类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String对象。</p><p>StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。</p><p>相同情况下使用StringBuilder相比使用StringBuffer仅能获得10%~15%左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>总结：</strong><br>1、操作<strong>少量的数据</strong>：适用String<br>2、<strong>单线程操作</strong>字符串缓冲区下操作大量数据：适用StringBuilder<br>3、<strong>多线程操作</strong>字符串缓冲区下操作大量数据：适用StringBuffer</p><h2 id="自动装箱和拆箱机制"><a href="#自动装箱和拆箱机制" class="headerlink" title="自动装箱和拆箱机制"></a>自动装箱和拆箱机制</h2><p>（详细请看<a href="https://www.cnblogs.com/dolphin0520/p/3780005.html">自动装箱和拆箱机制</a>，里面的面试题很有意思。）</p><p><strong>装箱</strong>就是 自动将基本数据类型转换为包装器类型；</p><p><strong>拆箱</strong>就是 自动将包装器类型转换为基本数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>; <span class="comment">//装箱 ，将基本数据类型转换为包装类</span></span><br><span class="line"><span class="keyword">int</span> n = i;  <span class="comment">//拆箱  ， 将包装类转换为基本数据类型</span></span><br></pre></td></tr></table></figure><p><strong>装箱和拆箱的过程是如何实现的呢？</strong></p><p>装箱过程是通过调用包装器的 valueOf 方法实现的</p><p>而拆箱过程是通过调用包装器的 xxxValue 方法实现的。（xxx代表对应的基本数据类型，比如 intValue）。</p><p><strong>有了基本数据类型为什么还要使用包装类型？</strong></p><blockquote><p>我们知道Java是一个面向对象的编程语言，<strong>基本类型并不具有对象的性质</strong>，为了让基本类型也具有对象的特征，就出现了包装类型（如我们在使用集合类型Collection时就一定要使用包装类型而非基本类型），<strong>它相当于将基本类型“包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作</strong>。</p><p>另外，当需要往ArrayList，HashMap中放东西时，像int，double这种基本类型是放不进去的，因为容器都是装object的，这是就需要这些基本类型的包装器类了。</p></blockquote><p><strong>Integer、new Integer() 和 int 的概念与区别?</strong></p><p>1、Integer 是 int 的包装类，int 则是 java 的一种基本数据类型</p><p>2、Integer 变量必须实例化后才能使用，而int变量不需要</p><p>3、Integer 实际是对象的引用，当new一个 Integer时，实际上是生成一个指针指向此对象；而 int 则是直接存储数据值</p><p>4、Integer的默认值是null，int的默认值是0</p><p><strong>这三种方式的比较：</strong></p><p><strong>1、两个 new Integer() 变量比较 ，永远是 false</strong></p><p>因为new生成的是两个对象，其内存地址不同</p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723151052666.png"></p><p><strong>2、两个Integer 变量比较，如果两个变量的值在区间-128到127 之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为 false 。</strong></p><p>java对于**-128到127<strong>之间的数，会进行缓存。（可以参照包装类的 **valueOf</strong> 函数）</p><p>所以 Integer i = 127 时，会将127进行<strong>缓存</strong>，下次再写Integer j = 127时，就会<strong>直接从缓存中取</strong>，就不会new了。</p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723151148396.png"></p><p><strong>3、两个int比较，就是数值大小的比较</strong></p><p><strong>4、Integer变量 和 new Integer() 变量比较 ，永远为 false。</strong></p><p>因为 Integer变量 指向的是 java 常量池 中的对象，而 new Integer() 的变量指向 堆中 新建的对象，两者在<strong>内存中的地址不同</strong></p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723151331623.png"></p><p><strong>5、int 变量 与 Integer、 new Integer() 比较时，只要两个的值是相等，则为true</strong></p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723151743265.png"></p><p>测试如下：</p><p><img src="/images/7-23java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20210723151948957.png" alt="三种方法对比示例"></p><p>详细参考文章<a href="https://cloud.tencent.com/developer/article/1493262">Integer、new Integer() 和 int 的概念与区别</a></p><h2 id="在-Java-中定义一个不做事且没有参数的构造方法的作用？"><a href="#在-Java-中定义一个不做事且没有参数的构造方法的作用？" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法的作用？"></a>在 Java 中定义一个不做事且没有参数的构造方法的作用？</h2><p>即父类中定义了有参数的构造方法，且在子类的构造方法中没有用super（），编译会报错，因为Java程序在父类中找不到没有参数的构造方法可供执行</p><p>Java程序在执行子类的构造方法之前，如果<strong>没有用super（）来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。</strong></p><p><strong>解决办法</strong>：在父类里加上一个不做事且没有参数的构造方法。</p><h2 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h2><p><strong>抽象类：</strong></p><p>首先来了解一下抽象方法，抽象方法是一种特殊的方法：它<strong>只有声明</strong>，而<strong>没有具体的实现</strong>。抽象方法的声明格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>抽象类格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>1.<strong>成员变量</strong>：接口中的成员变量只能是<code>public static final</code>，且必须被当场初始化（联想一下类中的final 变量，也是一样必须被当场初始化），抽象类可以是各种类型；</p><p>2.<strong>方法：</strong>接口中的方法默认是public abstract（抽象方法）的，这时候不能被实现（抽象方法和被实现是相矛盾的），也可以是 public static 的静态方法，若把静态方法放入接口中，必须要有实现，否则会报错。</p><p>抽象类中可以放入抽象方法，如<code>abstract void fun();</code> 也可以对放入非抽象方法并实现，方法修饰符可以是各种类型（private除外，因为抽象方法就是为了被重写，用个private继承后的对象又不能使用就没意义）；</p><p><strong>3.继承与实现：</strong>一个类只能继承一个抽象类（类的单继承性），而一个类却可以实现多个接口；</p><p><strong>4.设计层面</strong>：接口是对行为的抽象，对于某些类的<strong>行为特征</strong>，可以使用接口设计；而抽象类是对类的抽象，是一种<strong>模板设计</strong>，对于一些同类特征可以设计为一个模板抽象类，供子类继承。</p><blockquote><p>写在类中的话，子类可以拥有父类的所有方法，但是有时候我们并不需要所有的方法，这时候我们可以把某个方法写入接口，通过实现接口而获得这个行为特征。</p></blockquote><h2 id="成员变量与局部变量的区别有哪些？"><a href="#成员变量与局部变量的区别有哪些？" class="headerlink" title="成员变量与局部变量的区别有哪些？"></a>成员变量与局部变量的区别有哪些？</h2><p><strong>成员变量</strong>：把<strong>类内、方法体外</strong>定义的变量称为成员变量。<br>Java中的成员变量分为两种：</p><p>一是<strong>没有static</strong>修饰的，称为<strong>实例变量</strong>。</p><p>二是<strong>有static</strong>修饰的，称为<strong>类变量</strong>（<strong>静态变量</strong>）。</p><p><strong>1.从语法形式上来看</strong>，成员变量是属于类的，而局部变量是在方法体是定义的。</p><p>成员变量可以被public，private，static等<strong>修饰符所修饰</strong>，而局部变量不能被访问控制修饰符及static 所修饰；但是，<strong>成员变量和局部变量都能被final所修饰。</strong></p><p><strong>2.从变量在内存中的存储方式来看</strong>，</p><p>实例变量存储在堆内存，类变量存储在方法区</p><p>局部变量为基本数据类型，存储在占内存；局部变量为引用型，存储在堆内存</p><p><strong>3.从对象在内存中的生存时间来看</strong>，</p><p>类变量生命周期最长，随着类的消失而消失。</p><p>实例变量生命周期随着对象的消失而消失。</p><p>而局部变量随着方法的调用而自动消失。</p><p><strong>4</strong>.成员变量如果没有被赋初值：会赋予默认值（一种情况例外：<strong>被final修饰的成员变量也必须显式地赋值</strong>），而局部变量则不会自动赋值，若不赋值就使用则会编译失败。（可以参见7.22学习）</p><p><strong>引用类型总是被分配到“堆”上。不论是成员变量还是局部</strong><br><strong>基础类型总是分配到它声明的地方：成员变量在堆内存里，局部变量在栈内存里</strong></p><blockquote><p><strong>堆、栈、方法区的介绍</strong></p><p>堆（Heap）：</p><p>此内存区域的唯一目的就是存放实例对象，几乎所有的实例对象都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的<strong>对象实例以及数组</strong>都要在堆上分配</p><p>栈（Stack）：</p><p>通常说的栈是指虚拟机栈。虚拟机栈用于<strong>存储局部变量表</strong>等。局部变量表存放了编译期可知长度的各种<strong>基本数据类型（8大基本数据类型）、对象引用</strong>（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</p><p>方法区（Method Area）：</p><p>用于存储已被虚拟机加载的<strong>类信息、常量、静态变量</strong>、即使编译器编译后的代码等数据</p></blockquote><h2 id="一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？"></a>一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？</h2><p>主要作用是完成对类<strong>对象的初始化工作</strong>。可以执行。因为一个类即使没有声明构造方法也会有<strong>默认的不带参数的构造方法。</strong></p><h2 id="构造方法有哪些特性？"><a href="#构造方法有哪些特性？" class="headerlink" title="构造方法有哪些特性？"></a>构造方法有哪些特性？</h2><p>1.名字与类名相同。<br>2.没有返回值，但不能用void声明构造函数。<br>3.生成类的对象时自动执行，无需调用。</p><h2 id="静态方法和实例方法有何不同？"><a href="#静态方法和实例方法有何不同？" class="headerlink" title="静态方法和实例方法有何不同？"></a>静态方法和实例方法有何不同？</h2><p>静态方法：被static修饰的方法</p><p>实例方法：没有被static修饰的方法</p><p>1、在外部调用静态方法时，可以使用”<strong>类名.方法名</strong>“的方式，也可以使用”<strong>对象名.方法名</strong>“的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p><p>2、静态方法在访问本类的成员时，<strong>只允许访问静态成员（即静态成员变量和静态方法）</strong>，而不允许访问实例成员变量和实例方法；实例方法则无此限制,它可以访问静态成员也可以访问非静态成员。</p><blockquote><p><strong>为什么说静态方法无法调用非静态的成员？</strong></p><p>静态方法是属于类的，动态方法属于实例对象，静态方法会随着类的加载而被加载</p><p>在一个类的静态成员中去访问非静态成员之所以会出错是因为在类的非静态成员不存在的时候静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。</p><p><strong>需要联系JVM的类加载过程来解释</strong>，先暂且留在这里</p></blockquote><h2 id="对象的相等与指向他们的引用相等，两者有什么不同？"><a href="#对象的相等与指向他们的引用相等，两者有什么不同？" class="headerlink" title="对象的相等与指向他们的引用相等，两者有什么不同？"></a>对象的相等与指向他们的引用相等，两者有什么不同？</h2><p>对象的相等，比的是内存中<strong>存放的内容是否相等</strong>。而引用相等，比较的是他们<strong>指向的内存地址是否相等</strong>。</p><h2 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals 的区别"></a>== 和 equals 的区别</h2><p><strong>==</strong> ： 它的作用是判断两个对象的地址是否相等，即判断两个对象是不是同一个对象（基本数据类型 == 比较的是<strong>值</strong>，引用数据类型 == 比较的是<strong>内存地址</strong>）。</p><p><strong>equals()</strong> ：: 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有重写 equals（）方法。等价于通过 “==” 比较这两个对象，即比较的是<strong>内存地址</strong></li><li>情况2：类重写了equals（）方法。比较两个<strong>对象的内容</strong>是否相等</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String a = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">    String b = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">    String aa = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">    String bb = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">    <span class="keyword">if</span> (aa == bb) <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa==bb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="comment">// false，非同一对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a==b&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (a.equals(b)) <span class="comment">// true ，String类重写了equals方法，比较两个对象的内容是否相等</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aEQb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>)  <span class="comment">// true </span></span><br><span class="line">        System.out.println(<span class="string">&quot;true&quot;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p> <strong>java中有哪些常见的类重写了equals方法？</strong></p><p> <strong>String</strong>、<strong>Date</strong>、<strong>File</strong>、<strong>包装类</strong>等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</p></blockquote><h2 id="hashCode-与-equals-待解决"><a href="#hashCode-与-equals-待解决" class="headerlink" title="hashCode 与 equals(待解决)"></a>hashCode 与 equals(待解决)</h2><p>面试官可能会问你：”你重写过 hashcode() 和 equals() 么，为什么重写 equals() 时必须重写 hashCode() 方法？”</p><p><strong>1.为什么要重写equals方法？</strong></p><p>如上，equals不重写比较的是两个对象的地址，但有时候我们想比较两个对象的内容是否相等，这时候我们就重写了equals方法。</p><p>hashCode()函数：hashCode的作用是获取哈希码、也称为散列码，它是jdk根据对象的地址算出来的int类型的数值 。</p><p><strong>元素的哈希值相同，内容不一定相同</strong></p><p><strong>元素的内容相同，哈希值一定相同。</strong></p><p><strong>2.为什么不直接equals比较值是否相同，而先要计算hashCode?</strong><br>答：hash算法是二进制算法，计算式本质是二进制，所以hash算法速度很快，效率高。如若hashCode不同则可直接存储不用equlas比较。所以先计算hashCode大大加快了存储速率。</p><p>hashCode()既然效率这么高为什么还要equals()呢？</p><p>因为hashCode()并不是完全可靠，有时候不同的对象他们生成的hashcode也会一样（生成hash值得公式可能存在的问题），所以hashCode()只能说是大部分时候可靠，并不是绝对可靠，所以我们可以得出（PS：以下两条结论是重点，很多人面试的时候都说不出来）：</p><p>equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的。</p><p>hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的。</p><p>参见下面的链接</p><p><a href="https://xw.qq.com/partner/hwbrowser/20190705A048GW/20190705A048GW00?ADTAG=hwb&amp;pgv_ref=hwb&amp;appid=hwbrowser&amp;ctype=news">https://xw.qq.com/partner/hwbrowser/20190705A048GW/20190705A048GW00?ADTAG=hwb&amp;pgv_ref=hwb&amp;appid=hwbrowser&amp;ctype=news</a></p><p>3.为什么重写了equals方法后，还要重写hashCode方法？（重写equals方法后不就已经可以判断两个对象的内容是否一样了吗？重写hashCode方法是否多余？）</p><p>参照下面文章</p><p><a href="https://www.cnblogs.com/yuxiaole/p/9570850.html">Java 如何重写对象的 equals 方法和 hashCode 方法</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;滴滴滴&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>三种常见字符编码简介: ASCII、Unicode和UTF-8</title>
    <link href="http://example.com/2021/07/22/%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AE%80%E4%BB%8B-ASCII%E3%80%81Unicode%E5%92%8CUTF-8/"/>
    <id>http://example.com/2021/07/22/%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AE%80%E4%BB%8B-ASCII%E3%80%81Unicode%E5%92%8CUTF-8/</id>
    <published>2021-07-22T13:15:06.000Z</published>
    <updated>2021-07-22T13:38:58.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于ASCII、Unicode和UTF-8 三种字符编码的发展历程和简要介绍</p></blockquote><a id="more"></a><h2 id="什么是字符编码？"><a href="#什么是字符编码？" class="headerlink" title="什么是字符编码？"></a>什么是字符编码？</h2><pre><code>    计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte）。</code></pre><p>​        所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p><h2 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h2><p>　　由于计算机是美国人发明的，因此，最早只有<strong>128个符号</strong>被编码到计算机里，也就是<strong>大小写英文字母、数字和一些符号</strong>，这个编码表被称为<code>ASCII</code>编码，比如大写字母 <code>A </code>的编码是<code>65</code>，小写字母 <code>z </code>的编码是<code>122</code>。</p><p>​        这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的<strong>后面7位</strong>，最前面的一位统一规定为0。</p><p>　　但是<strong>要处理中文显然一个字节是不够的，至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p><p>​        <strong>缺点</strong> : </p><p>​        1.在不同国家，这256个符号的编码方式表示不同字母，比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。</p><p>​        2.汉字就多达10万左右。一个字节只能表示256种符号，位数肯定是不够的，就必须使用多个字节表达一个符号。</p><h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><p>​        因此，我们为了克服ASCII码的缺点。</p><p>　　可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个<strong>独一无二</strong>的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>​        Unicode标准也在不断发展，但最常用的是用<strong>两个字节</strong>表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p><p>​        <strong>缺点：</strong></p><p>​        如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要<strong>多一倍的存储空间</strong>，在存储和传输上就十分不划算。</p><h2 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h2><p>　　因此，又出现了把Unicode编码转化为“<strong>可变长编码”的UTF-8编码</strong>。<strong>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节</strong>，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能<strong>节省空间</strong>：</p><table><thead><tr><th align="left">字符</th><th align="left">ASCII</th><th align="left">Unicode</th><th align="left">UTF-8</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">01000001</td><td align="left">00000000 01000001</td><td align="left">01000001</td></tr><tr><td align="left">中</td><td align="left">-</td><td align="left">01001110 00101101</td><td align="left">11100100 10111000 10101101</td></tr></tbody></table><p>　　从上面的表格可以发现UTF-8编码一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><p>　　<strong>强调一下，unicode是一种编码方式，和ascii是同一个概念，而UTF-8，UTF-16等是一种存储方式，在存储和传输上节约空间、提高性能的一种编码形式。</strong></p><h2 id="UTF-8-和-Unicode-区别"><a href="#UTF-8-和-Unicode-区别" class="headerlink" title="UTF-8 和 Unicode 区别"></a>UTF-8 和 Unicode 区别</h2><p>​        <strong>utf8是对unicode字符集进行编码的一种编码方式</strong></p><p>　　在计算机<strong>内存中</strong>，统一使用<strong>Unicode编码</strong>，当需要<strong>保存到硬盘或者需要传输</strong>的时候，就转换为<strong>UTF-8编码</strong>。</p><p>　　用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;对于ASCII、Unicode和UTF-8 三种字符编码的发展历程和简要介绍&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>7.22java基础</title>
    <link href="http://example.com/2021/07/22/7-22java%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/22/7-22java%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-22T10:55:01.000Z</published>
    <updated>2021-07-23T03:00:58.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下面是面试系列的总结，今天的是java基础知识，不求一下子全部记住，希望能理解，</p><p>基于github  javaGuide</p></blockquote><a id="more"></a><h2 id="面向过程与面向对象的区别？"><a href="#面向过程与面向对象的区别？" class="headerlink" title="面向过程与面向对象的区别？"></a>面向过程与面向对象的区别？</h2><table><thead><tr><th align="center"></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td align="center">面向过程</td><td>性能高</td><td>相比，没有面向对象易维护、易复用、易扩展</td></tr><tr><td align="center">面向对象</td><td>易维护、易复用、易扩展，因为向对象有封装、继承、多态性的特 性，所以可以设计出低耦合的系统</td><td>性能比面向对象低</td></tr></tbody></table><h2 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h2><p><img src="/images/7-22java%E5%9F%BA%E7%A1%80/image-20210722194350127.png"></p><p>例如 ： 有 hello.java 文件，在cmd中</p><blockquote><p>javac hello.java  生成 hello.class文件</p><p>java hello            对字节码文件解释和运行（<strong>注意</strong>： 不是 java hello.class）</p></blockquote><h2 id="java和C-的区别"><a href="#java和C-的区别" class="headerlink" title="java和C++的区别"></a>java和C++的区别</h2><ul><li>都是面向对象，都有继承、封装、多态性</li><li>java不提供指针，访问内存更安全（Java中不可能直接操作对象本身，所有的对象都由一个引用指向，<strong>必须通过这个引用才能访问对象本身</strong>，包括获取成员变量的值，改变对象的成员变量，调用对象的方法等）</li><li>java是单继承（一次只能继承一个类，不能同时继承多个类），C++是多继承的，但是java的接口可以多继承</li><li>java内存自动管理机制</li></ul><h2 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别"></a>字符型常量和字符串常量的区别</h2><ul><li>形式上</li><li>含义上</li><li>占用内存大小上</li></ul><p><strong>java中的8种基本数据类型：</strong> </p><blockquote><p>1字节 = 8位</p><p>关于它们的包装类， 除了 char &lt;=&gt; Character  , int &lt;=&gt; Integer , 其他的都是首字母改成大写</p><p>关于取值范围，都是 -2^（位数 - 1） ~ 2^（位数 - 1）-1  ，</p><p>比如：byte 的取值范围：-128～127（-2的7次方到2的7次方-1）</p><p>short 的取值范围：-32768～32767（-2的15次方到2的15次方-1）</p><p>并且，我们还可以调用包装类.MAX_VALUE 来查看最大值  ，如：Integer.MAX_VALUE</p></blockquote><p><strong>各种字符</strong></p><blockquote><p>Unicode可同时包含65536个字符，ASCII/ANSI只包含255个字符，实际上是Unicode的一个子集。Unicode字符通常用十六进制编码方案表示，范围在’\u0000’到’\uFFFF’之间。\u0000到\u00FF表示ASCII/ANSI字符</p></blockquote><p><strong>1、整型</strong></p><p>byte（1字节） 、short（2字节） 、int （4字节）、long（8字节）</p><p><strong>2、浮点型</strong></p><p>float （4字节）、 double（8字节）</p><p><strong>3、字符型</strong></p><p>char（2字节）    char 类型是一个单一的16位的<strong>Unicode</strong>字符 ，unicode 可见 <a href="D:\Blog\source_posts\三种常见字符编码简介-ASCII、Unicode和UTF-8.md">ASCII、Unicode 和 UTF-8 介绍</a></p><p><strong>4、布尔型</strong></p><p>boolean</p><p><img src="/images/7-22java%E5%9F%BA%E7%A1%80/image-20210722200839365.png"></p><p><img src="/images/7-22java%E5%9F%BA%E7%A1%80/image-20210722203530543.png"></p><h2 id="类的成员变量和局部变量初始化的问题"><a href="#类的成员变量和局部变量初始化的问题" class="headerlink" title="类的成员变量和局部变量初始化的问题"></a>类的成员变量和局部变量初始化的问题</h2><p><strong>对于类的成员变量</strong></p><p>不管程序有没有显示的初始化，Java  虚拟机都会先自动给它初始化为默认值</p><p><strong>对于局部变量</strong></p><p>局部变量声明以后，Java 虚拟机<strong>不会</strong>自动的为它初始化为默认值。</p><p>因此对于局部变量，<strong>必须先经过显示的初始化</strong>，才能使用它。</p><p>如果编译器确认一个局部变量在使用之前可能没有被初始化，编译器将<strong>报错</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;下面是面试系列的总结，今天的是java基础知识，不求一下子全部记住，希望能理解，&lt;/p&gt;
&lt;p&gt;基于github  javaGuide&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面试学习系列" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>树的深度和高度辨析</title>
    <link href="http://example.com/2021/07/19/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6%E8%BE%A8%E6%9E%90/"/>
    <id>http://example.com/2021/07/19/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6%E8%BE%A8%E6%9E%90/</id>
    <published>2021-07-19T05:40:51.000Z</published>
    <updated>2021-07-19T05:52:20.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>树的深度和高度</p></blockquote><a id="more"></a><h2 id="树的高度和深度"><a href="#树的高度和深度" class="headerlink" title="树的高度和深度"></a>树的高度和深度</h2><p>申明：<strong>本文高度，深度基数为1</strong>，但是在《数据结构与算法分析:java语言描述》这本书上，高度，深度的基数为0；两种记法都没有错，都可以用来描述树的性质，只需要标注（&gt;0）或者(&gt;=0)做一个区分和解释即可</p><p><strong>节点n的高度</strong> : n节点到叶子节点所有路径上包含节点个数的最大值。叶子节点的高度为1，往上节点的高度依次递增。</p><p><strong>节点n的深度</strong> : 从根节点到节点n唯一的路径的长，根节点深度为1</p><p><strong>层数</strong>：根节点为第一层，往下一次递增。</p><p>树中节点的最大层数称之为树的深度或者高度，所以在<strong>基数为1时树的深度=树的高度=最大层数</strong></p><p>但是节点的深度和高度并没有必然的关系</p><p><strong>节点的度</strong>：节点拥有的子树的个数，度为0的节点称之为叶子节点</p><ul><li><strong>树的度</strong>：是树内所有节点度的最大值</li><li><strong>树的深度</strong>：树内所有节点深度的最大值，也就是所有叶子节点深度的最大值，也就是<strong>树的层数</strong></li><li><strong>树的高度</strong>：树内所有节点高度的最大值，也就是根节点的高度，也就是<strong>数的层数</strong></li></ul><img src="/images/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6%E8%BE%A8%E6%9E%90/image-20210719134207579.png" style="zoom:67%;" /><p>如图：这棵树深度和高度都为3。根节点深度为1，高度为3。</p><p>相当于  深度是从上往下数，高度是从下往上数。</p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p><img src="/images/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6%E8%BE%A8%E6%9E%90/v2-d60beaed02a5adf399d960368d6e1288_r.jpg"><br><img src="/images/%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6%E8%BE%A8%E6%9E%90/v2-2891440582c8f79cb594f503f3721287_r.jpg"></p><p>参考资料：</p><p>1.<a href="https://zhuanlan.zhihu.com/p/29867652">树的基本概念</a></p><p>2.<a href="https://www.cnblogs.com/minghaiJ/p/10752243.html">数的高度、深度、层数</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;树的深度和高度&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>实现Comparator接口来排序</title>
    <link href="http://example.com/2021/07/14/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/07/14/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2021-07-14T14:11:34.000Z</published>
    <updated>2021-07-14T14:47:11.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对任意类型集合对象进行整体排序，排序时将此接口的实现传递给Collections.sort方法或者Arrays.sort方法排序.主要是实现Comparator接口中的 int compare(T o1, T o2)方法。</p></blockquote><a id="more"></a><p>要弄清什么时候是升序什么时候是降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>  o1 - o2 ;  升序</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  o2 - o1; 降序 </span><br></pre></td></tr></table></figure><p>或者,下面这段代码同样表示升序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(o1 - o2 &lt; <span class="number">0</span>)  <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(o2 - o1 &lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="单一条件排序"><a href="#单一条件排序" class="headerlink" title="单一条件排序"></a>单一条件排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">60</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.对学生集合按年龄进行排序</span></span><br><span class="line">Collections.sort(stus, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 升序  第一个参数减去第二个参数，返回值为负数</span></span><br><span class="line"><span class="comment">//return s1.getAge()-s2.getAge();</span></span><br><span class="line"><span class="keyword">return</span> s1.getAge().compareTo(s2.getAge());</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="comment">// return s2.getAge()-s1.getAge();</span></span><br><span class="line"><span class="comment">// return s2.getAge().compareTo(s1.getAge());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对学生集合按姓名首字母排序</span></span><br><span class="line">Comparator comparator = Collator.getInstance(Locale.CHINA);</span><br><span class="line">Collections.sort(stus, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comparator.compare(s1.getName(), s2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>我们也可以采用lambda表达式来简化代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">60</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对学生集合按年龄进行排序</span></span><br><span class="line"><span class="comment">//(s1,s2)相当于形参，且不用写出类型，java会根据程序自动推断</span></span><br><span class="line"><span class="comment">// 返回值就是 ‘-&gt;’ 后面的表达式</span></span><br><span class="line">Collections.sort(stus, (s1,s2)-&gt;(s1.getAge()-s2.getAge()));</span><br></pre></td></tr></table></figure><h2 id="多条件排序"><a href="#多条件排序" class="headerlink" title="多条件排序"></a>多条件排序</h2><p>先按照年龄升序排序，若年龄相同则比较学号按学号升序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;Student&gt;()&#123;</span><br><span class="line">&#123;</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, <span class="number">1</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">2</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">40</span>, <span class="number">3</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;赵六&quot;</span>, <span class="number">30</span>, <span class="number">4</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;陈七&quot;</span>, <span class="number">40</span>, <span class="number">5</span>));</span><br><span class="line">add(<span class="keyword">new</span> Student(<span class="string">&quot;周八&quot;</span>, <span class="number">20</span>, <span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Collections.sort(stus,<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="comment">// 首选按年龄升序排序</span></span><br><span class="line">flag = s1.getAge()-s2.getAge();</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">// 再按学号升序排序</span></span><br><span class="line">flag = s1.getNum()-s2.getNum();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;年龄       学号       姓名  &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Student s : stus)&#123;</span><br><span class="line">System.out.println(s.getAge()+<span class="string">&quot;   &quot;</span>+s.getNum()+<span class="string">&quot;   &quot;</span>+s.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/%E5%AE%9E%E7%8E%B0Comparator%E6%8E%A5%E5%8F%A3%E6%9D%A5%E6%8E%92%E5%BA%8F/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjIyMTE0MzM4ODk4" alt="这里写图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;对任意类型集合对象进行整体排序，排序时将此接口的实现传递给Collections.sort方法或者Arrays.sort方法排序.主要是实现Comparator接口中的 int compare(T o1, T o2)方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>匿名内部类和lambda表达式</title>
    <link href="http://example.com/2021/07/14/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/07/14/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-07-14T12:18:33.000Z</published>
    <updated>2021-07-25T12:00:27.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用lambda表达式可以简化匿名内部类的写法</p></blockquote><a id="more"></a><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li>匿名内部类必须继承一个父类，或实现一个接口，但最多只能继承一个父类，或实现一个接口。</li><li>由于匿名内部类不能是抽象类，所以匿名内部类必须实现它的抽象父类或接口里包含的所有抽象方法。</li></ul><p><strong>什么时候会用到？</strong></p><p>当我们需要一个类的对象（一般这个类的对象作为参数传入一个函数中），只被用到一次，所以并不需要类名。</p><p>匿名内部类的两种实现方式：</p><p><strong>第一种</strong>，实现接口，重写方法</p><p><strong>第二种</strong>，继承父类，也可以重写方法</p><p>第一种 ，匿名类实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous_inner_class2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        inter i = <span class="keyword">new</span> inter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;   <span class="comment">//此时i是inter接口的一个实现对象</span></span><br><span class="line">        i.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种，匿名类继承父类</p><ul><li><p>当通过接口来创建匿名内部类时，匿名内部类不能显示创建构造器，因此匿名内部类里只有一个隐式的无参构造器，故new接口名后的括号里不能传入参数值。</p></li><li><p>如果通过继承父类来创建匿名内部类时，匿名内部类将拥有和父类相似的构造器，此处的相似指的是拥有相同的形参列表。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous_inner_class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        person p = <span class="keyword">new</span> person()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写父类方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p><strong>作用：</strong></p><p>lambda表达式， 是Java8中的一个新特性。可以理解为一个<strong>匿名函数。</strong></p><p>lambda表达式可以理解为将一个函数浓缩为一行代码，使代码更加简洁紧凑。</p><p><strong>注意：</strong></p><p>Lambda表达式只支持函数式接口  也就是只有一个抽象方法的接口</p><p><strong>lambda表达式语法</strong>：</p><p>(parameters) -&gt; statement;</p><p>或</p><p>(parameters) -&gt; {statements;}</p><p>参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parameters：参数， 可以指定或不指定参数类型， 当只有一个参数时可以不要圆括号</span><br><span class="line">statement：函数返回值，直接返回该值，无需大括号</span><br><span class="line">statements：函数体，当使用大括号时需要指明表达式返回的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lambda表达式实例：</span><br><span class="line"><span class="comment">// 无参，返回5</span></span><br><span class="line">() -&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 接收参数x，返回2*x</span></span><br><span class="line">x -&gt; <span class="number">2</span> * x;</span><br><span class="line"><span class="comment">// 接收参数x y, 返回x+y</span></span><br><span class="line">(x, y) -&gt; x + y;</span><br><span class="line"><span class="comment">// 指明接收参数类型</span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y;</span><br><span class="line"><span class="comment">// 接收字符串并打印，无返回值</span></span><br><span class="line">(String s) -&gt; System.out.print(s);</span><br><span class="line"><span class="comment">// 包括函数体</span></span><br><span class="line">(String s) -&gt; &#123;</span><br><span class="line"> System.out.print(s);</span><br><span class="line"> <span class="keyword">return</span> s; </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>示例一：用lambda表达式来替换匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            inter i = new inter() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void method() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;匿名内部类。&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;;   //此时i是inter接口的一个实现对象</span></span><br><span class="line"><span class="comment">//            i.method();</span></span><br><span class="line">        <span class="comment">//我们使用 lambda表达式实现上面匿名内部类的作用</span></span><br><span class="line">            inter i = () -&gt; System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            i.method();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">inter</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二：lambda表达式遍历集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">            list.forEach(n -&gt; System.out.println(n));   </span><br><span class="line">        <span class="comment">// list.forEach(System.out::println);   //这样写也是可行的</span></span><br><span class="line">        <span class="comment">//lambda表达式来遍历map</span></span><br><span class="line">        <span class="comment">//map.forEach((key, value) -&gt; &#123;</span></span><br><span class="line">            <span class="comment">//System.out.println(key);</span></span><br><span class="line">            <span class="comment">//System.out.println(value);</span></span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用lambda表达式可以简化匿名内部类的写法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>String类和Arrays工具类的常用方法</title>
    <link href="http://example.com/2021/07/14/String%E7%B1%BB%E5%92%8CArrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/07/14/String%E7%B1%BB%E5%92%8CArrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-14T07:26:16.000Z</published>
    <updated>2021-07-14T14:33:08.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java 的String类中我们常用到一些方法来处理String字符串    ， java.lang.String</p><p>Arrays工具类中我们常永道一些方法来处理数组  ,     java.util.Arrays</p></blockquote><a id="more"></a><h2 id="String-类中常用方法"><a href="#String-类中常用方法" class="headerlink" title="String 类中常用方法"></a>String 类中常用方法</h2><p>String类：</p><p>String类在java.lang包中，java使用String类创建一个字符串变量，字符串变量属于对象。String类对象创建后不能修改，<a href="http://www.runoob.com/java/java-stringbuffer.html">StringBuffer &amp; StringBuilder 类</a>。这时我们会问，为什么我们String变量赋值不就是改变了吗？其实不是的，赋值后将会生成新的对像来存放新的内容，原先的对象依旧在内存中，但是s不在指向它，那么这个对象就会成为垃圾内存，在某一个特定的时刻有Java虚拟机回收。 <a href="https://blog.csdn.net/suyu_yuan/article/details/51396972">详情解释请点击</a>  包含在一对双引号之间。</p><p>String字符串变量的创建：</p><p>声明：  　String 变量名;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　　　　　　　String str;</span><br></pre></td></tr></table></figure><p>声明并初始化：　　String 变量名=”初始值”;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str &#x3D; &quot;挨点博客&quot;;</span><br></pre></td></tr></table></figure><p><strong>String常用方法：</strong></p><p>1、<strong>int length();</strong>　　语法：字符串变量名.length();　　返回值为 int 类型。得到一个字符串的字符个数（中、英、空格、转义字符皆为字符，计入长度）</p><p>　　　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">&quot;挨点aidian \t\n&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> l = a.length();</span><br><span class="line">System.out.println(l);运行结果：<span class="number">11</span></span><br></pre></td></tr></table></figure><p>2、<strong>char charAt(值);</strong>　　语法 ：字符串名.charAt(值);　　返回值为 char 类型。从字符串中取出指定位置的字符 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　　　　String str=<span class="string">&quot;张三疯&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;指定字符为：&quot;</span> + c); </span><br><span class="line"></span><br><span class="line">运行结果：指定字符为：疯 </span><br></pre></td></tr></table></figure><p> 3、<strong>char toCharArray();</strong>　　语法 ：字符串名.toCharArray();　　返回值为 char 数组类型。将字符串变成一个字符数组 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;张三疯&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">2</span>);  </span><br><span class="line">System.out.println(<span class="string">&quot;指定字符为：&quot;</span> + c); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：指定字符为：疯</span><br></pre></td></tr></table></figure><p>4、<strong>int indexOf(“字符”)</strong>　　</p><p>语法 ：字符串名.indexOf(“字符”)；</p><p>字符串名.indexOf(“字符”,查找起始位置)；    查找一个指定的字符串是否存在，返回的是字符串的位置，<strong>如果不存在，则返回-1 。</strong> </p><p><strong>int lastIndexOf(“字符”)</strong> 得到指定内容最后一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;只为挨你近一点&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> a1 = str.indexOf(<span class="string">&quot;你&quot;</span>);<span class="comment">// 查找字符你的位置 </span></span><br><span class="line"><span class="keyword">int</span> a2 = str.indexOf(<span class="string">&quot;为&quot;</span>, <span class="number">2</span>);<span class="comment">// 查找为的位置，从第3个开始查找</span></span><br><span class="line"><span class="keyword">int</span> a3 = str.lastIndexOf(<span class="string">&quot;点&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;你的位置为:&quot;</span> + a1); </span><br><span class="line">System.out.println(<span class="string">&quot;为的位置为:&quot;</span> + a2);</span><br><span class="line">System.out.println(<span class="string">&quot;点最后出现的位置为:&quot;</span> + a3);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">你的位置为:<span class="number">3</span></span><br><span class="line">为的位置为:-<span class="number">1</span></span><br><span class="line">点最后出现的位置为:<span class="number">7</span></span><br></pre></td></tr></table></figure><p>5、**toUpperCase()； toLowerCase()**；字符串大小写的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;将字符串转大写为：&quot;</span> + str.toUpperCase());</span><br><span class="line">System.out.println(<span class="string">&quot;将字符串转换成小写为：&quot;</span> + str.toUpperCase().toLowerCase());</span><br><span class="line"></span><br><span class="line">运算结果：</span><br><span class="line">将字符串转大写为：HELLO WORLD</span><br><span class="line">将字符串转换成小写为：hello world</span><br></pre></td></tr></table></figure><p>6、<strong>String[] split(“字符”)</strong>　　根据给定的正则表达式的匹配来拆分此字符串。形成一个新的String数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;boo:and:foo&quot;</span>;</span><br><span class="line">String[] arr1 = str.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">String[] arr2 = str.split(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">运行结果：　　</span><br><span class="line">arr1　　<span class="comment">//&#123; &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; &#125;　　</span></span><br><span class="line">arr2　　<span class="comment">//&#123; &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>7、<strong>boolean equals(Object anObject)</strong>　　语法 ：字符串变量名.wquals(字符串变量名);　　返回值为布尔类型。所以这里用 if 演示。比较两个字符串是否相等，返回布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str1=<span class="string">&quot;world&quot;</span>;  </span><br><span class="line"><span class="keyword">if</span>(str.equals(str1)) </span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;这俩字符串值相等&quot;</span>); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这俩字符串值不相等&quot;</span>);  </span><br><span class="line">&#125;　　　　　　</span><br><span class="line"></span><br><span class="line">运行结果：这俩字符串值不相等</span><br></pre></td></tr></table></figure><p>　　　　　　　　　 </p><p>8、<strong>trim();</strong>　　去掉字符串左右空格　　**replace(char oldChar,char newChar);**新字符替换旧字符，也可以达到去空格的效果一种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;       挨点博客         &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;去掉左右空格后:&quot;</span> + str.trim()); </span><br><span class="line"></span><br><span class="line">运行结果：去掉左右空格后:挨点博客</span><br></pre></td></tr></table></figure><p>　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第二种：</span><br><span class="line">String str = <span class="string">&quot;       挨点博客         &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;去掉左右空格后:&quot;</span> + str.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)); </span><br><span class="line"></span><br><span class="line">运行结果：去掉左右空格后:挨点博客</span><br></pre></td></tr></table></figure><p>9、<strong>String substring(int beginIndex,int endIndex)</strong>　　截取子字符串，包括begin，不包括endindex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;123挨点博客456&quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;截取后的字符为：&quot;</span> + str.substring(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">// 截取0-3个位置的内容   不含3 </span></span><br><span class="line">System.out.println(<span class="string">&quot;截取后字符为：&quot;</span> + str.substring(<span class="number">2</span>));<span class="comment">// 从第3个位置开始截取    含2　　</span></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">截取后的字符为：<span class="number">123</span></span><br><span class="line">截取后字符为：<span class="number">3</span>挨点博客<span class="number">456</span></span><br></pre></td></tr></table></figure><p>　　　　</p><p>10、<strong>boolean equalsIgnoreCase(String)</strong> 忽略大小写的比较两个字符串的值是否一模一样，返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.equalsIgnoreCase(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个字符串相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个字符串不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：　两个字符串相等</span><br></pre></td></tr></table></figure><p>　　　</p><p>11、<strong>boolean contains(String)</strong> 判断一个字符串里面是否包含指定的内容，返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;WO&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.contains(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在WO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在WO</span><br></pre></td></tr></table></figure><p>　　</p><p>12、<strong>boolean startsWith(String)</strong>　　测试此字符串是否以指定的前缀开始。返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;HELLO WORLd&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;HE&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.startsWith(str1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在HE前缀开头&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在HE前缀开头</span><br></pre></td></tr></table></figure><p>　　</p><p>13、<strong>boolean endsWith(String)</strong>　　测试此字符串是否以指定的后缀结束。返回一个布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;挨点博客&quot;</span>;</span><br><span class="line">String str1 = <span class="string">&quot;博客&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(str.endsWith(str1))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;str内容中存在\&#x27;博客\&#x27;后缀结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉没找着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">str内容中存在<span class="string">&#x27;博客&#x27;</span>后缀结束</span><br></pre></td></tr></table></figure><p>14、上面提到了replace方法，接下继续补充一下  </p><p><strong>String replaceAll(String,String)</strong> 将某个内容全部替换成指定内容，　　 </p><p><strong>String repalceFirst(String,String)</strong> 将第一次出现的某个内容替换成指定的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;，，，，，，挨点博客，，，，， &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;改变后：&quot;</span> + str.replaceAll(<span class="string">&quot;，&quot;</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">改变后：aaaaaa挨点博客aaaaa </span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;，，，，，，挨点博客，帅吗，帅吗，，，，， &quot;</span>;  </span><br><span class="line">System.out.println(<span class="string">&quot;改变后：&quot;</span> + str.replaceFirst(<span class="string">&quot;帅吗&quot;</span>,<span class="string">&quot;很帅哦&quot;</span>));</span><br><span class="line"></span><br><span class="line">运行结果：改变后：，，，，，，挨点博客，很帅哦，帅吗，，，，， </span><br></pre></td></tr></table></figure><p>15、 <strong>int comparaTo(String)</strong>  两个字符串作比较，返回比较的值</p><p>比较规则：如果两个字符串长度不相同，则返回长度的差值</p><p>如果两个字符串的长度相同，逐个字符进行比较，返回不相同字符的ASCII码差值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">        String str2=<span class="string">&quot;1234112&quot;</span>;</span><br><span class="line">        String str3=<span class="string">&quot;125&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> a = str1.compareTo(str2); <span class="comment">//-4   ,长度短4</span></span><br><span class="line">        <span class="keyword">int</span> b = str1.compareTo(str3); <span class="comment">//-2    ,3-5 = -2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays工具类常用方法"><a href="#Arrays工具类常用方法" class="headerlink" title="Arrays工具类常用方法"></a>Arrays工具类常用方法</h2><p><strong>Arrays.sort()</strong><br>对数组的排序(从小到大)</p><p><strong>Arrays.binarySerch()</strong><br>二分查找，找到则定位元素下标</p><p><strong>Arrays.toString()</strong><br>数组的打印</p><p><strong>Arrays.fill()</strong><br>数组的填充</p><p><strong>Arrays.equals()</strong><br>判断两个数组大小是否相等</p><p><strong>Arrays.asList()</strong><br>将数组转换为列表</p><p><strong>Arrays.copyOf(数组，int n)</strong><br>将数组的前n个值传给另一个数组</p><p><strong>Arrays.copyOfRange()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[] = Arrays.copyOf(a, <span class="number">4</span>);    <span class="comment">//4,3,6,5</span></span><br><span class="line"><span class="keyword">int</span> c[] = Arrays.copyOfRange(a, <span class="number">2</span>, <span class="number">4</span>);   <span class="comment">//6,5</span></span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line">System.out.println(Arrays.toString(c));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java 的String类中我们常用到一些方法来处理String字符串    ， java.lang.String&lt;/p&gt;
&lt;p&gt;Arrays工具类中我们常永道一些方法来处理数组  ,     java.util.Arrays&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>《格局》《视野》</title>
    <link href="http://example.com/2021/07/11/%E3%80%8A%E6%A0%BC%E5%B1%80%E3%80%8B%E3%80%8A%E8%A7%86%E9%87%8E%E3%80%8B/"/>
    <id>http://example.com/2021/07/11/%E3%80%8A%E6%A0%BC%E5%B1%80%E3%80%8B%E3%80%8A%E8%A7%86%E9%87%8E%E3%80%8B/</id>
    <published>2021-07-11T02:56:29.000Z</published>
    <updated>2021-07-11T14:28:07.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>格局小了   视野窄了 </p></blockquote><a id="more"></a><p>格局小了  视野窄了  思维局限了  </p><p>=》 上限低了</p><p>上限是由你的思维方式和定的目标确定的。。</p><p>应该是<strong>先入门</strong>， 突破外部屏障，才能真真切切的看到顶楼有多高，否则是看不到云雾缭绕的顶层的。</p><p>只有想或者不想，没有能或者不能</p><p>任何一个请求总有两种响应    200   和    404       </p><p>有些东西只能做好自己，不能强求，得到或者没得到并不能改变什么，你也不能通过得到这些东西而额外收获什么实质性的东西，也不会因为没有得到而额外失去什么   ，并且就算失去了看起来情况也不那么坏</p><p>attitude  is  magic </p><hr><p>在微博上看到一个话题  ：  内向的人是否很容易精神内耗</p><p>其实这玩意很神奇，对我而言类似于王阳明的格物致知精神一般，三天三夜也不能探究出什么，有时候也会陷入精神内耗的状态，在很多情况下是不可取的</p><p>所以</p><p><strong>精神内耗</strong>是个什么玩意？怎么克服<strong>精神内耗</strong>？</p><p><a href="https://zhuanlan.zhihu.com/p/377800318">教你如何克服精神内耗</a></p><p>《被讨厌的勇气》</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;格局小了   视野窄了 &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Arrays.asList使用注意</title>
    <link href="http://example.com/2021/07/10/Arrays.asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <id>http://example.com/2021/07/10/Arrays.asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</id>
    <published>2021-07-10T14:36:26.000Z</published>
    <updated>2021-07-27T14:50:54.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>new ArrayList&lt;&gt;()  和 Arrays.asList()  区别</p></blockquote><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Arrays.asList()</code> 在平时开发中还是比较常见的，我们可以使用它<strong>将一个数组转换为一个List集合</strong>。</p><p>使用工具类Arrays.asList() 把数组转换成集合时，<strong>不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedoperationException异常。</strong></p><p><strong>原因：</strong></p><p>从<code>Arrays.asList()</code> 方法的源码分析，这个返回对象是一个ArrayList内部类，它并没有实现集合的修改方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);  <span class="comment">//Arrays.asList（）方法返回的并不是java.util.ArrayList，而是java.util.Arrays的一个内部类，这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下面的例子所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正常的创建的集合</span></span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list1 = &quot;</span> + list1.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组转的集合</span></span><br><span class="line">        String[] st1 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list2 = Arrays.asList(st1);</span><br><span class="line">        list2.add(<span class="string">&quot;4&quot;</span>);   <span class="comment">// 此处会抛出异常，不能使用add方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list2 = &quot;</span> + list2.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/%E2%80%98Arrays-asList%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E2%80%99/1583027-20200902113344541-1662617028.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;new ArrayList&amp;lt;&amp;gt;()  和 Arrays.asList()  区别&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>java多线程</title>
    <link href="http://example.com/2021/05/30/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2021/05/30/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-05-30T03:40:21.000Z</published>
    <updated>2021-06-07T07:38:07.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java多线程学习</p></blockquote><a id="more"></a><p>java.lang.Thread</p><p>还差一个死锁和生产者消费者问题没有解决，用到的时候再来补充</p><h2 id="多线程的创建"><a href="#多线程的创建" class="headerlink" title="多线程的创建"></a>多线程的创建</h2><h3 id="方法一：继承与Thread子类"><a href="#方法一：继承与Thread子类" class="headerlink" title="方法一：继承与Thread子类"></a>方法一：继承与Thread子类</h3><p>1.继承Thread类的子类</p><p>2.重写run()方法（线程执行的操作在run方法中）</p><p>3.创建子类对象</p><p>4.通过此对象调用start()方法   （start方法作用：1.启动当前线程  2.调用当前线程的run方法）</p><p><strong>注意</strong>：</p><p>1.要启用新的线程要使用start()方法，而不能直接使用run()方法，否则不会被认为开启了新线程</p><p>2.不可以让已经启动了的线程再去start，否则会报IlleagalThreadStatteException的错误</p><p>运行下列代码，线程t1、线程t1、main线程并发，相当于没有先后顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span> ; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test1 t1 = <span class="keyword">new</span> Test1();    <span class="comment">//线程t1</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Test1 t2 = <span class="keyword">new</span> Test1();   <span class="comment">// 线程t2</span></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;   <span class="comment">// 主线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：-实现Runnable接口"><a href="#方法二：-实现Runnable接口" class="headerlink" title="方法二： 实现Runnable接口"></a>方法二： 实现Runnable接口</h3><p>1.定义子类实现Runnable接口</p><p>2.重写run（）方法</p><p>3.创建Runnable子类对象</p><p>4.将子类对象作为参数传入到Thread类的构造器中</p><p>5.调用start（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test2 = <span class="keyword">new</span> Test2();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(test2);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h3><p>开发中优先选择实现接口的方式<br>实现方式的好处：</p><p> 1.避免了单继承的局限性 （因为一个类若继承Thread类则不可以继承其他类了）</p><p>2.多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</p><h3 id="几个Thread类中的方法："><a href="#几个Thread类中的方法：" class="headerlink" title="几个Thread类中的方法："></a>几个Thread类中的方法：</h3><p>start（）、run（）、getName（）、setName（String name）</p><p>static Thread currentThread(): 返回当前线程。</p><p>static void yield()：线程让步  1.暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p><p>2.若队列中没有同优先级的线程，忽略此方法</p><p>join（）:当某个线程调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止。比如main线程中调用t1.join()，那么main线程将会被阻塞直到t1线程执行完毕</p><p>sleep（）：休眠，单位毫秒</p><h3 id="JDK5-0新增的创建多线程的方法"><a href="#JDK5-0新增的创建多线程的方法" class="headerlink" title="JDK5.0新增的创建多线程的方法"></a>JDK5.0新增的创建多线程的方法</h3><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p>抢占式：高优先级的线程抢占CPU</p><p>1.Java的调度方法 ：</p><p>​    1.同优先级线程组成先进先出队列（先到先服务）</p><p>​    2.对高优先级，使用优先调度的抢占式策略</p><p>2.线程的优先级等级 ：</p><p>MAX_PRIORITY：10 </p><p>MIN _PRIORITY：1 </p><p>NORM_PRIORITY：5 </p><p>3.涉及的方法</p><p>1.getPriority() ：返回线程优先值 </p><p>2.setPriority(int newPriority) ：改变线程的优先级</p><p>注意：</p><p>1.线程创建时继承父线程的优先级</p><p>2.不一定说先执行完优先高的再执行优先级低的，优先级高只是说执行概率高</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606163249026.png" alt="线程的生命周期"></p><p>注意我们start（）后不是就立即执行了，而是去抢夺cpu执行权</p><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>线程安全问题的描述：线程还在一段代码执行中没有出来，比如说先打印了票数，票数还没有自减，另一个线程就进入了代码中，导致了线程的安全问题</p><p>解决方法：当线程a在操作共享数据时，其他线程不能参与进来，线程a操作完后，其他线程才可以参与进来。这种情况即便线程a出现了阻塞（相当于在休眠），其他线程也不能参与进来。</p><p>比如说在下面这个卖车票的例子中，当车票只有1张时，3个线程都同时进入了run（）方法中，导致车票数量为负数。</p><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606215332549.png" alt="卖票的例子"></p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210606215644487.png" alt="出现错误的情况" style="zoom: 67%;" /><h3 id="方法一：同步代码块"><a href="#方法一：同步代码块" class="headerlink" title="方法一：同步代码块"></a>方法一：同步代码块</h3><p>synchronized（同步监视器）{</p><p>​            //需要被同步的代码，即操作同步数据的代码</p><p>}</p><p>说明：1.同步监视器就是我们俗称的锁，任何一个类的对象都可以充当锁。</p><p>​                    要求：多个线程必须共享<strong>同一把锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        <span class="comment">//这里我们使用当前对象的字节码对象作为同步锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">       <span class="comment">// 也可以synchronized(window.class)   用该类做为锁，且只会加载一次，所以是唯一的</span></span><br><span class="line">         <span class="comment">// 也可以synchronized(this)         以该类的对象作为锁</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：同步方法"><a href="#方法二：同步方法" class="headerlink" title="方法二：同步方法"></a>方法二：同步方法</h3><p>使用同步方法的注意点：</p><ul><li><p>使用方法：public synchronized void 方法名（）{}</p></li><li><p>同步方法是让整个方法同步，若方法中有循环，则一个线程进入这个同步方法后会一直卡在这个循环中，这时候要考虑用同步方法块，缩小同步的范围</p></li><li><p>同步方法的同步监视器默认为this，注意看这样会不会是同一把锁，特别是在继承的方式实现同步时，很容易就不是同一把锁了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        sell();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然这里我们也能用同步代码块的方法解决，即去掉synchronized修饰，再用同步代码块包起来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// synchronized(this)&#123;&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三：使用锁机制"><a href="#方法三：使用锁机制" class="headerlink" title="方法三：使用锁机制"></a>方法三：使用锁机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一共有 50 张票，继承机制开启线程，资源是共享的，所以不用加 static</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">50</span>;</span><br><span class="line"><span class="comment">//创建一个锁对象</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票分 50 次卖完</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ;i ++)&#123;</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//模拟卖一次票所需时间</span></span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出一张票，剩余&quot;</span>+(--num)+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="synchronized和Lock的对比"><a href="#synchronized和Lock的对比" class="headerlink" title="synchronized和Lock的对比"></a>synchronized和Lock的对比</h3><p><img src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210607103706448.png" alt="synchronized与lock的对比"></p><h2 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h2><p>1.不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁 </p><p>2.出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续</p><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h3 id="线程通信的三个方法"><a href="#线程通信的三个方法" class="headerlink" title="线程通信的三个方法"></a>线程通信的三个方法</h3><p>wait(): 执行此方法时，当前线程进入阻塞状态，并释放同步监视器</p><p>notify(): 执行此方法时，就会唤醒被wait的一个线程，如有多个线程，优先级大的那个被唤醒</p><p>notifyAll(): 执行此方法时，就会唤醒被wait的所有有线程</p><p>注意点：</p><ul><li>三个方法都必须使用在同步代码块或者同步方法中</li><li>三个方法都的调用者都必须是同步代码块或者同步方法中的同步监视器（默认为this，若不相同则会报错）</li><li>三个方法定义在java.lang.Object类中，因为任何对象都需要有这三个方法</li></ul><h3 id="例子：两个线程交替打印1-100的数"><a href="#例子：两个线程交替打印1-100的数" class="headerlink" title="例子：两个线程交替打印1~100的数"></a>例子：两个线程交替打印1~100的数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;num &lt;= <span class="number">100</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                notify();  <span class="comment">//</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();  <span class="comment">//</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 =  <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 =  <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sleep-和wait-的对比"><a href="#sleep-和wait-的对比" class="headerlink" title="sleep()和wait()的对比"></a>sleep()和wait()的对比</h3><p><strong>相同点</strong>：</p><ul><li>一旦执行方法，都可以使线程进入阻塞状态</li></ul><p><strong>不同点</strong>：</p><ul><li>方法声明的位置不同，Thread类中声明sleep(), Object类中声明wait()</li><li>调用的要求不同：sleep可以在任何需要的场景下调用，wait()必须使用在同步方法块或者同步代码中</li><li>sleep()不会释放同步监视器，wait()会释放同步监视器</li></ul><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p><strong>问题描述</strong>：</p><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p><strong>具体实现</strong>：</p><h2 id="线程池创建多线程"><a href="#线程池创建多线程" class="headerlink" title="线程池创建多线程"></a>线程池创建多线程</h2><p>在开发当中，我们真正用的都是线程池</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        NumberThread num = <span class="keyword">new</span> NumberThread();</span><br><span class="line">        NumberThread1 num1 = <span class="keyword">new</span> NumberThread1();</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        service.execute(num);</span><br><span class="line">        service.execute(num1);</span><br><span class="line">        <span class="comment">// 关闭线程</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=446&spm_id_from=pageDriver">java尚硅谷视频</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java多线程学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="多线程" scheme="http://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>面向github学习</title>
    <link href="http://example.com/2021/05/27/%E9%9D%A2%E5%90%91github%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/05/27/%E9%9D%A2%E5%90%91github%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-27T08:43:05.000Z</published>
    <updated>2021-05-27T08:45:16.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>面向github学习</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;面向github学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>静态变量与成员变量区别</title>
    <link href="http://example.com/2021/05/27/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/05/27/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB/</id>
    <published>2021-05-27T01:22:17.000Z</published>
    <updated>2021-05-27T14:40:10.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java中静态变量</p></blockquote><a id="more"></a><p>几个没弄懂的？</p><ul><li><p>（关于变量的创建过程以及堆内存  方法区的理解？</p></li><li><p>String类  </p></li><li><p>```</p><ul><li>1.静态变量（类变量）与成员变量有什么区别？</li><li>2.8种基本数据类型 6中数字类型，一种布尔型，一种字符型，byte、short、int、long、float、double、boolean、char</li><li>都是小写、大写的是包装类，且String不是基本数据类型</li><li>3.基本数据类型的取值范围都已经存在了包装类中，无需记忆Integer.MAX_VALUE、Integer.SIZE</li><li>4.如何定义常量?</li><li>5.自动类型转换，简单记忆：位数小的自动转为大的，大的转化为小的要强制转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">静态变量(类变量)与成员变量的区别:</span><br><span class="line"></span><br><span class="line">![image-20210527214548415](&#x2F;images&#x2F;123&#x2F;image-20210527214548415.png)</span><br><span class="line"></span><br><span class="line">关于静态变量的测试如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Member &#123;</span><br><span class="line">   public static int x &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(Member.x);  &#x2F;&#x2F;可以通过 类名.静态变量名 直接调用，而不需要新建一个对象</span><br><span class="line">       Member a &#x3D; new Member();</span><br><span class="line">       Member b &#x3D; new Member();</span><br><span class="line">        System.out.println(a.x);  &#x2F;&#x2F;4</span><br><span class="line">        System.out.println(b.x);  &#x2F;&#x2F;5</span><br><span class="line">        a.x &#x3D; 5;                  &#x2F;&#x2F;测试一下类a中静态变量x变化是否会影响类b</span><br><span class="line">        System.out.println(b.x);  &#x2F;&#x2F;5  ,我们只改变了a中的变量，但b中变量也变化了，说明改变的是这个类</span><br><span class="line">        Member c &#x3D; new Member();</span><br><span class="line">        System.out.println(c.x);  &#x2F;&#x2F;5 ,此时新建类c也可以看出</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java中静态变量&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-25T03:34:40.000Z</published>
    <updated>2021-05-26T03:22:41.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天手敲了一下数据结构，归纳一下链表、栈、队列、串、树的代码</p></blockquote><a id="more"></a><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>如果需要支持随机访问的话，链表没办法做到。</li><li>如果需要存储的数据元素的个数不确定，并且需要经常<strong>添加和删除数据</strong>的话，使用链表比较合适。</li><li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li></ul><h3 id="数组-vs-链表"><a href="#数组-vs-链表" class="headerlink" title="数组 vs 链表"></a>数组 vs 链表</h3><ul><li><strong>数组支持随机访问，而链表不支持</strong>。</li><li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li><li>数据的大小固定，而链表则天然支持<strong>动态扩容</strong>。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>无论是插入操作还是删除操作，都要找到指定结点的前驱结点</li><li>注意头插法和尾插法的区别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义结点类，包含数据域和指针域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有结点值的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line"><span class="comment">//        this.data = data;</span></span><br><span class="line"><span class="comment">//        this.next = null;</span></span><br><span class="line">        <span class="comment">//相当于是调用了最后一个构造器</span></span><br><span class="line">        <span class="keyword">this</span>(data,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带有结点值和后继结点的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义链表类，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node head;  <span class="comment">//单链表头节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数构造长度为n的单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> Order)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">if</span>(Order)</span><br><span class="line">            create1(n);   <span class="comment">// 尾插法</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            create2(n);   <span class="comment">// 头插法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法顺序建立单链表,每次插入将新节点插入到链表的表尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            insert(length(),sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头插法顺序建立单链表，次插入将新节点插入到链表的表头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            insert(<span class="number">0</span>,sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将链表置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head.data = <span class="keyword">null</span>;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在位置i插入元素x</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Object x)</span></span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//移动指针到指定节点的前驱结点</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j &lt; i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        Node s = <span class="keyword">new</span> Node(x);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定值的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; p.data != x )&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出链表值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主函数测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入值：&quot;</span>);</span><br><span class="line">        LinkList linkList = <span class="keyword">new</span> LinkList(<span class="number">5</span>,<span class="keyword">false</span>);</span><br><span class="line">        linkList.display();</span><br><span class="line">        System.out.println(linkList.isEmpty());</span><br><span class="line">        System.out.println(linkList.length());</span><br><span class="line">        linkList.clear();</span><br><span class="line">        System.out.println(linkList.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p><strong>栈</strong> (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p></li><li><p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p></li><li><p>满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性</p></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用栈中的数量来进行的，栈元素的数量可以理解为栈顶元素下一个存储单元的位置下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] storage;<span class="comment">//存放栈中元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;<span class="comment">//栈的容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//栈中元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_FACTOR = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不带初始容量的构造方法。默认容量为8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">this</span>.storage=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带初始容量的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Capacity too small.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.capacity = initialCapacity;</span><br><span class="line">        <span class="keyword">this</span>.storage = <span class="keyword">new</span> <span class="keyword">int</span>[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈,如果栈中的数量已满时，会自动扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == capacity) &#123;</span><br><span class="line">            ensureCapacity();</span><br><span class="line">        &#125;</span><br><span class="line">        storage[count++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确保容量大小</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    Arrays的copyOf()方法传回的数组是新的数组对象，改变传回数组中的元素值，不会影响原来的数组。</span></span><br><span class="line"><span class="comment">copyOf()的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值，例如：</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = capacity * GROW_FACTOR;</span><br><span class="line">        storage = Arrays.copyOf(storage, newCapacity);</span><br><span class="line">        capacity = newCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈顶元素并出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> storage[count];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈顶元素不出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Stack is empty.&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> storage[count-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈中元素的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyStack stack = <span class="keyword">new</span> MyStack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><ul><li>一般用两个指针来实现，front头指针指向队首，出队时front后移，rear指向队尾的后一个元素，入队时rear后移</li><li>当空队列时，front = rear = 0</li><li>当满队列时，rear = maxSize</li></ul><p><strong>缺点：</strong></p><p>顺序队列存在<strong>“假溢出”</strong>的问题也就是明明有位置却不能添加的情况。</p><p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20210525155152412.png" alt="image-20210525155152412"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequeue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数，容量为8</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxSize = <span class="number">8</span>;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造最大存储单元格数为maxSize的空队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequeue</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear - front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取队首元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rear == maxSize)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        queueElem[rear++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 看看是不是返回后再减</span></span><br><span class="line">        <span class="keyword">return</span> queueElem[front++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印队列值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">                System.out.println(queueElem[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//测试主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sequeue sequeue = <span class="keyword">new</span> Sequeue();</span><br><span class="line">        sequeue.offer(<span class="number">1</span>);</span><br><span class="line">        sequeue.offer(<span class="number">2</span>);</span><br><span class="line">        sequeue.clear();</span><br><span class="line">        System.out.println(sequeue.isEmpty());</span><br><span class="line">        sequeue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>使用循环队列可以解决顺序队列的<strong>假溢出</strong>和<strong>越界问题</strong></p><ul><li>队列容量 = maxSize -1，即rear总是指向空闲的位置，</li><li>空队列时，rear = front</li><li>满队列时，(rear + 1) % maxSize == front  ，考虑rear在front前面和后面两种情况可得出此结论</li><li>队列的长度：(rear - front + maxSize) % maxSize</li><li>头指针和尾指针的移动语句：front = (front + 1) % maxSize；  rear = (rear + 1) % maxSize</li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20210525155822770.png" alt="image-20210525155822770"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">队列为空的时候就是 front==rear ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSequeue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxSize = <span class="number">8</span>;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSequeue</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = x;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rear = front = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队列的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + maxSize) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取队首元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((rear + <span class="number">1</span>) % maxSize == front)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        queueElem[rear] = x;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object p = queueElem[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; length(); i = (i + <span class="number">1</span>) % maxSize)&#123;</span><br><span class="line">                System.out.println(queueElem[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此队列为空队列&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleSequeue circleSequeue = <span class="keyword">new</span> CircleSequeue();</span><br><span class="line">        circleSequeue.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>对字符串的一系列操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] strValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> curLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">        curLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以字符串常量构造串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Converts this string to a new character array.</span></span><br><span class="line">        <span class="keyword">char</span>[] p =str.toCharArray();</span><br><span class="line">        strValue = p;</span><br><span class="line">        curLen = p.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以字符数组构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqString</span><span class="params">(<span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[str.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            strValue[i] = str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        curLen = str.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将串变为空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        curLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为空串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curLen ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回串的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回位置序号为i的字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;超出范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strValue[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将串的长度扩充为newCapcity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> newCapcity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] tmp = strValue;</span><br><span class="line">        strValue = <span class="keyword">new</span> <span class="keyword">char</span>[newCapcity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++)&#123;</span><br><span class="line">            strValue[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        curLen = newCapcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回位置序号从 begin 到 end - 1 的子串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || end &gt; curLen || begin &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;范围错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] tmp = <span class="keyword">new</span> <span class="keyword">char</span>[end - begin];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            tmp[i - begin] = strValue[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第 i 个字符之前插入子串str (i &gt;= 0 &amp;&amp; i &lt;= n)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i ,String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">int</span> len1 = curLen;  <span class="comment">//存储原字符串的长度，因为后面扩容长度会改变</span></span><br><span class="line">        <span class="keyword">int</span> newCapcity = len + curLen;</span><br><span class="line">        allocate(newCapcity);   <span class="comment">//重新分配存储空间为 newCapcity 的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = len1 - <span class="number">1</span>; j &gt;= i; j--)&#123;</span><br><span class="line">            strValue[j + len] = strValue[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新字符串插入到从 i 开始的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len + i; j++)&#123;</span><br><span class="line">            strValue[j] = str.charAt(j - i);  <span class="comment">//charAt 函数取出String中指定位置的字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除位置序号从 begin 到 end - 1 的子串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> begin , <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || end &gt; curLen || begin &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向前移动</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt; end ; i++)&#123;</span><br><span class="line">            strValue[i] = strValue[end + i - begin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 改变容量</span></span><br><span class="line">        curLen = curLen - end + begin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将 str 连接到字符串的后面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">concat</span> <span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="comment">//        for(int i = curLen; i &lt; curLen + str.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">//            strValue[i] = str.charAt(i - curLen);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        curLen = curLen + str.length();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//也可以直接调用插入操作，插入到字符串最后的位置</span></span><br><span class="line">         insert(curLen, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较 str 和当前字符串的大小, 取两个字符串较短者作为公共长度进行比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Math.min(curLen, str.length());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strValue[i] &gt; str.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(strValue[i] &lt; str.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从位置序号为 begin 的字符串开始搜索与 str 相等的子串   ?未解决</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin &lt; <span class="number">0</span> || begin + str.length() &gt;= curLen)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(<span class="string">&quot;不在范围内或没有这样的子串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; length();i++)&#123;</span><br><span class="line">            System.out.println(strValue[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SeqString str = <span class="keyword">new</span> SeqString(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">        str.display();</span><br><span class="line">        System.out.println(str.curLen);</span><br><span class="line">        str.concat(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        System.out.println(str.curLen);</span><br><span class="line">        str.display();</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        str.insert(<span class="number">1</span>,<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        str.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>后序遍历的非递归算法没看懂，怎样更好的理解递归，递归的实质应该是由栈所构成的。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line">    <span class="keyword">public</span> BitreeNode lchild,rchild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供了三中类型的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">(Object data, BitreeNode lchild, BitreeNode rchild)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.lchild = lchild;</span><br><span class="line">        <span class="keyword">this</span>.rchild = rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(data,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitreeNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BitreeNode root;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BiTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BiTree</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    采用递归算法如下所示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先序遍历的结果是：&quot;</span>);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历的结果是：&quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历的结果是：&quot;</span>);</span><br><span class="line">        preOrder(root.lchild);</span><br><span class="line">        preOrder(root.rchild);</span><br><span class="line">        System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    采用非递归算法如下所示</span></span><br><span class="line"><span class="comment">    因为递归实现的过程就是程序自己在处理圧栈和弹栈，改用非递归实现时，用栈模拟系统的圧栈与弹栈，就可以了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、申请一个栈stack，然后将头节点压入stack中。</span></span><br><span class="line"><span class="comment">     * 2、从stack中弹出栈顶节点，打印，再将其右孩子节点（不为空的话）先压入stack中，最后将其左孩子节点（不为空的话）压入stack中。</span></span><br><span class="line"><span class="comment">     * 3、不断重复步骤2，直到stack为空，全部过程结束。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack.pop();</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            <span class="keyword">if</span>(p.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(p.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(p.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、申请一个栈stack，</span></span><br><span class="line"><span class="comment">     * 2、先把root压入栈中，依次把左孩子压入栈中，即不停的令root=root.left</span></span><br><span class="line"><span class="comment">     * 3、重复步骤2，直到root为null，从stack中弹出一个节点并打印该结点的值，并令root=root.right,重复步骤2</span></span><br><span class="line"><span class="comment">     * 第三步相当于是压入一个右结点，就把该右结点当做根结点，看它有没有左孩子，有就不断将它的左孩子压入栈中，这样最先打印出来的也是左孩子</span></span><br><span class="line"><span class="comment">     * 4、当stack为空且cur为空时，整个过程停止。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.lchild;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                root = root.rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//后序遍历,没太看懂？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder1</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历的结果是：&quot;</span>);</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;BitreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack1.pop();</span><br><span class="line">            stack2.push(p);</span><br><span class="line">            <span class="keyword">if</span>(p.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack1.push(p.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack1.push(p.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack2.isEmpty())&#123;</span><br><span class="line">            BitreeNode p = stack2.pop();</span><br><span class="line">            System.out.print(p.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//层次遍历，使用队列来解决，左右结点分别入队，结点出队后再将其左右结点入队，不断重复这个步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;层序遍历的结果是：&quot;</span>);</span><br><span class="line">        Queue&lt;BitreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;BitreeNode&gt;();</span><br><span class="line">        BitreeNode p =root;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            BitreeNode q = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(q.lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(q.lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q.rchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(q.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(q.data + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在二叉树中查找值为x的节点，若找到返回该结点，否则返回空值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BitreeNode <span class="title">searchNode</span><span class="params">(BitreeNode root,Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.data.equals(x)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    BitreeNode lresult = searchNode(root.lchild, x);</span><br><span class="line">                    <span class="keyword">if</span> (lresult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> searchNode(root.rchild, x);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> lresult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计二叉树结点的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nodeCount</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                count += nodeCount(root.lchild);</span><br><span class="line">                count += nodeCount(root.rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求二叉树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(BitreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ldepth = getDepth(root.lchild);</span><br><span class="line">        <span class="keyword">int</span> rdepth = getDepth(root.rchild);</span><br><span class="line">        <span class="keyword">if</span>(ldepth &lt; rdepth)&#123;</span><br><span class="line">            <span class="keyword">return</span> rdepth + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ldepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">javaGuide大佬的笔记</a></p><p><a href="https://www.cnblogs.com/bigsai/p/11393609.html">二叉树——前序遍历、中序遍历、后序遍历、层序遍历详解(递归非递归)</a></p><p><a href="http://www.tup.tsinghua.edu.cn/bookscenter/book_07232901.html#">数据结构(java版) 清华大学出版社 吕云翔著</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这几天手敲了一下数据结构，归纳一下链表、栈、队列、串、树的代码&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>5.22</title>
    <link href="http://example.com/2021/05/22/5-22/"/>
    <id>http://example.com/2021/05/22/5-22/</id>
    <published>2021-05-22T02:14:00.000Z</published>
    <updated>2021-05-22T02:52:10.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咕咕咕咕</p></blockquote><a id="more"></a><p>先说说几天前的事，没想到第一次牵小周的手竟然是这样的。。</p><p>呜呜即便在出门前我脑子里这场景已经排练好n次，但是最后一刻我又怂了。。</p><p>你在怕什么呢？</p><p>怕这样太轻浮了？怕这样会惹她不开心？</p><p>醒醒pb，你们都认识半年了~不对真要算起来初中就认识了，你是男生？你好怂！怂包！</p><p>估计这场面我会永生难忘，哈哈感觉接触的那一刻身体被电了一下，走在路上人都是酥麻酥麻的~</p><p>呼，不想了要不然我人又得麻</p><p>总之吧，希望你不只是为了你自己，还要为了你的家人，你喜欢的人，这样更能有动力前行</p><hr><p>今天呢，和实验室研三学长聊了聊，探讨了下实验室情况和未来几年个人成长。</p><p>结论就是：实验室很好，老师很好，学长也很好</p><p>当一切外部环境都变得十分友好时，接下来的路就要靠你自己来走</p><hr><p>跌跌撞撞走来，一切都很神奇，我这个向来不相信神学各种玄学的人也会觉得这是命运的安排</p><p>几年前你不会觉得你还有机会再次遇到她</p><p>一个月前你也不会觉得你会来到这个实验室</p><p>我向来是坚信你朝着哪个方向努力了，就会有相应结果</p><p>但是这些事情你不曾料到过</p><p>可能这就是缘分吧~</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;咕咕咕咕&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
</feed>
