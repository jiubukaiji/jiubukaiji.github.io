<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pb</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-24T07:52:48.671Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>怎么查美赛成绩</title>
    <link href="http://example.com/2021/04/24/%E6%80%8E%E4%B9%88%E6%9F%A5%E7%BE%8E%E8%B5%9B%E6%88%90%E7%BB%A9/"/>
    <id>http://example.com/2021/04/24/%E6%80%8E%E4%B9%88%E6%9F%A5%E7%BE%8E%E8%B5%9B%E6%88%90%E7%BB%A9/</id>
    <published>2021-04-24T07:21:46.000Z</published>
    <updated>2021-04-24T07:52:48.671Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>等待是最煎熬的过程，本人闲得无聊，写了个程序，美赛成绩一出将自动下载获奖证书发送到QQ邮箱，就不用每隔一段时间就去查成绩出了没</p></blockquote><a id="more"></a><p><strong>准备工作：</strong></p><ul><li>语言：python</li><li>下载第三方库 ：requests、yagmail</li><li><a href="https://blog.csdn.net/qq_41622603/article/details/106801525">配置qq邮箱</a></li></ul><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要配置的信息</span></span><br><span class="line">team_num = <span class="string">&#x27;xxxxxxx&#x27;</span>   <span class="comment"># 队伍号码</span></span><br><span class="line">certificate_name = team_num + <span class="string">&#x27;.pdf&#x27;</span>  <span class="comment"># 获奖证书命名</span></span><br><span class="line"></span><br><span class="line">imap = <span class="string">&#x27;xxxxxxxxxxxxxxxx&#x27;</span>  <span class="comment"># 16位qq邮箱授权码</span></span><br><span class="line">qq_mail_send = <span class="string">&#x27;12345678@qq.com&#x27;</span>  <span class="comment"># 发件邮箱</span></span><br><span class="line">qq_mail_receive = <span class="string">&#x27;12345678@qq.com&#x27;</span>  <span class="comment"># 收件邮箱</span></span><br><span class="line"><span class="comment"># 若需要群发给队友， qq_mail_receive = [&#x27;12345678@qq.com&#x27;, &#x27;87654321@qq.com&#x27;]</span></span><br><span class="line">subject = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 邮件主题</span></span><br><span class="line">contents = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 邮件正文</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.comap-math.com/mcm/202Certs/&#123;&#125;.pdf&#x27;</span>.<span class="built_in">format</span>(team_num)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    time.sleep(<span class="number">10</span>)  <span class="comment"># 每隔10s查询一次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若已出成绩，返回请求成功代码200</span></span><br><span class="line">    print(response.status_code)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 打印当前时间</span></span><br><span class="line">        localtime = time.asctime(time.localtime(time.time()))</span><br><span class="line">        print(<span class="string">&quot;呜呜呜终于出成绩啦！时间是:&quot;</span>, localtime)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将获奖证书以pdf格式下载到本地</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(certificate_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接邮件服务器</span></span><br><span class="line">        yag = yagmail.SMTP(user=qq_mail_send, password=imap, host=<span class="string">&quot;smtp.qq.com&quot;</span>)</span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        yag.send(to=qq_mail_receive,  <span class="comment"># 接收邮箱</span></span><br><span class="line">                 subject=subject,  <span class="comment"># 标题</span></span><br><span class="line">                 contents=contents,  <span class="comment"># 正文</span></span><br><span class="line">                 attachments=certificate_name  <span class="comment"># 附件</span></span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;等待是最煎熬的过程，本人闲得无聊，写了个程序，美赛成绩一出将自动下载获奖证书发送到QQ邮箱，就不用每隔一段时间就去查成绩出了没&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="分享" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>4.2</title>
    <link href="http://example.com/2021/04/20/4-20/"/>
    <id>http://example.com/2021/04/20/4-20/</id>
    <published>2021-04-20T02:36:36.000Z</published>
    <updated>2021-04-24T07:56:49.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果生活中的事情能够多线程互不干扰就好了</p></blockquote><a id="more"></a><p>单线程阻塞了不能影响主进程的运行，选择挂起</p><hr><p>现在的策略是：</p><p>将事务扔进沙箱，心情是主线，即便事务不再进行了，也不会影响主线。</p><p>希望如此。。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果生活中的事情能够多线程互不干扰就好了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习笔记</title>
    <link href="http://example.com/2021/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-14T13:54:14.000Z</published>
    <updated>2021-04-16T03:32:07.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上学期的机器学习全忘了，人在江湖飘，不会点机器学习都找不着导师了</p><p>只写一些不太记得的地方和重点</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1.机器学习分类</p><ul><li>监督学习</li><li>无监督学习</li><li>半监督学习</li><li>强化学习</li></ul><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>1.<strong>线性可分定义</strong></p><p>直观上：一条<strong>直线</strong>将一堆点和一堆圈分成两部分</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414220001685.png"></p><p>数学上：yi = +1 或 -1是两种分类的结果，想象一下点在直线上方和点在直线下方分别代表大于0和小于0情况</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414215757889.png"></p><hr><p><strong>2</strong>.<strong>怎样找到一条直线使得划分平面效果最优？</strong></p><p>若有很多种分类方法，找到其中<strong>最大间隔</strong>的一种分类方式</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414220909703.png"></p><p>得出下面结论：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210414221050814.png"></p><hr><p><strong>3.如何用数学证明将寻找最优化超平面的过程写成一个最优化问题？</strong>（未解决？）</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415083407475.png">凸优化问题，采用梯度下降法不断寻找极值点</p><hr><p><strong>4.在线性不可分的情况下采用最优化算法</strong></p><p>但是这里采用的仍然是线性函数，在某些情况下并不能进行很好的分类</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415084431459.png"></p><hr><p><strong>5.当线性不可分时，因为直接在特征空间上采用最优化算法效果并不好，将特征空间由低纬到高纬的变换，使得可以线性可分</strong></p><p>下面有一个定理，说明了这个问题，可知当维度增加时，使得训练样本线性可分的概率增大了，无穷大时趋近于0</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415085218205.png"></p><p>回到问题四上面，将xi改成**φ(xi)**，同时使Ω的维度与φ(xi)相同，那么这个问题就类似于低纬问题的凸优化解法</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210415085451183.png"></p><hr><p><strong>6.具体探究φ(xi)的形式</strong></p><p>核函数（kernel function）是一个实数，如下：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416105818055.png"></p><hr><p>下面介绍核函数与映射φ(x)之间的关系，</p><p>例子1：已知映射关系，求核函数</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110202133.png" alt="image-20210416110202133"></p><p>K（x1，x2）结果如下，是一个常数。</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110303215.png" alt="image-20210416110303215"></p><p>例子2，已知核函数，求映射φ(x)</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110535259.png" alt="image-20210416110535259"></p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110628633.png" alt="image-20210416110628633"></p><p>7.原问题与对偶问题</p><p>原问题：<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110845884.png" alt="image-20210416110845884"></p><p>对偶问题：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416110928482.png" alt="image-20210416110928482"></p><p>9.支持向量机总体算法流程</p><h2 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h2><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416111930608.png" alt="image-20210416111930608"></p><p>感知器算法：</p><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210416112441104.png" alt="image-20210416112441104"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上学期的机器学习全忘了，人在江湖飘，不会点机器学习都找不着导师了&lt;/p&gt;
&lt;p&gt;只写一些不太记得的地方和重点&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>4-2</title>
    <link href="http://example.com/2021/04/02/4-2/"/>
    <id>http://example.com/2021/04/02/4-2/</id>
    <published>2021-04-02T02:29:02.000Z</published>
    <updated>2021-04-02T04:03:37.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>歪歪唧唧歪歪唧唧</p></blockquote><a id="more"></a><p>恰逢近些天找导师找的有些烦闷，集体出游计划也泡汤了，看到论坛上几句话分享一下：</p><p>看到一个感情贴：</p><blockquote><p>不论男女，都可以表达自己不开心的情绪，但请一定明白，每一次的矛盾，都是双方相互试探底线的过程，甩脸子要有意义和价值，要知道自己的诉求到底是什么，传达出对方以后不能xxx的信号，而不是一味的发泄情绪，这样才不会消耗感情，才能长久                                                                                                                                    ——论坛老哥A</p></blockquote><p>人在不开心的时候一定要表达自己的诉求，而不是单纯的对别人发泄情绪。这样做的后果往往是别人被训斥了一顿，一头雾水还不知道自己哪里错了，到头来就算再犯也不知道，这对别人而言是很无辜的，对自己而言也会被这种错误再次伤害到。</p><p>形象的表示：  </p><p>发泄情绪-&gt;我反正生气了我不管你一定要哄着我（就算我不说你也要明白你哪里错了，你自己品）     （x）</p><p>发泄情绪-&gt;提出诉求-&gt;说清楚自己的底线是什么-&gt;达成共识                 （√）</p><p>这里其实对于 生气 其实还蛮那啥的，成年人一定要控制好自己的情绪，是真的，绝对没错，<strong>所以请千万不要随便发脾气！</strong>但是为什么讲有时候要发脾气呢，如上面所言，是一个试探的过程，需要用合适的方式传达自己的情绪。</p><p>其实谈到为什么要发脾气，人在发脾气的时候激素（肾上腺素、甲状腺素）水平会升高，会屏蔽掉外界的一切观点，当复盘后会发现往往有以下几个原因：</p><ul><li>stereotype（固有印象）或者说 Inherent thinking（固有思维），有这样的场景：我，想法<strong>一直</strong>是这样的，你，这种想法与之不符，所以，你错了，我要生气。遵循这种闭环的思维方式，就会有以上场景发生。无法包容无法接受新观点，把某件事想成是理所当然的，这种因素需要自己去改变。</li><li>见识少，比如我们在生活中常说：你为什么会这样想？为什么要这样做？这是两种思维方式抵触的过程。这种因素往往会随着阅历增加而减弱。</li></ul><p>至于怎么做，我以前经常看到这样的论调：每当你要生气的时候，就先心里默念不要生气，这样持续一段时间后就没那么生气了。从生理的角度来分析有一定道理，让激素水平下降了来控制情绪。缺点是什么？只是从生理上强制解决了，并没有从心理上来认同这件事，可能你以后想起来依然会心有芥蒂。</p><p>我认为有一种较为合理的方式：换位思考和共情。当对方有什么事让你觉得很生气了。从上帝视角来看，别人并不知道这样会让你生气，也不知道这样做到底有什么错（当然，排除掉故意让你生气的这种情况，所占比例极小，如果是这样的话，那更简单，那又何必顺遂他意让自己生气呢？），此时我们可能会这样想：为什么他要这样做，明明这样做是错的，他为什么会这样想，他难道不知道这样做会xxx吗？但这时你要反问自己，对呀，为什么别人就一定知道呢？为什么你会觉得别人就一定会这样想呢？要是我是对方的话，我样说会不会真表达其他意思呢？可能思维链不是很连贯，但或多或少能解决自己的一点迷惑，等到过一段日子再去回顾的时候，你会发现，还真是思维的差异罢了，这种思维的差异并没有说谁对说错，仅仅就是差异。所以别人这样想也是很正常的，自己的生气或者情绪死不是就能避免掉了呢？这种非强制性的思考会让我们心理上更好的接受这件事</p><hr><p>另一个话题：</p><blockquote><p>天，感同身受<br>电动牙刷那段真的几乎一样。<br>后来真的想明白了，爱家人不是让他们按照我们觉得的方式生活，其实包括对所有人都是，自己觉得好的东西，不一定非得让别人都接受都用上。<br>我爸糖尿病 心脏不好，之前总因为戒烟戒酒的事说他，后来看他真的努力戒了，但是真的戒不掉，看到他偷偷抽烟，心理真的难受。<br>后来觉得，这么大年纪了，想抽点抽点，想喝点喝点吧，活得开心就好，反正医院定期复查就好。回家的时候也喜欢配他喝上两杯。现在就是后悔，非常后悔，自己没有及早醒悟。<br><strong>人呐，有时候就是很可笑，明明自己天天熬夜，却让别人早睡，明明自己天天喝可乐，却让别人多喝热水。</strong><br><strong>用自己心中理想的爱人方式爱着别人，到头来不爱自己也不是真正的爱别人。</strong>害</p><p>​                                                                                                                            ——论坛网友B</p></blockquote><p>​                                                            </p><p>算了不写了，太多想法了。</p><p>总结一下，抛开极端想法不谈，人与人之间的思维差异是固有存在的，我们要做的不是去强迫别人顺从自己的想法，而是去包容，对家人、对爱人、对朋友都是如此。</p><p>记得初中数学老师的一句话：你以为你以为就是你以为的，其他什么都不是。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;歪歪唧唧歪歪唧唧&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2021/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-27T13:29:55.000Z</published>
    <updated>2021-03-28T03:03:52.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正则表达式学习</p></blockquote><a id="more"></a><p>本想自己总结的，怎奈网上的总结实在太好了，难以超越，下面为转载：</p><p>先推荐两个正则的好用工具</p><ul><li><a href="https://regex101.com/">https://regex101.com/</a>    用来预览匹配效果</li><li><a href="https://jex.im/regulex/#!flags=&amp;re=">https://jex.im/regulex/#!flags=&amp;re=</a>    类似于思维图，帮我们理清匹配的过程</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="1-正则表达式介绍"><a href="#1-正则表达式介绍" class="headerlink" title="1. 正则表达式介绍"></a><strong>1. 正则表达式介绍</strong></h3><p><strong>正则表达式概念：</strong></p><blockquote><p> 正则表达式就是记录文本规则的代码</p></blockquote><p><strong>正则表达式的样子：</strong></p><blockquote><p> 0\d{2}-\d{8} 这个就是一个正则表达式，表达的意思是匹配的是座机号码</p></blockquote><p><strong>正则表达式的特点：</strong></p><ul><li>正则表达式的语法很令人头疼，可读性差</li><li>正则表达式通用行很强，能够适用于很多编程语言</li></ul><h3 id="2-re模块介绍"><a href="#2-re模块介绍" class="headerlink" title="2.  re模块介绍"></a><strong>2.  re模块介绍</strong></h3><p><strong>&lt;1&gt; re模块的使用过程</strong></p><p>在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入re模块</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用match方法进行匹配操作</span></span><br><span class="line">    result = re.match(正则表达式,要匹配的字符串)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span></span><br><span class="line">    result.group()</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; re模块示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">    result = re.match(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result.group()</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="3-匹配单个字符"><a href="#3-匹配单个字符" class="headerlink" title="3.  匹配单个字符"></a><strong>3.  匹配单个字符</strong></h3><p><strong>正则表达式的单字符匹配</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-0260360bb832e30995ccec67f64a21a8_b.jpg" alt="img"></p><p><strong>示例1：<code>.</code></strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;t.o&quot;</span>,<span class="string">&quot;too&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;t.o&quot;</span>,<span class="string">&quot;two&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">too</span><br><span class="line">two</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>[]</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符小写，那么正则表达式需要小写的h</span></span><br><span class="line">ret = re.match(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;hello Python&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符大写，那么正则表达式需要大写的H</span></span><br><span class="line">ret = re.match(<span class="string">&quot;H&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写h都可以的情况</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]&quot;</span>,<span class="string">&quot;hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[hH]ello Python&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第一种写法</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0123456789]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第二种写法</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个正则不能够匹配到数字4，因此ret为None</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;4Hello Python&quot;</span>)</span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">H</span><br><span class="line">h</span><br><span class="line">H</span><br><span class="line">Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>\d</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的匹配方式</span></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥1号&quot;</span>,<span class="string">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥2号&quot;</span>,<span class="string">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥3号&quot;</span>,<span class="string">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用\d进行匹配</span></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号</span><br><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>\D</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\D&quot;</span>, <span class="string">&quot;f&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f</span><br></pre></td></tr></table></figure><p><strong>示例5：<code>\s</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空格属于空白字符</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\sworld&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    result = match_obj.group()</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># \t 属于空白字符</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\sworld&quot;</span>, <span class="string">&quot;hello\tworld&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    result = match_obj.group()</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>示例6：<code>\S</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\Sworld&quot;</span>, <span class="string">&quot;hello&amp;world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">result = match_obj.group()</span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;hello\Sworld&quot;</span>, <span class="string">&quot;hello$world&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">result = match_obj.group()</span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello&amp;world  </span><br><span class="line">hello$world</span><br></pre></td></tr></table></figure><p><strong>示例7：<code>\w</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配非特殊字符中的一位</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\w&quot;</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure><p><strong>示例8：<code>\W</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配特殊字符中的一位</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;\W&quot;</span>, <span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br></pre></td></tr></table></figure><h3 id="4-匹配多个字符（量词）"><a href="#4-匹配多个字符（量词）" class="headerlink" title="4.  匹配多个字符（量词）"></a><strong>4.  匹配多个字符</strong>（量词）</h3><p><strong>匹配多个字符的相关格式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-4c64fdb20c4429fc06dd4d673203b341_b.jpg" alt="img"></p><p><strong>示例1：<code>\*</code></strong></p><p>需求：匹配出一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可 有可无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;Aabcdef&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">Mnn</span><br><span class="line">Aabcdef</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>+</code></strong></p><p>需求：匹配一个字符串，第一个字符是t,最后一个字符串是o,中间至少有一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;t.+o&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>?</code></strong></p><p>需求：匹配出这样的数据，但是https 这个s可能有，也可能是http 这个s没有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;https?&quot;</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>&#123;m&#125;、&#123;m,n&#125;</code></strong></p><p>需求：匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;6&#125;&quot;</span>,<span class="string">&quot;12a3g45678&quot;</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;8,20&#125;&quot;</span>,<span class="string">&quot;1ad12f23s34455ff66&quot;</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12a3g4</span><br><span class="line">1ad12f23s34455ff66</span><br></pre></td></tr></table></figure><h3 id="5-匹配开头和结尾"><a href="#5-匹配开头和结尾" class="headerlink" title="5.  匹配开头和结尾"></a><strong>5.  匹配开头和结尾</strong></h3><p><strong>匹配开头和结尾的正则表达式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-695a262b87d336824c950ac007caf25e_b.png" alt="img"></p><p><strong>示例1：<code>^</code></strong></p><p>需求：匹配以数字开头的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以数字开头的数据</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;^\d.*&quot;</span>, <span class="string">&quot;3hello&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3hello</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>$</code></strong></p><p>需求: 匹配以数字结尾的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 匹配以数字结尾的数据</span></span><br><span class="line">match_obj = re.match(<span class="string">&quot;.*\d$&quot;</span>, <span class="string">&quot;hello5&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello5</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>^ 和 $</code></strong></p><p>需求: 匹配以数字开头中间内容不管以数字结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;^\d.*\d$&quot;</span>, <span class="string">&quot;4hello4&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4hello4</span><br></pre></td></tr></table></figure><p><strong>示例4: 除了指定字符以外都匹配</strong></p><blockquote><p><strong>[^指定字符]: 表示除了指定字符都匹配</strong></p></blockquote><p>需求: 第一个字符除了aeiou的字符都匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;[^aeiou]&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h</span><br></pre></td></tr></table></figure><h3 id="6-匹配分组"><a href="#6-匹配分组" class="headerlink" title="6.  匹配分组"></a><strong>6.  匹配分组</strong></h3><p><strong>匹配分组相关正则表达式</strong></p><p><img src="/images/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/v2-795d0957376752babb4eda4d77925151_b.jpg" alt="img"></p><p><strong>示例1：<code>|</code></strong></p><p>需求：在列表中[“apple”, “banana”, “orange”, “pear”]，匹配apple和pear</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 水果列表</span></span><br><span class="line">fruit_list = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数据</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> fruit_list:</span><br><span class="line">    <span class="comment"># |    匹配左右任意一个表达式</span></span><br><span class="line">    match_obj = re.match(<span class="string">&quot;apple|pear&quot;</span>, value)</span><br><span class="line">    <span class="keyword">if</span> match_obj:</span><br><span class="line">        print(<span class="string">&quot;%s是我想要的&quot;</span> % match_obj.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;%s不是我要的&quot;</span> % value)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apple是我想要的</span><br><span class="line">banana不是我要的</span><br><span class="line">orange不是我要的</span><br><span class="line">pear是我想要的</span><br></pre></td></tr></table></figure><p><strong>示例2：<code>( )</code></strong></p><p>需求：匹配出163、126、qq等邮箱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;4,20&#125;@(163|126|qq|sina|yahoo)\.com&quot;</span>, <span class="string">&quot;hello@163.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    <span class="comment"># 获取分组数据</span></span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello@163.com</span><br><span class="line">163</span><br></pre></td></tr></table></figure><p>需求: 匹配qq:10567这样的数据，提取出来qq文字和qq号码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;(qq):([1-9]\d&#123;4,10&#125;)&quot;</span>, <span class="string">&quot;qq:10567&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    <span class="comment"># 分组:默认是1一个分组，多个分组从左到右依次加1</span></span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 提取第二个分组数据</span></span><br><span class="line">    print(match_obj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qq</span><br><span class="line">10567</span><br></pre></td></tr></table></figure><p><strong>示例3：<code>\num</code></strong></p><p>需求：匹配出<code>hh</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;[a-zA-Z1-6]+&gt;.*&lt;/[a-zA-Z1-6]+&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;hh&lt;/div&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">match_obj = re.match(<span class="string">&quot;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\1&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;hh&lt;/div&gt;</span><br><span class="line">&lt;html&gt;hh&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>需求：匹配出<code>www.baidu.cn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;([a-zA-Z1-6]+)&gt;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\2&gt;&lt;/\\1&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>示例4：<code>(?P)</code></strong> <strong><code>(?P=name)</code></strong></p><p>需求：匹配出<code>www.baidu.cn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match_obj = re.match(<span class="string">&quot;&lt;(?P&lt;name1&gt;[a-zA-Z1-6]+)&gt;&lt;(?P&lt;name2&gt;[a-zA-Z1-6]+)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;h1&gt;www.baidu.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="7-re模块的高级用法"><a href="#7-re模块的高级用法" class="headerlink" title="7.  re模块的高级用法"></a><strong>7.  re模块的高级用法</strong></h3><p><strong>&lt;1&gt; search</strong></p><p>需求：匹配出水果的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据正则表达式查找数据，提示：只查找一次</span></span><br><span class="line"><span class="comment"># 1.pattern: 正则表达式</span></span><br><span class="line"><span class="comment"># 2.string: 要匹配的字符串</span></span><br><span class="line">match_obj = re.search(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;水果有20个 其中苹果10个&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 获取匹配结果数据</span></span><br><span class="line">    print(match_obj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p><strong>&lt;2&gt; 查找多个字符findall</strong></p><p>需求：匹配出多种水果的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = re.findall(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;苹果10个 鸭梨5个 总共15个水果&quot;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;10&#x27;, &#x27;5&#x27;, &#x27;15&#x27;]</span><br></pre></td></tr></table></figure><p><strong>&lt;3&gt; sub 将匹配到的数据进行替换</strong></p><p>需求：将匹配到的评论数改成22</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern: 正则表达式</span></span><br><span class="line"><span class="comment"># repl: 替换后的字符串</span></span><br><span class="line"><span class="comment"># string: 要匹配的字符串</span></span><br><span class="line"><span class="comment"># count=0 替换次数，默认全部替换 , count=1根据指定次数替换</span></span><br><span class="line">result = re.sub(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;评论数:10 赞数:20&quot;</span>, count=<span class="number">1</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">评论数:22 赞数:20</span><br></pre></td></tr></table></figure><p>需求：将匹配到的阅读数加1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># match_obj:该参数系统自动传入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">match_obj</span>):</span></span><br><span class="line">    <span class="comment"># 获取匹配结果的数据</span></span><br><span class="line">    value = match_obj.group()</span><br><span class="line">    result = <span class="built_in">int</span>(value) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 返回值必须是字符串类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(result)</span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">&quot;\d+&quot;</span>, add, <span class="string">&quot;阅读数:10&quot;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阅读数:11</span><br></pre></td></tr></table></figure><p><strong>&lt;4&gt; split 根据匹配进行切割字符串，并返回一个列表</strong></p><p>需求：切割字符串”貂蝉,杨玉环:西施,王昭君”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 正则</span></span><br><span class="line"><span class="comment"># 2. 要匹配的字符串</span></span><br><span class="line"><span class="comment"># maxsplit=1 分割次数， 默认全部分割</span></span><br><span class="line">result = re.split(<span class="string">&quot;,|:&quot;</span>, my_str, maxsplit=<span class="number">1</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;貂蝉&#x27;, &#x27;杨玉环:西施,王昭君&#x27;]</span><br></pre></td></tr></table></figure><h3 id="8-贪婪和非贪婪"><a href="#8-贪婪和非贪婪" class="headerlink" title="8.  贪婪和非贪婪"></a><strong>8.  贪婪和非贪婪</strong></h3><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p><strong>在”*“,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</strong>（当？在匹配单个字符的后面时，就是匹配0次或1次）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;This is a number 234-235-22-423&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">&quot;.+(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;4-235-22-423&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">&quot;.+?(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;234-235-22-423&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>正则表达式模式中使用到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满足匹配最长字符串，在我们上面的例子里面，“.+”会从字符串的启始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配，所以它匹配了数字“4”，而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p><p><strong>解决方式：非贪婪操作符“？”，这个操作符可以用在”*“,”+”,”?”的后面，这样?前面的正则表达式不能匹配?后面正则表达式的数据</strong></p><h3 id="9-r的作用"><a href="#9-r的作用" class="headerlink" title="9. r的作用"></a><strong>9. r的作用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm = <span class="string">&quot;c:\\a\\b\\c&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm</span><br><span class="line"><span class="string">&#x27;c:\\a\\b\\c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mm)</span><br><span class="line">c:\a\b\c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">&quot;c:\\\\&quot;</span>,mm).group()</span><br><span class="line"><span class="string">&#x27;c:\\&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">&quot;c:\\\\&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">&quot;c:\\\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\a&quot;</span>,mm).group()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>说明</p><p><strong>Python中字符串前面加上 r 表示原生字符串，数据里面的反斜杠不需要进行转义，针对的只是反斜杠</strong></p><p>Python里的原生字符串很好地解决了这个问题，有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><p><strong>建议: 如果使用使用正则表达式匹配数据可以都加上r，要注意r针对的只是反斜杠起作用，不需要对其进行转义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r&quot;c:\\a&quot;</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br></pre></td></tr></table></figure><p>转载自：</p><p>作者：程序员小贤<br>链接：<a href="https://zhuanlan.zhihu.com/p/124167195">https://zhuanlan.zhihu.com/p/124167195</a><br>来源：知乎</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;正则表达式学习&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>b站视频下载器</title>
    <link href="http://example.com/2021/03/27/b%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <id>http://example.com/2021/03/27/b%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%99%A8/</id>
    <published>2021-03-27T12:18:29.000Z</published>
    <updated>2021-03-27T13:31:29.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>接上一篇，用Tkinter库做了一个下载器的界面</p></blockquote><a id="more"></a><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">version2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">功能：</span></span><br><span class="line"><span class="string">下载单个视频</span></span><br><span class="line"><span class="string">下载弹幕</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原理：</span></span><br><span class="line"><span class="string">界面是用python自带的Tkinter做的</span></span><br><span class="line"><span class="string">音频视频合成使用了第三方工具ffmpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author：</span></span><br><span class="line"><span class="string">pb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> scrolledtext</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标题中的不合法字符去掉，以便能够作为文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_title</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  下载视频,  url:b站视频链接    path:视频保存路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validate_title(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置音频和纯视频的保存位置</span></span><br><span class="line">    audio_filename = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line">    video_filename = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;_纯视频.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(audio_filename)</span></span><br><span class="line">    <span class="comment"># print(video_filename)</span></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(audio_filename, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line">    <span class="comment"># print(&#x27;音频下载完毕！&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(video_filename, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line">    <span class="comment"># print(&#x27;视频下载完毕！&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置合成后视频的保存位置</span></span><br><span class="line">    merge_video_filename = video_filename.strip(<span class="string">&#x27;_纯视频.mp4&#x27;</span>) + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    print(os.getcwd())  <span class="comment"># 获取当前工作目录路径</span></span><br><span class="line">    print(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))  <span class="comment"># 获取当前工作目录路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若该视频已存在则删除</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(merge_video_filename):</span><br><span class="line">        os.remove(merge_video_filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(os.path.isfile(merge_video_filename))</span></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    print(<span class="string">&#x27;视频正在下载中...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># os.system(f&#x27;ffmpeg -i &#123;audio_filename&#125; -i &#123;video_filename&#125; -c copy &#123;merge_video_filename&#125; -loglevel quiet&#x27;)</span></span><br><span class="line">    print(<span class="string">&#x27;视频下载完毕！&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打包后将ffmpeg所在文件夹放在文件同一目录下</span></span><br><span class="line">    cmd = <span class="string">f&#x27;<span class="subst">&#123;os.getcwd()&#125;</span>/FFmpeg/bin/ffmpeg -i <span class="subst">&#123;audio_filename&#125;</span> -i <span class="subst">&#123;video_filename&#125;</span> -c copy <span class="subst">&#123;merge_video_filename&#125;</span> -y&#x27;</span></span><br><span class="line">    subprocess.call(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合成后视频的大小</span></span><br><span class="line">    res_size = <span class="built_in">int</span>(os.stat(merge_video_filename).st_size / <span class="number">1024</span>)</span><br><span class="line">    res_size1 = <span class="built_in">int</span>(res_size / <span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;new_title&#125;</span>视频文件的大小为：<span class="subst">&#123;res_size&#125;</span>KB,<span class="subst">&#123;res_size1&#125;</span>MB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移除纯视频和纯音频</span></span><br><span class="line">    os.remove(audio_filename)</span><br><span class="line">    os.remove(video_filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_title, res_size1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载弹幕  url:b站视频链接    path:弹幕保存路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_danmu_download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    content = response.text</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 起个别名，防止不符合文件名称要求</span></span><br><span class="line">    new_title = validate_title(video_title)</span><br><span class="line">    danmu_file = path + <span class="string">&quot;/&quot;</span> + new_title + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个视频都有一个自己独特的oid</span></span><br><span class="line">    oid = re.findall(<span class="string">&#x27;&quot;cids&quot;:&#123;&quot;1&quot;:\d*&#x27;</span>, content)[<span class="number">0</span>].split(<span class="string">&quot;\&quot;:&quot;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">    url = <span class="string">&#x27;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(oid)</span><br><span class="line">    response_danmu = requests.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 防止中文乱码</span></span><br><span class="line">    response_danmu.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    p = response_danmu.text.split(<span class="string">&quot;&lt;d p=&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(danmu_file, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 清除文件内容，防止</span></span><br><span class="line">        f.truncate(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">            each_danmu = (i.split(<span class="string">&quot;&gt;&quot;</span>))[<span class="number">1</span>].replace(<span class="string">&quot;&lt;/d&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">            f.write(each_danmu + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    window = Tk()</span><br><span class="line">    window.title(<span class="string">&quot;bilibili视频下载器_version1.0_pb&quot;</span>)</span><br><span class="line">    window.geometry(<span class="string">&#x27;450x290&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    l1 = Label(window, text=<span class="string">&#x27;视频url&#x27;</span>)</span><br><span class="line">    l1.grid(row=<span class="string">&#x27;0&#x27;</span>, column=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    l1 = Label(window, text=<span class="string">&#x27;选择文件夹&#x27;</span>)</span><br><span class="line">    l1.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="comment"># 输入视频url</span></span><br><span class="line">    txt1 = Entry(window, width=<span class="number">40</span>)</span><br><span class="line">    txt1.grid(row=<span class="string">&#x27;0&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置焦点位置</span></span><br><span class="line">    txt1.focus()</span><br><span class="line">    <span class="comment"># 选择视频保存位置</span></span><br><span class="line">    txt2 = Entry(window, width=<span class="number">40</span>)</span><br><span class="line">    txt2.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn1_clicked</span>():</span></span><br><span class="line">        directory = filedialog.askdirectory()</span><br><span class="line">        txt2.insert(<span class="number">0</span>, directory)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn2_clicked</span>():</span></span><br><span class="line">        <span class="comment"># txt3.insert(&#x27;insert&#x27;, &#x27;视频正在下载中...\n&#x27;)</span></span><br><span class="line">        url = txt1.get()</span><br><span class="line">        path = txt2.get()</span><br><span class="line">        new_title, size = bilibili_video_download(url, path)</span><br><span class="line">        txt3.insert(<span class="string">&#x27;insert&#x27;</span>, new_title + <span class="string">&#x27;\n视频下载完毕！大小为：&#123;&#125;Mb\n\n&#x27;</span>.<span class="built_in">format</span>(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn3_clicked</span>():</span></span><br><span class="line">        url = txt1.get()</span><br><span class="line">        path = txt2.get()</span><br><span class="line">        new_title = bilibili_danmu_download(url, path)</span><br><span class="line">        txt3.insert(<span class="string">&#x27;insert&#x27;</span>, new_title + <span class="string">&#x27;\n弹幕下载完毕！\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 浏览保存位置按钮</span></span><br><span class="line">    btn1 = Button(window, text=<span class="string">&quot;浏览&quot;</span>, command=btn1_clicked)</span><br><span class="line">    btn1.grid(row=<span class="string">&#x27;1&#x27;</span>, column=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频按钮</span></span><br><span class="line">    btn2 = Button(window, text=<span class="string">&#x27;下载视频&#x27;</span>, command=btn2_clicked)</span><br><span class="line">    btn2.grid(row=<span class="string">&#x27;2&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>, sticky=<span class="string">&#x27;w&#x27;</span>, padx=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载弹幕按钮</span></span><br><span class="line">    btn3 = Button(window, text=<span class="string">&#x27;下载弹幕&#x27;</span>, command=btn3_clicked)</span><br><span class="line">    btn3.grid(row=<span class="string">&#x27;2&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>, sticky=<span class="string">&#x27;e&#x27;</span>, padx=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出显示</span></span><br><span class="line">    txt3 = scrolledtext.ScrolledText(window, width=<span class="number">40</span>, height=<span class="number">10</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">    txt3.grid(row=<span class="string">&#x27;3&#x27;</span>, column=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    window.mainloop()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/b/image-20210327202118165.png"></p><p><img src="/images/b/image-20210327202226881.png"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;接上一篇，用Tkinter库做了一个下载器的界面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取bilibili视频</title>
    <link href="http://example.com/2021/03/23/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2021/03/23/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/</id>
    <published>2021-03-23T14:09:29.000Z</published>
    <updated>2021-03-27T12:27:28.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>任意给bilibili视频链接下载视频到本地</p></blockquote><a id="more"></a><p>直接贴代码，如下：</p><p>b站的视频和音频是分开的，所以请求的时候分开请求，最后再合并即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateTitle</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validateTitle(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ffmpeg -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp3&quot; -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp4&quot; -c copy &quot;<span class="subst">&#123;new_title&#125;</span>merge.mp4&quot; -loglevel quiet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.bilibili.com/video/BV1xx411c7yK&#x27;</span></span><br><span class="line">    bilibili_video_download(url)</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li><p>若运行不成功，看是否下载了ffmpeg，参考<a href="https://blog.csdn.net/pythonlaodi/article/details/109222790?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=1328689.95.16165087717508347&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">https://blog.csdn.net/pythonlaodi/article/details/109222790?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=1328689.95.16165087717508347&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control</a></p></li><li><p>不要尝试去下载番剧和电影（要是能成功，版权费你出？）格式为这样的可以下载成功<a href="https://www.bilibili.com/video/xxxxxxx">https://www.bilibili.com/video/xxxxxxx</a></p></li><li><p>下载后会生成三个文件（纯视频、纯音频、视频和音频合并后的视频）</p></li></ul><hr><p>3.24更新</p><p>批量爬取bilibili某一模块的视频，例如街舞模块</p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180307472.png" alt="image-20210324180307472"></p><p>这次我们采用请求js返回json数据的方式提取信息，找到下面圈起来的这个js数据，那么为什么是这个呢？</p><p>我们采取翻页的方式，发现每次翻页都多出来这个请求</p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180504048.png"></p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateTitle</span>(<span class="params">title</span>):</span></span><br><span class="line">    rstr = <span class="string">r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;</span>  <span class="comment"># &#x27;/ \ : * ? &quot; &lt; &gt; |&#x27;</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">&quot;_&quot;</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bilibili_video_download</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># response_1代表每个视频具体的信息</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    video_title = <span class="built_in">str</span>(soup.title.text).split(<span class="string">&#x27;_哔哩哔哩&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 将数据转换成py格式的数据</span></span><br><span class="line">    py_data1 = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    url_str = py_data1.xpath(<span class="string">&#x27;//script[contains(text(),&quot;window.__playinfo__&quot;)]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    video_download_url = re.findall(<span class="string">&#x27;&quot;video&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的视频下载链接</span></span><br><span class="line">    audio_download_url = re.findall(<span class="string">&#x27;&quot;audio&quot;:\[&#123;&quot;id&quot;:\d+,&quot;baseUrl&quot;:&quot;(.*?)&quot;,&#x27;</span>, url_str)[<span class="number">0</span>]  <span class="comment"># 提取真正的音频下载链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求得到视频和音频内容</span></span><br><span class="line">    response_video = requests.get(video_download_url, headers=headers)</span><br><span class="line">    response_audio = requests.get(audio_download_url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给视频起一个新名称，避免名称不合规范或者有重名现象</span></span><br><span class="line">    new_title = validateTitle(video_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提示信息</span></span><br><span class="line">    print(<span class="string">&quot;正在下载视频:   &quot;</span> + new_title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_audio.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载视频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_title + <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response_video.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将音频和视频合成</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ffmpeg -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp3&quot; -i &quot;<span class="subst">&#123;new_title&#125;</span>.mp4&quot; -c copy &quot;<span class="subst">&#123;new_title&#125;</span>merge.mp4&quot; -loglevel quiet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excel_write</span>(<span class="params">row_title, videos_list</span>):</span></span><br><span class="line">    f = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建 workbook 即新建 excel 文件</span></span><br><span class="line">    sheet = f.add_sheet(<span class="string">&#x27;video_download&#x27;</span>)  <span class="comment"># 新建工作簿</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入数据每列的标题</span></span><br><span class="line">    <span class="comment"># row_title = [&#x27;帖子标题&#x27;, &#x27;发表时间&#x27;, &#x27;作者&#x27;, &#x27;最新回复时间&#x27;, &#x27;评论数&#x27;, &#x27;作者昵称&#x27;, &#x27;帖子链接&#x27;]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">        sheet.write(<span class="number">0</span>, i, row_title[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行程序的时候记得将最开始的excel表格关闭，否则会报错</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(videos_list)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">            sheet.write(i + <span class="number">1</span>, j, videos_list[i][j])</span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    f.save(<span class="string">&#x27;test_bilibili_video_download_data.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># start = time.time()</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&quot;CURRENT_FNVAL=80; blackside_state=1; rpdid=|(YuRk~RRlu0J&#x27;uYuJRYkkm~; CURRENT_QUALITY=112; buvid3=2EB5FD0E-A6B5-3C06-0973-23DA8AD6801924531infoc; buvid_fp=2EB5FD0E-A6B5-3C06-0973-23DA8AD6801924531infoc; fingerprint=93e30520ea623bc88c9f8aa1a56d7e6f; buvid_fp_plain=CF6BCDB8-1436-4480-A4F6-AA520429ECB953950infoc; SESSDATA=d6c9264e%2C1631957061%2C4ee9b%2A31; bili_jct=48ad82f0fa24bb9100b84f103784fd7d; DedeUserID=438011280; DedeUserID__ckMd5=301c698cae5ab89a; sid=d1cfs18g; bfe_id=cade757b9d3229a3973a5d4e9161f3bc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    videos_list = []</span><br><span class="line">    page = <span class="number">1</span>   <span class="comment"># 爬取页面数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, page + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">&#x27;正在爬取第&#123;&#125;页...&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        url = <span class="string">&#x27;https://api.bilibili.com/x/web-interface/newlist?rid=126&amp;type=0&amp;pn=&#123;&#125;&amp;ps=20&amp;jsonp=jsonp&amp;callback=jsonCallback_bili_30441364968260533&#x27;</span>.<span class="built_in">format</span>(page)</span><br><span class="line">        url = <span class="string">&#x27;https://api.bilibili.com/x/web-interface/newlist?rid=198&amp;type=0&amp;pn=1&amp;ps=20&amp;jsonp=jsonp&amp;callback=jsonCallback_bili_45428964604399673&#x27;</span></span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        j = response.text.split(<span class="string">&#x27;(&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].strip(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将字符串转换为字典格式</span></span><br><span class="line">        dic = <span class="built_in">eval</span>(j)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            video_title = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">            <span class="comment"># 获得当前时间戳</span></span><br><span class="line">            timeStamp = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;pubdate&#x27;</span>]</span><br><span class="line">            timeArray = time.localtime(timeStamp)</span><br><span class="line">            <span class="comment"># 转换为指定的格式</span></span><br><span class="line">            video_publish_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class="line">            video_author = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;owner&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            video_url = <span class="string">&#x27;https://www.bilibili.com/video/&#x27;</span> + dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;bvid&#x27;</span>]</span><br><span class="line">            <span class="comment"># https://b23.tv/BV1Ay4y1b7D3</span></span><br><span class="line">            <span class="comment"># https://www.bilibili.com/video/BV1Ay4y1b7D3</span></span><br><span class="line">            video_face_picture_url = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line">            video_watch_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;view&#x27;</span>]</span><br><span class="line">            video_danmu_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;danmaku&#x27;</span>]</span><br><span class="line">            video_coin_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line">            video_like_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;like&#x27;</span>]</span><br><span class="line">            video_collection_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;favorite&#x27;</span>]</span><br><span class="line">            video_reply_num = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;stat&#x27;</span>][<span class="string">&#x27;reply&#x27;</span>]</span><br><span class="line">            video_duration = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;archives&#x27;</span>][i][<span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 下载视频</span></span><br><span class="line">            bilibili_video_download(video_url)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将爬取的数据写进excel</span></span><br><span class="line">            row_title = [<span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;发布时间&#x27;</span>, <span class="string">&#x27;up主&#x27;</span>, <span class="string">&#x27;视频链接&#x27;</span>, <span class="string">&#x27;视频时长&#x27;</span>, <span class="string">&#x27;观看数&#x27;</span>, <span class="string">&#x27;点赞数&#x27;</span>, <span class="string">&#x27;收藏数&#x27;</span>, <span class="string">&#x27;弹幕数&#x27;</span>, <span class="string">&#x27;评论数&#x27;</span>, <span class="string">&#x27;投币数&#x27;</span>]</span><br><span class="line">            video_list = [video_title, video_publish_time, video_author, video_url, video_duration, video_watch_num,</span><br><span class="line">                          video_like_num, video_collection_num, video_danmu_num, video_reply_num, video_coin_num]</span><br><span class="line">            videos_list.append(video_list)</span><br><span class="line">            excel_write(row_title, videos_list)</span><br></pre></td></tr></table></figure><p>可自行设定爬取的板块（通过抓取对应板块的js数据），设定需要爬取的页数，这里只爬取了一页，效果如下：</p><p><strong>控制台打印数据</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180827048.png"></p><p><strong>在原项目下多出三个文件，分别是纯视频、纯音频、合成后的视频</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324180846233.png"></p><p><strong>写入的excel文件中的数据</strong></p><p><img src="/images/%E7%88%AC%E5%8F%96bilibili%E8%A7%86%E9%A2%91/image-20210324181031676.png"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;任意给bilibili视频链接下载视频到本地&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python selenium学习</title>
    <link href="http://example.com/2021/03/10/python-selenium%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/03/10/python-selenium%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-10T09:10:08.000Z</published>
    <updated>2021-03-10T12:19:32.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>selenium 是一个好用的自动化测试库，可用来模拟浏览器的行为</p></blockquote><a id="more"></a><p>难点：如何定位？</p><h2 id="定位方法"><a href="#定位方法" class="headerlink" title="定位方法"></a>定位方法</h2><p>8种定位方式在Python selenium中所对应的方法为：</p><ul><li>find_element_by_id()</li><li>find_element_by_name()</li><li>find_element_by_class_name()</li><li>find_element_by_tag_name()</li><li>find_element_by_link_text()</li><li>find_element_by_partial_link_text()</li><li>find_element_by_xpath()</li><li>find_element_by_css_selector()</li></ul><p><strong>example1：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">&quot;#0000cc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;result_logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;return c(&#123;&#x27;fm&#x27;:&#x27;tab&#x27;,&#x27;tab&#x27;:&#x27;logo&#x27;&#125;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/s&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们的目的是要定位input标签的输入框。</p><ul><li>通过id定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过class name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过tag name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过xpath定位，xpath定位有N种写法，这里列几个常用写法:（待掌握）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;/html/body/form/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//span[@class=&#x27;soutu-btn&#x27;]/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;form&#x27;]/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27; and @name=&#x27;wd&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过css定位，css定位有N种写法，这里列几个常用写法:（待掌握）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;[name=wd]&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;.s_ipt&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;html &gt; body &gt; form &gt; span &gt; input&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;span.soutu-btn&gt; input#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;form#form &gt; span &gt; input&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>example 2</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://news.baidu.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trnews&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.hao123.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trhao123&quot;</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过link text定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;hao123&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过partial link text定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;新&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;hao&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="浏览器操作"><a href="#浏览器操作" class="headerlink" title="浏览器操作"></a>浏览器操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置浏览器窗口尺寸</span></span><br><span class="line">print(<span class="string">&quot;设置浏览器宽480、高800显示&quot;</span>)</span><br><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口全屏</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制浏览器前进或后退</span></span><br><span class="line">driver.forward()</span><br><span class="line">driver.back()</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新当前页面</span></span><br><span class="line">driver.refresh() </span><br></pre></td></tr></table></figure><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p><strong>基本用法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).clear()  <span class="comment"># 清除文本</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)  <span class="comment"># 模拟按键输入</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()  <span class="comment"># 单击元素</span></span><br><span class="line">current_url = driver.current_url  <span class="comment"># 打印当前url</span></span><br><span class="line"></span><br><span class="line">size = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).size  <span class="comment"># 获得输入框的尺寸</span></span><br><span class="line">text = driver.find_element_by_id(<span class="string">&quot;cp&quot;</span>).text  <span class="comment"># 返回百度页面底部备案信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attribute = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).get_attribute(<span class="string">&#x27;type&#x27;</span>)  <span class="comment"># 返回元素的属性值， 可以是 id、 name、 type 或其他任意属性</span></span><br><span class="line">result = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).is_displayed()  <span class="comment"># 返回元素的结果是否可见， 返回结果为 True 或 False</span></span><br></pre></td></tr></table></figure><p><strong>ActionChains 类提供了鼠标操作的常用方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">perform()： 执行所有 ActionChains 中存储的行为；</span><br><span class="line"></span><br><span class="line">context_click()： 右击；</span><br><span class="line"></span><br><span class="line">double_click()： 双击；</span><br><span class="line"></span><br><span class="line">drag_and_drop()： 拖动；</span><br><span class="line"></span><br><span class="line">move_to_element()： 鼠标悬停。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure><p> <strong>keys 类提供了键盘上几乎所有按键的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 Keys 模块</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;seleniumm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多输入的一个 m</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.BACK_SPACE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入空格键+“教程”</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.SPACE)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;教程&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+v 粘贴内容到输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过回车键来代替单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).send_keys(Keys.ENTER)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="多表单切换"><a href="#多表单切换" class="headerlink" title="多表单切换"></a>多表单切换</h2><p>在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;x-URS-iframe&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>126邮箱登录框的结构大概是这样子的，想要操作登录框必须要先切换到iframe表单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.126.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在iframe会带上每次打开自动变化的ID，直接通过id很可能会报错</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;x-URS-iframe&#x27;</span>)  <span class="comment"># 切换iframe表单</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;dologin&quot;</span>).click()</span><br><span class="line">driver.switch_to.default_content()  <span class="comment"># 跳回最外层的页面</span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><code>switch_to.frame()</code> 默认可以<strong>直接取表单的id 或name属性</strong>。如果iframe没有可用的id和name属性，则可以通过下面的方式进行定位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="comment">#先通过xpth定位到iframe</span></span><br><span class="line">xf = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;x-URS-iframe&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># xf = driver.find_element_by_css_selector(&quot;iframe[id^=&#x27;x-URS-iframe&#x27;]&quot;)</span></span><br><span class="line"><span class="comment">#再将定位对象传给switch_to.frame()方法</span></span><br><span class="line">driver.switch_to.frame(xf)</span><br><span class="line">……</span><br><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><p>除此之外，在进入多级表单的情况下，还可以通过<code>switch_to.default_content()</code>跳回最外层的页面。</p><h2 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得窗口句柄</span></span><br><span class="line">sreach_windows = driver.current_window_handle</span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口的句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"><span class="comment"># 用于切换到相应的窗口</span></span><br><span class="line">driver.switch_to.window(handle)</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：还有一些用法没有列举出来，元素定位是主要难点</p><p>参考链接：<a href="http://www.testclass.net/selenium_python">http://www.testclass.net/selenium_python</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;selenium 是一个好用的自动化测试库，可用来模拟浏览器的行为&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python爬虫知识学习</title>
    <link href="http://example.com/2021/03/09/python%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/03/09/python%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-09T14:03:13.000Z</published>
    <updated>2021-03-10T04:13:52.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自github Kr1s77 大佬的总结</p></blockquote><a id="more"></a><p>模拟请求时，先在headers中加入<code>User-Agent</code>,如果还不可以请求再尝试加入<code>Referer</code>,还无法访问，在尝试加入<code>Cookie</code>,在最后可以尝试加入<code>Host</code>.</p><p><strong>1.json数据解析</strong></p><ul><li>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式</li><li>JSON相关的方法<ul><li>json.loads json字符串 转 Python数据类型</li><li>json.dumps Python数据类型 转 json字符串</li><li>json.load json文件 转 Python数据类型</li><li>json.dump Python数据类型 转 json文件</li></ul></li><li>jsonpath 是一种语法规则快速从 JSON 数据中提取数据。</li><li>jsonpath 基本语法<ul><li>$ 根节点</li><li>. 下一个节点</li><li>.. 子孙节点</li><li>[] 筛选条件，可以编写下标</li></ul></li></ul><p><strong>2.response.content 和response.text 的区别？</strong><br>response.text<br>类型是：str类型<br>解码类型：根据HTTP头部对响应的编码做出有根据的推测</p><p>response.content<br>类型：bytes<br>解码类型：没有指定</p><p>为什么这个程序是报错的？？？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response_text = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;F://url_text//total_url.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response_text)</span><br></pre></td></tr></table></figure><p>response.content是直接从网络上面抓取的数据,没有经过任何解码,所以是一个 bytes类型,硬盘上的数据和在网络上传输的字符串都是 bytes类型，所以不会报错。</p><p>response.content是直接从网络上面抓取的数据,没有经过任何解码,所以是一个 bytes类型,硬盘上的数据和在网络上传输的字符串都是 bytes类型，所以不会报错。</p><p>相对于response.text返回的是字符串类型的数据，固然会报类型错误！</p><ul><li>所以若要把响应的内容写进文件中，需要用response.content</li><li>要获取文本类型的相应内容，需要用response.text</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;来自github Kr1s77 大佬的总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是情绪价值</title>
    <link href="http://example.com/2021/03/09/%E4%BB%80%E4%B9%88%E6%98%AF%E6%83%85%E7%BB%AA%E4%BB%B7%E5%80%BC/"/>
    <id>http://example.com/2021/03/09/%E4%BB%80%E4%B9%88%E6%98%AF%E6%83%85%E7%BB%AA%E4%BB%B7%E5%80%BC/</id>
    <published>2021-03-09T07:52:00.000Z</published>
    <updated>2021-03-09T10:53:36.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>缘由是看到一个帖子是关于物质价值和情绪价值的，物质价值大家都懂，什么是情绪价值呢？</p></blockquote><a id="more"></a><p>以前也看过许多情绪和心理的文章，也想过很多次，思考过一段时间</p><p>我最后得出的结论是：在自身情绪和同理心之间实现动态平衡</p><p>但是没有一个系统的理解，今天在帖子上看到情绪价值这个词，深究了一番，很有感触</p><p>以下全文摘抄自知乎，共勉</p><p>在罗兰·米勒《亲密关系》一书中，<strong>相互依赖理论指出在亲密关系中，我们都是以最小的代价获取最大的奖赏价值，所以我们只会与那些能够提供足够利益的伴侣维持亲密关系。</strong></p><p>这里所谓的奖赏，分别指两种：</p><ul><li><strong>通过与人接触获得有实体的、令我们满意的物品或；</strong></li><li><strong>通过与人接触所带来的愉悦感、成就感等无形的奖励。</strong></li></ul><p>第一点的原理是由经济人（Homo economicus）的视角出发，<strong>即我们的思考和行为都是绝对理性的，都是为了达成目标，只要物质补偿足够大，那就可以满足我们的一切需求。</strong></p><p>第二点的原理是由复杂人（Complex man）的视角出发，<strong>它指出我们的动机、行为以及感受不仅仅受物质资源的客观因素影响，同时还会受到自尊、情绪以及信念等主观的因素影响。</strong></p><p>而情绪价值就是这些能够影响到自尊、情绪、安全感的主观因素。</p><p>举个栗子：</p><p>女孩下午和老板一起去见客户，但是表现不太好，回来的时候被老板训了一通；</p><p>回家之后就找男朋友诉苦：“今天气死我了，balabala（当时的情景）…我觉得我没做错啊”；</p><p>憨憨男友想了想，觉得女孩确实没做对，然后就给她说哪做错了，然后可以怎么怎么改进巴拉巴拉…</p><p>女孩一下就火了，想不通为什么外面受气，回家还要受气，情绪一起来就要吵架；</p><p>男生也觉得冤枉，被劈头盖脸一顿骂，火气也起来了。</p><p>我问问大家，</p><p><strong>首先，女生此时的需求是什么？</strong></p><p>是上文中说的<strong>第一种奖赏价值（实质价值），还是第二种奖赏价值呢（情绪价值）？</strong></p><p>男生的理解是：现在是女友在寻求物质的需求，即怎么才能避免工作中的失误。</p><p>所以他的当务之急是告诉女朋友正确的处事方式，然后为下次工作做好准备。这样女友就不会出错，也不会不高兴了。</p><p>很显然，除开实质上的需求，女孩回来讲这个事情，从第一句到最后一句全是充斥着情绪的，她还很需要一种情绪层面上的奖赏和价值。</p><p>而这个男生完全忽略了这一点的需求，而忽略情绪价值的重要性就会让他们不断吵架。</p><blockquote><p>这个例子就非常典型，在我们与父母之间的相处也经常会发生</p><p>本意都是为对方着想，但好心办了坏事，没有考虑到对方想要的是<strong>实质价值</strong>还是<strong>情绪价值</strong></p><p>我觉得有一个很好的办法就是，先从情绪价值入手，然后推进到实质价值，类似于先考虑到对方的情绪，再给与建议，这样会不会缓和很多呢？</p></blockquote><p><strong>一、情绪价值的意义在哪</strong></p><p>其实相互流露情绪，就是所谓的自我暴露（<strong>Self-disclosure</strong>），这是一种人类天生的，增进关系的一种行为。但是你看，<strong>很多人相互交流，相互流露情绪反而关系越是水深火热。</strong></p><p>就像上面的男生一样，他的行为确实很蠢，但是他的动机呢？——是不是也是为了女友好呀，好心办坏事，一片好意到了对方耳朵里就成了蓄意气人了。</p><p>这是<strong>因为两个人的成长环境、生活习惯是不一样的，在如何相互喜欢、相互吸引的两个人，也会因为认知、信念的不同导致分歧。</strong></p><p>这些分歧会本身就是两个人亲密关系中的阻碍，像一个很难过的关卡，这个关卡会污染双方的信息一样，最后导致货不对板。让真心诚意的一句话、一个行为变成了坏事。</p><p>面对两个人生活认知习惯都有偏差的情况下，情绪价值的价值就完全体现出来了。</p><p><strong>因为情绪价值就像是夹心饼干的两层饼干一样，把你要表达的事实保护在中间，不受认知偏差的扭曲。</strong></p><p>其实我们的内容始终都是一个：</p><p>就是我希望你好。</p><p>其实这是特别积极的一个内容，但是却很容易变成一种攻击的形式。</p><ul><li>“你的习惯怎么这么差啊，全是坏习惯不知道改改？”——潜台词：你现在的习惯很可能会伤害你，你要学会保护自己啊。</li></ul><ul><li>“说几遍你都不听，你是根本把我的话当成耳边风是吗？”——潜台词：我希望你能对我多在意一点，不然我会感觉很难过。</li></ul><ul><li>“这个就是你做错了啊，你没弄对才错的，你应该这样做才对…”——潜台词：别担心，虽然这次做错了，但是我可以帮你不再做错。</li></ul><ul><li>“这有什么好伤心的，就这么一件小事还难过。”——潜台词：我知道你很伤心，但我希望你能够不要这么伤心，我希望你快乐起来。</li></ul><p>当没有认知偏差的时候，两层饼干外壳可以让你说的话更加动听，让对方更加容易接受；</p><p>当有认知偏差的时候，情绪价值能够给对方提供良好的感受，不会让对方觉得你是在攻击他，所以你想表达的内容也可以传达到对方那里。</p><p>上面的原话就是没有带情绪价值的表达。<strong>从潜台词变成话说出来的时候，你自己只听得到自己的潜台词，但是人家听起来就是刺耳，就是攻击。</strong></p><p>如果有空，你可以试试哪天没事把自己和对方的对话录下来（和家人的也行），等你想起来再拿出来听听，自己品品自己说的话，很可能吓一跳自己怎么会说出那种话。</p><p><strong>二、提供情绪价值的条件</strong></p><p>其实很多人都在说，要给对方提供情绪价值。但如果没有主动有意识的做过这件事的人，会很难体会这种感觉。</p><p>你知道你该提供，你也很想提供，但你以前从没有提供过，甚至今天才具体指导情绪价值是什么东西。</p><p>所以远叔想了很久，终于抛开那些复杂的概念。其实提供情绪价值的前提，以及唯一触发条件就是一个：<strong>具有同理心。</strong></p><p><strong>同理心（Empathy）指自己能够把握与理解到对方的情绪、动机、认知以及态度的一种能力。</strong></p><p><strong>简单来说就是将心比心，换位思考，设身处地的在别人的角度来思考事件。</strong></p><p><strong>①男生/女生同理心能力的优势不同</strong>（有点偏颇，看具体的人）</p><p>一开始的例子里面也看得出来，男生的思维是很实际的，偏向的是实质的价值：</p><ul><li>如果能帮上一个忙，男生会非常开心；</li><li>男生收礼物时，对实用的工具类礼物更倾心（所以一般送电子产品一般都没问题）；</li><li>当你寻求帮助的时候，男生第一目标是解决具体的问题；（是我没错了，解决问题的感觉真的很棒</li></ul><p>而女生的思维则是很浪漫的，偏向的是非实体的价值：</p><ul><li>面对帮忙的情况，女生做的更多是陪伴，照顾你的情绪；</li><li>女生收礼物的时候，实用也好，不实用也好，主要是看有没有真的用心（所以随便在淘宝上搜一个礼物就是没有用心，会让人感觉到很敷衍）；</li><li>当你寻求帮助的时候，女生的第一目标是让你先不要这么难过；</li></ul><p>所以<strong>你要提供情绪价值的时候，就要照着对方同理心优势的方向去提供。</strong></p><p>比如男生想要给女生提供情绪价值，就要多着重于对方的情绪，不要急于解决她的问题，而是先照顾她的情绪；</p><p>同时男生在平常生活中，其实可以更多的向对方展现自己的脆弱面，或者向女生倾诉自己的情绪，女孩子会非常乐意陪伴并且处理这些情绪。</p><p>如果女生想要给男生提供情绪价值，就要更多集中在他的需求上，对他所做的具体事情做出肯定。</p><p>女生相较男生在捕捉情绪的能力上要更细腻一些，所以在平时的生活中可以把一些实际的问题留给男生，他们会非常乐意来接手这些具体的麻烦事。</p><p><strong>②意识到对方的本意</strong></p><p>一定要记住对方给你说这些事，本意都是想要亲近你。</p><p>其实你要到这点想：<strong>对方把这些抱怨给你说，是非常信任你的一种表现，他没有其他人可以说了嘛，只有你。</strong></p><p>都说我们对最亲密的人最不伪装，最放肆，所以我们也很容易伤害到对方。</p><p>现在你就要把这个事情反过来想了，他是伤害到你了这是事实，如果他知道他伤害到你了，其实也会很内疚。所以你现在真的要跳过向他确认本意的步骤，二话不说直接反过来伤害他吗？</p><p>虽然说这样好像挨了一顿闷拳，有苦说不出，挺难受的。但是如果你再爆发回去，对方也会感觉很无辜，这样一来两个人就都会进入委屈和愤怒的双重状态，然后就永远失去了相互澄清，相互理解这次矛盾的空间和机会了。</p><blockquote><p>叫做你不服输我也不服输，大家都破罐子破摔呗，哈哈哈</p><p>这样不好</p></blockquote><p><strong>有了同理心，其实本身就具备提供情绪价值的能力了。避免很多冲突，承接对方情绪和缓解冲突的激烈程度，就是在提供一种情绪价值</strong>。</p><p>因为这种表现就是在用身体告诉对方：没关系，你做得再差，我也可以接受。</p><p>这种姿态其实就是在给对方传达一个信息：<strong>你在我的身边是安全的，我不会恶意地伤害你。对方接受到这个信息之后，就会产生安全感。</strong></p><p><strong>而这个安全感就是情绪价值中特别重要的一点，重要到什么地步呢。</strong></p><p><strong>在斯滕伯格的爱情三角（Triangular theory of love）之中，激情之爱、亲密之爱以及承诺之爱，情绪价值所带来的安全感贯穿了亲密与承诺两个要素。</strong></p><p>如果在物质价值层面，一个足够的安全感可能等于房子、车子、家庭背景、样貌身材等等…并不是说这些物质价值是不好的，而是说在情绪价值层面上能够达到的效果，可能比这些拼命才能争取到的资源的效果还要好，还要快，所以大家一定要重视情绪价值。</p><p><strong>三、如何主动提供情绪价值</strong></p><p>上面说的都是比较被动的局面，也是提供情绪价值的大概纲领。</p><p>现在远叔说一些干货，确保你能够根据自己情况马上上手试一下，然后马上体验——你提供的情绪价值越多，对方回报的情绪价值就越多。</p><p><strong>①展现自己的兴趣</strong></p><p>对他人的兴趣，就是把他人当做主角。什么叫做主角呢，就是世界都是围绕他再转，他想干什么就干什么，他想说什么就说什么。</p><p>当然现实生活中不可能达到这样的条件，但是你可以创造出一个虚拟的，小型的主人公情景。<strong>在这里你提供的是情绪价值中的自尊感以及存在感，这些都是人们在现实世界中永恒追求的价值。</strong></p><p>在这个情景中，对方说的话永远排在第一位，也就是说没有人去打断。其实具体的操作就是倾听，让对方讲，自己绝对不插嘴，绝对不发表自己的看法。但是，要有一个细节，那就是加入反馈，认可的反馈。</p><p>首先是语言上的：</p><ul><li>“嗯嗯”、“哦哦”、“原来如此”这类词——在他说完一段话之后，对他说的话进行反馈，表示你正在听他说话。</li></ul><ul><li>“啊，真的吗？”、“之后怎么样了啊？”之类的提问——在你感觉他要说到重点之前的一两句话时（这个需要相互了解，以及长期的练习才能抓住），用来引导他说高潮和重点的部分。</li></ul><p>然后是肢体动作上的：</p><ul><li>眼睛一定要看着对方，可以看眼睛，也可以看眉心；</li><li>谈话时轻松的内容可以微笑，谈话时严肃的内容可以微皱眉头以表示关心；</li><li>频频点头，不要就点一下，一次最少点两下，总之不要太刻意，越自然随便越好；</li><li>模仿对方的情绪，对方笑你就笑，对方叹气你就咂嘴；</li></ul><p>这些语言和行为都是表明，你正在听对方讲话，而且非常的投入（至少表面上看着是），对方就会感觉很爽，感觉暂时的成为了世界中心。</p><p><strong>试问，这么一个完美的交流环境，来过一次，谁不想来第二次呢？</strong></p><p><strong>②表达自己的理解</strong></p><p>既然是交流，那你不可能永远都像上面那样，只倾听不发言。但是一旦发言，就很容易产生攻击，所以你要先展现出非敌意的状态，也就是理解对方的态度。</p><p>要展现出非敌意，直白点说就是：我和你是一个战线的。你说的就是对的，你做的就是对的，你说谁错就是谁错，你说什么就是什么。这里提供的是安全感以及存在感的情绪价值。</p><p>听起来很离谱，既然是交流，那肯定会有摩擦，会有相反的思想和建议。</p><p>我们通常都是以自己为中心，所以一句话里面的重点永远是自己，句式就像下面：</p><p><strong>对方的事 + 转折词 + 自己的想法</strong></p><p>● “这个事情辛苦你了，但是，我觉得你还有很多地方可以提升。”</p><p>● “我听说这次你受伤不轻没事吧？只不过，你也太不小心了吧。”</p><p>● “你的事情还是要优先处理，不过你要记着，弄完之后就来帮我啊。”</p><p>你注意一下，可以发现几乎所有人都是这么说话的，虽然听多了也习惯，但是听着就是不舒服，更别说情绪不好的时候，虽然这句话没毛病，都是在称述事实，但那听着就是个气不打一出来。</p><p>而我们现在要表达出非敌意的态度，同时也要说出自己的想法，怎么表达呢？其实很简单，转折词其实本身就有强调的作用，之前的句式是强调自己。那我们现在把转折词前后的内容颠倒一下，就是强调对方的呀：</p><p>自己的想法 + 转折词 + 对方的事</p><p>● “我觉得你还有很多地方可以提升，但是，这个事情真的辛苦你了。”</p><p>● “你这次也太不小心了，只不过，听说这次受伤不轻没事吧？”</p><p>● “你记得之后来帮我啊，不过，你的事情还是要优先处理。”</p><p>你看，整句话的信息也没有任何的改变，要传递的内容也是相同的。但简单的调换一下顺序，感受就会变得完全不一样，这就是情绪价值的作用和体现。</p><p><strong>四、在亲密关系中体会情绪价值</strong></p><p>其实说这么多理论和方法，远叔还是希望你可以多多去感受，读万卷书，行万里路。有了这些知识，相当于武装了自己，但这不代表你之后的感情之路上你就可以所向披靡。</p><p>你依然会遇到很多的挫折和困难，但远叔要说，这才是好事。因为亲密关系就是一次次挫折和困难中慢慢磨合出来的。</p><p>尼采说：杀不死我的，会让我变得更强。远叔也想说：分不开你们两个的，也会让你们更加相爱。磨难越大，之后的合力就越大。</p><p>这些理论与方法，是你的武器，但怎么使用，使用的好不好，会不会伤到对方，又会不会误伤……等等，都会在真正的亲密关系中一一得到验证。享受亲密关系带来的惊喜和感动，也不要害怕亲密关系带来的伤害和疼痛。</p><p>没有关系是平步青云的，情绪价值在于交流，亲密关系的价值在于经历。相信我，等尘埃落定之后，着身后的一切经历，都有它们自己的意义。</p><p>作者：远叔<br>链接：<a href="https://www.zhihu.com/question/326968879/answer/1640435890">https://www.zhihu.com/question/326968879/answer/1640435890</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;缘由是看到一个帖子是关于物质价值和情绪价值的，物质价值大家都懂，什么是情绪价值呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="摘录" scheme="http://example.com/tags/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫之beautifulsoup</title>
    <link href="http://example.com/2021/03/07/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/"/>
    <id>http://example.com/2021/03/07/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/</id>
    <published>2021-03-07T14:32:50.000Z</published>
    <updated>2021-03-12T14:19:47.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实验课要用到python爬虫，其中比较难的部分就是提取已经解析好的html页面，使用beautifulsoup是一种对新手比较友好的方式</p></blockquote><a id="more"></a><h2 id="之前所要做的工作"><a href="#之前所要做的工作" class="headerlink" title="之前所要做的工作"></a>之前所要做的工作</h2><p>无库装库</p><p>在beautifulsoup之前的工作是，解析网页获取网页html代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取浏览器代理头</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#豆瓣网有反爬虫机制，需要加上</span></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers) </span><br><span class="line">html = resp.text   <span class="comment">#返回html源码</span></span><br></pre></td></tr></table></figure><p>好了接下来说说怎么提取页面信息</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="节点选择"><a href="#节点选择" class="headerlink" title="节点选择"></a>节点选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.prettify()) <span class="comment">#把要解析的字符串以标准的缩进格式输出</span></span><br><span class="line">print(soup.title) <span class="comment">#获取title标签整个内容</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prettify结果省略...</span><br><span class="line">&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure><p>看下面的例子，介绍了如何从节点选择内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.title)  <span class="comment"># 获取title标签内容</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.title))  <span class="comment"># 每个节点的类型为 bs4.element.Tag</span></span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)  <span class="comment"># 当有几个p标签时只会匹配第一个</span></span><br><span class="line">print(<span class="string">&quot;下面是提取信息。。。&quot;</span>)</span><br><span class="line">print(soup.title.name)  <span class="comment"># 获取标签名称</span></span><br><span class="line">print(soup.title.string)  <span class="comment"># 标签文本内容，推荐用string</span></span><br><span class="line">print(soup.title.text)  <span class="comment"># 也是标签文本内容，但是在某些标签嵌套的情况下与上面不同</span></span><br><span class="line">print(soup.p.attrs)  <span class="comment"># 获取标签中的所有属性，他们被存放在字典中，name是唯一的所以为字符串，而一个节点元素class属性可能有很多个，用列表存储</span></span><br><span class="line">print(soup.p.attrs[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 下面这两种方式都能获取具体的属性值</span></span><br><span class="line">print(soup.p[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">print(soup.head.title.name)  <span class="comment"># 筛选head后得到的还是Tag类型，所以可以继续筛选</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">bs4.element.Tag</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dromouse&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">下面是提取信息。。。</span><br><span class="line">title</span><br><span class="line">The Dormouse&#x27;s story</span><br><span class="line">The Dormouse&#x27;s story</span><br><span class="line">&#123;&#x27;class&#x27;: [&#x27;title&#x27;], &#x27;name&#x27;: &#x27;dromouse&#x27;&#125;</span><br><span class="line">dromouse</span><br><span class="line">dromouse</span><br><span class="line">title</span><br></pre></td></tr></table></figure><h3 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h3><p>就是先选择某个节点后选择其子孙，兄弟，父母节点的一种选择方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;span&gt;Elsie&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            hello</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.p.contents)  <span class="comment"># 筛选出p标签的直接子节点，以列表形式返回，我们注意到&lt;span&gt;标签没有被单独列出来，因为它属于子孙节点了</span></span><br><span class="line">print(<span class="string">&quot;*************直接子节点**************&quot;</span>)</span><br><span class="line">print(soup.p.children)  <span class="comment"># 同样是筛选出p标签的直接子节点，返回的是生成器类型，用for循环迭代可以输出相应内容</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.children):</span><br><span class="line">    print(i, child)</span><br><span class="line">print(<span class="string">&quot;**************所有子孙节点************&quot;</span>)</span><br><span class="line">print(soup.p.descendants)  <span class="comment"># 递归查询所有子节点，得到所有子孙节点，</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br><span class="line">print(<span class="string">&quot;**************直接父节点************&quot;</span>)</span><br><span class="line">print(soup.a.parent)  <span class="comment"># 输出结果是节点内容</span></span><br><span class="line">print(<span class="string">&quot;**************祖先节点************&quot;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(soup.a.parents))  <span class="comment"># generator类型</span></span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.parents)))  <span class="comment"># 获取祖先节点，用列表输出了它的索引和内容</span></span><br><span class="line">print(<span class="string">&quot;**************一个兄弟节点************&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Next Sibling&#x27;</span>, soup.a.next_sibling)  <span class="comment"># 下一个兄弟节点,节点类型</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.a.next_sibling))</span><br><span class="line">print(<span class="string">&#x27;Prev Sibling&#x27;</span>, soup.a.previous_sibling)  <span class="comment"># 上一个兄弟节点,节点类型</span></span><br><span class="line">print(<span class="string">&#x27;Next Siblings&#x27;</span>, <span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.next_siblings)))  <span class="comment"># 返回前面所有兄弟节点的生成器，可转化为list后处理</span></span><br><span class="line">print(<span class="string">&quot;**************所有兄弟节点************&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Prev Siblings&#x27;</span>, <span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.previous_siblings)))  <span class="comment"># 返回后面所有兄弟节点的生成器</span></span><br><span class="line">print(<span class="built_in">list</span>(soup.a.next_siblings))  <span class="comment"># 转化为list后再次处理</span></span><br><span class="line">print(<span class="built_in">list</span>(soup.a.next_siblings)[<span class="number">1</span>].string)  <span class="comment"># 转化为list后再次处理</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p>省略。。。，可以复制后自己去试</p><h3 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h3><p>主要是关于 <code>find_all()</code> 和 <code>find()</code> 方法的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询所有符合条件的元素。给它传入一些属性或文本，就可以得到符合条件的元素。</span><br><span class="line">find_all(name , attrs , recursive , text , **kwargs)</span><br><span class="line">find同上，只不过返回第一个结果</span><br></pre></td></tr></table></figure><ul><li>name，通过节点的标签名来查询节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>))  <span class="comment"># 通过节点的标签名来查询节点，返回一个列表</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>]))  <span class="comment"># bs4.element.Tag类型，可用到上面讲过的知识继续查询</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;, &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>attrs，通过每个标签中的属性名字来查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;list-1&#x27;</span>&#125;))  <span class="comment"># 查询id为 &#x27;list-1&#x27;所在的标签节点内容</span></span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;elements&#x27;</span>&#125;))  <span class="comment"># 查询name 为&#x27;elements&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于一些常用的属性，比如 id 和 class 等，我们可以不用 attrs 来传递。</span></span><br><span class="line"><span class="comment"># 比如，要查询 id 为 list-1 的节点，可以直接传入 id 这个参数。得到的结果与上面一样</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;list-1&#x27;</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">&#x27;element&#x27;</span>))  <span class="comment"># 对于 class 来说，由于 class 在 Python 里是一个关键字，所以后面需要加一个下划线</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure><ul><li>text 用来匹配节点的文本，传入的形式可以是字符串，可以是正则表达式对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Hello, this is a link&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Hello, this is a link, too&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;link&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Hello, this is a link&#x27;</span>, <span class="string">&#x27;Hello, this is a link, too&#x27;</span>]</span><br></pre></td></tr></table></figure><p>还有以下方法，同上述使用差不多</p><ul><li><code>find_parents()</code> 和 <code>find_parent()</code>：前者返回所有祖先节点，后者返回直接父节点。</li><li><code>find_next_siblings()</code> 和 <code>find_next_sibling()</code>：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</li><li><code>find_previous_siblings()</code> 和 <code>find_previous_sibling()</code>：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</li><li><code>find_all_next()</code> 和 <code>find_next()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li><li><code>find_all_previous()</code> 和 <code>find_previous()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li></ul><h2 id="爬取豆瓣电影top250"><a href="#爬取豆瓣电影top250" class="headerlink" title="爬取豆瓣电影top250"></a>爬取豆瓣电影top250</h2><p>下面是一个爬取豆瓣电影top250的练习，分析可知每页25条记录，循环10次查找即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> +<span class="built_in">str</span>(i*<span class="number">25</span>) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    div_list = soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;info&#x27;</span>)  <span class="comment"># 我们从html代码中可以看到所有电影都在一个class=&#x27;hd&#x27;的div中</span></span><br><span class="line">    print(<span class="string">&#x27;正在打印 top&#x27;</span> + <span class="built_in">str</span>((i + <span class="number">1</span>)*<span class="number">25</span><span class="number">-24</span>) + <span class="string">&#x27; 到 top&#x27;</span> + <span class="built_in">str</span>((i + <span class="number">1</span>) * <span class="number">25</span>) + <span class="string">&#x27; 的电影...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">        <span class="comment"># movie_name = each.a.span.string</span></span><br><span class="line">        movie_name = each.find_all(class_=<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].string.strip()  <span class="comment"># 得到电影中文名</span></span><br><span class="line">        <span class="comment"># movie_link = each.a.attrs[&#x27;href&#x27;]</span></span><br><span class="line">        movie_link = each.find(name=<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]  <span class="comment"># 得到电影对应的豆瓣网链接</span></span><br><span class="line">        <span class="comment"># 这里为啥用-1呢？因为有的电影没有外国名，得到的列表中只有一项</span></span><br><span class="line">        movie_other_country_name = each.find_all(class_=<span class="string">&#x27;title&#x27;</span>)[<span class="number">-1</span>].string.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27; &#x27;</span>).strip()  <span class="comment"># 电影外国名</span></span><br><span class="line">        movie_other_name = each.find_all(class_=<span class="string">&#x27;other&#x27;</span>)[<span class="number">0</span>].string.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27; &#x27;</span>).strip()  <span class="comment"># 电影别名</span></span><br><span class="line"></span><br><span class="line">        movie_score = each.find(class_=<span class="string">&#x27;rating_num&#x27;</span>).string  <span class="comment"># 电影评分</span></span><br><span class="line">        movie_type = each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>].strip() <span class="comment"># 电影类型</span></span><br><span class="line">        movie_from_country = each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-2</span>]  <span class="comment"># 电影出品国</span></span><br><span class="line">        <span class="comment"># movie_director = each.find(class_=&#x27;bd&#x27;).p.text.split(&#x27;/&#x27;)</span></span><br><span class="line">        movie_director = each.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;导演&#x27;</span>))[<span class="number">0</span>].split(<span class="string">&quot;主演&quot;</span>)[<span class="number">0</span>].strip()  <span class="comment"># 导演和主演信息</span></span><br><span class="line">        <span class="comment"># 用正则表达式将非数字去掉</span></span><br><span class="line">        movie_play_time = re.sub(<span class="string">&quot;\D&quot;</span>, <span class="string">&#x27;&#x27;</span>, each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text)  <span class="comment"># 电影上映时间</span></span><br><span class="line">        movie_review_num = each.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;评价&#x27;</span>))[<span class="number">0</span>].replace(<span class="string">&quot;人评价&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 电影评价人数</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;No.&quot;</span>, number)</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        print(movie_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_other_country_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_other_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_link, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        print(movie_review_num, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_director, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_score, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_from_country, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_type, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_play_time)</span><br></pre></td></tr></table></figure><p>列出了一部分结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正在打印 top1 到 top25 的电影...</span><br><span class="line">No. <span class="number">1</span></span><br><span class="line">肖申克的救赎The Shawshank Redemption月黑高飞(港)     刺激<span class="number">1995</span>(台)https://movie.douban.com/subject/<span class="number">1292052</span>/<span class="number">2300850</span>导演: 弗兰克·德拉邦特 Frank Darabont<span class="number">9.7</span> 美国 犯罪 剧情<span class="number">1994</span></span><br><span class="line">No. <span class="number">2</span></span><br><span class="line">霸王别姬霸王别姬再见，我的妾     Farewell My Concubinehttps://movie.douban.com/subject/<span class="number">1291546</span>/<span class="number">1706837</span>导演: 陈凯歌 Kaige Chen<span class="number">9.6</span> 中国大陆 中国香港 剧情 爱情 同性<span class="number">1993</span></span><br><span class="line">No. <span class="number">3</span></span><br><span class="line">阿甘正传Forrest Gump福雷斯特·冈普https://movie.douban.com/subject/<span class="number">1292720</span>/<span class="number">1730152</span>导演: 罗伯特·泽米吉斯 Robert Zemeckis<span class="number">9.5</span> 美国 剧情 爱情<span class="number">1994</span></span><br><span class="line">No. <span class="number">4</span></span><br><span class="line">这个杀手不太冷Léon杀手莱昂     终极追杀令(台)https://movie.douban.com/subject/<span class="number">1295644</span>/<span class="number">1910590</span>导演: 吕克·贝松 Luc Besson<span class="number">9.4</span> 法国 美国 剧情 动作 犯罪<span class="number">1994</span></span><br><span class="line">No. <span class="number">5</span></span><br><span class="line">泰坦尼克号Titanic铁达尼号(港   台)https://movie.douban.com/subject/<span class="number">1292722</span>/<span class="number">1692244</span>导演: 詹姆斯·卡梅隆 James Cameron<span class="number">9.4</span> 美国 剧情 爱情 灾难<span class="number">1997</span></span><br></pre></td></tr></table></figure><h2 id="爬取北邮人论坛十大热门话题"><a href="#爬取北邮人论坛十大热门话题" class="headerlink" title="爬取北邮人论坛十大热门话题"></a>爬取北邮人论坛十大热门话题</h2><p>试着自己爬了下北邮人论坛，最关键的一点是要在请求头加上<code>&#39;x-requested-with&#39;:&#39;XMLHttpRequest&#39;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>:<span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下面改为你的北邮人账号和密码,同时后面出现账号的地方也需要修改</span></span><br><span class="line">data = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;pqptsl123&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;yourPassword&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#创建会话session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;https://bbs.byr.cn/user/ajax_login.json&#x27;</span></span><br><span class="line"><span class="comment"># print(resp.json())</span></span><br><span class="line"><span class="comment"># 使用session会话对北邮人发起请求</span></span><br><span class="line">resp = session.post(url=url, data=data, headers=headers)</span><br><span class="line"><span class="comment"># 查看登录是否成功</span></span><br><span class="line"><span class="comment"># print( json.loads(resp.text) )</span></span><br><span class="line"><span class="comment"># response 以json形式返回，转化为dict，上下两种方法等价</span></span><br><span class="line"><span class="comment"># print(resp.json())</span></span><br><span class="line">r_url = <span class="string">&#x27;https://bbs.byr.cn/default?_uid=pqptsl123&#x27;</span></span><br><span class="line"><span class="comment"># headers = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;user-agent&#x27;:&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;x-requested-with&#x27;: &#x27;XMLHttpRequest&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;referer&#x27;: &#x27;https://bbs.byr.cn/&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;sec-fetch-dest&#x27;: &#x27;empty&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;sec-fetch-mode&#x27;: &#x27;cors&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;sec-fetch-site&#x27;: &#x27;same-origin&#x27;,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">res = session.get(r_url,headers=headers)</span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">hot_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;column2&#x27;</span>).li.find(class_=<span class="string">&#x27;w-list-line&#x27;</span>).find_all(name=<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> hot_list:</span><br><span class="line">    print(title[<span class="string">&#x27;title&#x27;</span>], end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;https://bbs.byr.cn&#123;&#125;?_uid=pqptsl123&#x27;</span>.<span class="built_in">format</span>(title.a[<span class="string">&#x27;href&#x27;</span>]))</span><br><span class="line"><span class="comment"># https://bbs.byr.cn/article/Picture/3282639?_uid=pqptsl123?</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">新学期到了，建议大家去小超市买东西细心点(44)https://bbs.byr.cn/article/Picture/3282639?_uid=pqptsl123</span><br><span class="line">如果你也闲着，那就看一下吧(22)https://bbs.byr.cn/article/Friends/1987754?_uid=pqptsl123</span><br><span class="line">刚找回密码，按规矩发个新人报道帖~~~(16)https://bbs.byr.cn/article/Comic/631396?_uid=pqptsl123</span><br><span class="line">机经用处有多大？(15)https://bbs.byr.cn/article/GoAbroad/375084?_uid=pqptsl123</span><br><span class="line">找个门当户对条件差不多的怎么就这么难？(12)https://bbs.byr.cn/article/Feeling/3166210?_uid=pqptsl123</span><br><span class="line">【转】超神准！星座小王子独创的新型占卜、來一起試玩一下！(12)https://bbs.byr.cn/article/Constellations/326533?_uid=pqptsl123</span><br><span class="line">【求助】师兄师姐师弟师妹关于社招中国电信集成要签合同工问题(12)https://bbs.byr.cn/article/WorkLife/1163284?_uid=pqptsl123</span><br><span class="line">我再次接到了诈骗电话(10)https://bbs.byr.cn/article/Talking/6260930?_uid=pqptsl123</span><br><span class="line">女博士工作求建议(10)https://bbs.byr.cn/article/Job/2126846?_uid=pqptsl123</span><br><span class="line">本科毕设的任务目标？(8)https://bbs.byr.cn/article/StudyShare/200063?_uid=pqptsl123</span><br></pre></td></tr></table></figure><h2 id="爬取北邮人论坛任意版块的帖子"><a href="#爬取北邮人论坛任意版块的帖子" class="headerlink" title="爬取北邮人论坛任意版块的帖子"></a>爬取北邮人论坛任意版块的帖子</h2><p>3.12晚修改了一下上面的例子，爬了一下考研专版的帖子(修改一下版块名称可实现任何板块的帖子爬取)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>:<span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 修改此处id的话下面出现的地方同样要修改</span></span><br><span class="line">data = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;pqptsl123&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;yourPassword&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#创建会话session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># 登录请求的url</span></span><br><span class="line">url = <span class="string">&#x27;https://bbs.byr.cn/user/ajax_login.json&#x27;</span></span><br><span class="line"><span class="comment"># print(resp.json())</span></span><br><span class="line"><span class="comment"># 使用session会话对北邮人发起请求</span></span><br><span class="line">resp = session.post(url=url, data=data, headers=headers)</span><br><span class="line"><span class="comment"># 查看登录是否成功</span></span><br><span class="line"><span class="comment"># print( json.loads(resp.text) )</span></span><br><span class="line"><span class="comment"># response 以json形式返回，转化为dict，上下两种方法等价</span></span><br><span class="line">print(resp.json())</span><br><span class="line"></span><br><span class="line">post_list = []</span><br><span class="line">posts_list = []</span><br><span class="line">section = <span class="string">&#x27;AimGraduate&#x27;</span>  <span class="comment"># 板块名称</span></span><br><span class="line">page = <span class="number">5</span> <span class="comment"># 想要爬取的页数</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(page):</span><br><span class="line">    r_url = <span class="string">&#x27;https://bbs.byr.cn/board/&#123;&#125;?p=&#123;&#125;&amp;_uid=pqptsl123&#x27;</span>.<span class="built_in">format</span>(section, page)</span><br><span class="line">    res = session.get(r_url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># asd为每一个文章的合集，包括标题、时间等</span></span><br><span class="line">    asd = soup.find(name=<span class="string">&#x27;tbody&#x27;</span>).find_all(name=<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> asd:</span><br><span class="line">        post_title = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line">        post_time = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">2</span>].text</span><br><span class="line">        post_author = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.replace(<span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        post_comment_num = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">4</span>].text</span><br><span class="line">        post_latest_replay = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">5</span>].text</span><br><span class="line">        post_author_nickname = each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">6</span>].text.replace(<span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        post_url = <span class="string">&#x27;https://bbs.byr.cn&#x27;</span> + each.find_all(name=<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>].a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        post_list = [post_title, post_time, post_author, post_latest_replay, post_comment_num, post_author_nickname, post_url]</span><br><span class="line">        posts_list.append(post_list)</span><br><span class="line">        print(post_title, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_time, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_author, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_latest_replay, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_comment_num, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_author_nickname, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        print(post_url)</span><br><span class="line"></span><br><span class="line">f = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建 workbook 即新建 excel 文件</span></span><br><span class="line">sheet = f.add_sheet(<span class="string">&#x27;北邮人论坛&#x27;</span> + section + <span class="string">&#x27;板块&#x27;</span>)  <span class="comment"># 新建工作簿</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据每列的标题</span></span><br><span class="line">row_title = [<span class="string">&#x27;帖子标题&#x27;</span>, <span class="string">&#x27;发表时间&#x27;</span>, <span class="string">&#x27;作者&#x27;</span>, <span class="string">&#x27;最新回复时间&#x27;</span>, <span class="string">&#x27;评论数&#x27;</span>, <span class="string">&#x27;作者昵称&#x27;</span>, <span class="string">&#x27;帖子链接&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">    sheet.write(<span class="number">0</span>, i, row_title[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行程序的时候记得将最开始的excel表格关闭，否则会报错</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(posts_list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row_title)):</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, j, posts_list[i][j])</span><br><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line">f.save(<span class="string">&#x27;byr_&#x27;</span> + section + <span class="string">&#x27;_board_data.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/image-20210312221904835.png" alt="excel结果"></p><p>参考文章：（<a href="https://cuiqingcai.com/1319.html">崔庆才个人博客——Python 爬虫利器二之 Beautiful Soup 的用法</a>）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实验课要用到python爬虫，其中比较难的部分就是提取已经解析好的html页面，使用beautifulsoup是一种对新手比较友好的方式&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>手机摄影技巧</title>
    <link href="http://example.com/2021/02/22/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2021/02/22/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-22T12:35:42.000Z</published>
    <updated>2021-02-23T00:40:26.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今日整活        </p></blockquote><a id="more"></a><h2 id="第一期-自拍"><a href="#第一期-自拍" class="headerlink" title="第一期 自拍"></a>第一期 自拍</h2><p>1.面对顶光如何处理光线不均匀</p><p>场景：头顶有灯光，中午太阳直射</p><ul><li>帽子遮挡</li><li>避开</li></ul><p>2.室内光线</p><ul><li>脸朝向光线</li><li>避免侧光和逆着光线（一面明一面暗，或者全暗）</li></ul><p>3.道具遮挡显脸小（好像雨我无瓜）</p><p>4.全身照拥有大长腿</p><ul><li>不能俯拍</li><li>仰拍，脚部留白，要有地面，但地面要少</li></ul><p>下图，左边显矮，留白过多</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222205607138.png"></p><h2 id="第二期-构图"><a href="#第二期-构图" class="headerlink" title="第二期 构图"></a>第二期 构图</h2><p><strong>1.黄金分割法</strong></p><p>近似用三分法，九宫格 ，四个交叉点就是黄金分割点 ，用来拍人像是比较稳妥的构图法</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222205854053.png"></p><p><strong>2.点构图</strong></p><p>适合环境人像   场景通常视野开阔  画面干净   没有太多杂物  强调环境和人物和谐统一<br>通常大环境 小人物<br>人物只<strong>有一个点</strong>   有可能不好找到人物  所以也被称为“找你妹”构图</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210126388.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210149536.png"></p><p><strong>3.对角线构图</strong></p><p>适用于拍摄景物或者风光<br>拍摄植物和花朵 百试不爽  画面更饱满<br>仔细寻找大自然本身就有的对角线</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210339840.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210359426.png"></p><p><strong>4.中心构图</strong></p><p>并不是所有人像用三分法都好看<br>有倒影的时候   一片平平 中间有突出的树的时候就适合中心构图  追求中心对称<br>适用于任务特写 突出神态 饱满构图<br><strong>中心构图突出画面中心</strong>  </p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210620887.png"></p><p><strong>5.三角形构图</strong></p><p>拍摄物品，排在三个角，构成三角形</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210738383.png"></p><p>拍摄人物，利用躯体构成</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210943918.png"></p><p><strong>6.引导线构图</strong></p><p>公路场景中 道路可以作为引导线，给人纵深感</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211112389.png"></p><p><strong>7.开放式构图</strong></p><p>开放式构图 主体不一定在画中心 注重主体与画外的联系  在意画面周围留下被切割不完整的形象  引导观众突破画面限制 产生空间联想<br>并不是每张照片都追求构图工整 主体完整<br>特写之类可以拍局部<br>美食可以只拍部分  引导观众思考</p><p>引发想象，拍一部分</p><p>下面这张将美食放在桌角进行拍摄</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211358170.png"></p><p><strong>8.前景虚化构图</strong></p><p>利用镜头前花花草草  来大光圈虚化，即青草树叶遮挡，营造梦幻感</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211649766.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211719680.png"></p><h2 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h2><h2 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h2><p>参考链接：<a href="https://www.bilibili.com/video/BV1Gb411S7wC">https://www.bilibili.com/video/BV1Gb411S7wC</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今日整活        &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统学习</title>
    <link href="http://example.com/2021/02/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/02/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-21T01:21:18.000Z</published>
    <updated>2021-02-21T01:45:40.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>标题是在一个月前建的，由于<del>各种不可抗因素</del>（中间玩了一两周），拖到现在，能写多少是多少吧</p><p>内容参照王道考研书</p></blockquote><a id="more"></a><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;标题是在一个月前建的，由于&lt;del&gt;各种不可抗因素&lt;/del&gt;（中间玩了一两周），拖到现在，能写多少是多少吧&lt;/p&gt;
&lt;p&gt;内容参照王道考研书&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="基础课程" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.19</title>
    <link href="http://example.com/2021/02/19/2-19/"/>
    <id>http://example.com/2021/02/19/2-19/</id>
    <published>2021-02-19T09:58:31.000Z</published>
    <updated>2021-02-20T01:02:43.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>唧唧歪歪唧唧歪歪</p></blockquote><a id="more"></a><p>知乎话题</p><h1 id="年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？"><a href="#年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？" class="headerlink" title="年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？"></a>年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？</h1><p>倒不是我被催婚，而是目睹了身边几个大龄亲戚被催婚有感</p><p>中国父母责任的结束是子女的婚礼?</p><ul><li>父母，有人可以赡养自己，关系孩子孤独，多点老年乐趣</li><li>国家，国家经济发展需要新生劳动力所维系</li><li>社会行业，许许多多相关行业的需要，举个例子：房地产行业、新生儿所拉动的社会经济发展。。。</li></ul><p>还看到几个角度，在人与人的交往方面，哪壶不开提哪壶是人与人不熟时尬聊永远优先选择的主题，因为聊这个能戳到你痛点嘛，你肯定最差要反驳几句对不对。你不好说车轱辘话嗯嗯啊啊来敷衍我了。（那意思是并不是别人有意想要催婚，而只是将其当做一个拉近关系聊天的方式。）</p><hr><p>屁股决定脑袋</p><p>出处：</p><blockquote><p>贾雨村断案时想：原来当官没别的诀窍，无非是看脑袋指挥屁股，还是屁股决定脑袋。</p><p>如此权衡一番得失，贾雨村的屁股就移位了，脑袋全听了屁股的指挥，结果便是“徇情枉法，胡乱判断了此案”。</p><p>​                                                        ——《红楼梦》</p></blockquote><p>屁股决定脑袋，网络用语，出自《红楼梦》。用文明一点的说法叫做“位置决定想法”。<strong>一个人坐什么位置，往往决定了他思考的角度和范围</strong></p><p>屁股决定脑袋有两种意思。</p><ul><li>一种是说一个人看问题的角度和立场受到他所处的位置限制，他的位置限制了他的视野，使他只能看到问题的某一方面，能力受限，他是被动的。</li><li>另一种是说一个人会选择对自己的位置有利的立场和角度论述一件利益相关的事，他是主动的</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;唧唧歪歪唧唧歪歪&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>剧本杀</title>
    <link href="http://example.com/2021/02/18/%E5%89%A7%E6%9C%AC%E6%9D%80/"/>
    <id>http://example.com/2021/02/18/%E5%89%A7%E6%9C%AC%E6%9D%80/</id>
    <published>2021-02-18T02:56:10.000Z</published>
    <updated>2021-03-01T13:37:51.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天小周同学要去玩剧本杀，and我被无情嫌弃了Ծ‸Ծ</p><p>这里做一点笔上功夫</p></blockquote><a id="more"></a><h2 id="First-Part-名词介绍和个人理解"><a href="#First-Part-名词介绍和个人理解" class="headerlink" title="First Part 名词介绍和个人理解"></a>First Part 名词介绍和个人理解</h2><p>先说说我的看法，一直是有听过这个名词的，但是没有去玩过。按照我的简单理解</p><p>​                                                    剧本杀 ≈ 角色扮演+逻辑推理？</p><p>围着一个事件，推理、伪装、甩锅。。。</p><p>给个建议：看几期明星大侦探？？</p><p>下面是一些专有名词介绍：</p><p><strong>跳车</strong>：与人开始约定好了要来却鸽了</p><p><strong>翻车</strong>：人没来而且也没成功组局</p><p><strong>发车</strong>：组局成功并进行了游戏</p><p><strong>DM</strong>:主持者，掌握剧本游戏的节奏，推动游戏进程发展</p><blockquote><p>本格就是单纯的谋杀破案，手法复杂但合理可行。<br>变格是脑洞大开，发散思维，奇思妙想，比如涉及牛鬼蛇神时空错乱穿越人格分裂等。</p><p>​                                                                ——摘自贴吧帖子</p></blockquote><p>按我的理解，本格接近现实，类似于名侦探柯南中的作案手法，合理且贴合逻辑</p><p>变格脱离现实，更加荒诞，不过相对于来说不那么枯燥？一直推理可没那么有趣哦</p><p>一些称呼：</p><p><strong>新手玩家</strong>——是指即将接触剧本杀游戏的玩家，对剧本杀游戏和玩法还不是很了解，多数仅凭感觉进行推理。</p><p><strong>进阶玩家</strong>——是指那些已经玩过少量的剧本，多依据出现的线索卡进行推理，但对时间线、动机以及作案手法并不能完全还原的玩家。</p><p><strong>硬核玩家（高配玩家）</strong>——是指那些能够洞悉案件过程，在案情推理上脑洞大开，经常处于上帝视角分析案件的高能玩家。</p><p><strong>边缘玩家（或OB角色</strong>[Observer，即观察者的简称]）——是指那些在剧本中处于剧情边缘的玩家，也指在游戏中高频处于“Offline（离线）”状态的玩家。</p><p><strong>自爆玩家</strong>——就是那些在游戏的过程中，喜欢主动暴露角色身份或角色故事的玩家。</p><p><strong>推土机玩家</strong>——就是指那些游戏一开始就上来推理的玩家。</p><p><strong>菠萝头玩家</strong>——就是指那些情感表现毫无波澜，情感状态始终如一，表情无感的冰冷玩家。</p><p>以下是两对相反的玩家：</p><p><strong>持本玩家（或读本玩家）</strong>——习惯性在游戏过程中一直拿着剧本念台词的玩家。</p><p><strong>戏精玩家</strong>——在读完剧本后，可以摆脱剧本的束缚。用一句话来形容他们就是“不是天生演员，却天生爱演”。戏精玩家在游戏过程中是比较影响(应该是适量正向过度负向)游戏体验的。</p><p><strong>情绪玩家</strong>——在玩本时容易将自己的情绪掺杂进去，凭个人主观感情去判断玩家是不是真凶，同样影响玩家们的游戏体验。</p><p><strong>逻辑玩家</strong>——头脑清晰，重视时间线，推理依靠线索和证据。逻辑玩家在游戏过程中虽然容易找到真凶，但如果过分追求硬核推理的组局，可能会使得整个组局缺少些欢乐的氛围。</p><p><strong>剧本复盘</strong>：游戏结束时，主持人重新给玩家还原故事的真相，让大家更详细了解整个故事剧情，角色的故事，真凶作案的手法等等</p><p>如何了解一个剧本，有如下的类似参考指标：</p><p><strong>机制</strong>——参数值越高，整个本的玩法设置越丰富，剧本体验感越凸出。</p><p><strong>推理</strong>——参数值越高，就越注重硬核推理，实属“逻辑玩家”的最爱。</p><p><strong>欢乐</strong>——参数值越高，整场游戏氛围越欢乐</p><p><strong>情感</strong>——参数值越高，就越注重情感的宣泄。</p><p><strong>恐怖</strong>——参数值越高，恐怖感就越强。</p><p><strong>还原</strong>——参数值越高，剧本还原难度越复杂。玩家不仅要根据当前记忆片段还原角色的故事，还可能要推理一些未知的“怪事”发生的缘由。</p><h2 id="Second-Part-拿到凶手怎么办？"><a href="#Second-Part-拿到凶手怎么办？" class="headerlink" title="Second Part 拿到凶手怎么办？"></a>Second Part 拿到凶手怎么办？</h2><h3 id="1-调整心态（稳住别慌）"><a href="#1-调整心态（稳住别慌）" class="headerlink" title="1. 调整心态（稳住别慌）"></a>1. 调整心态（稳住别慌）</h3><p>冷静下来，请记住，无论你的角色是什么，都不要告诉其他人！不要慌张，好好享受你的角色！</p><h3 id="2-熟读剧本"><a href="#2-熟读剧本" class="headerlink" title="2. 熟读剧本"></a>2. 熟读剧本</h3><p>关注自己的作案动机、故事时间线，以及作案过程上。通过读本去获取这些信息，理清自己作案时，可能留下的线索（如：在<strong>何时</strong>，<strong>“什么地方”</strong>用<strong>“什么工具”</strong>杀的人，作案之后<strong>“留下了什么”</strong>）。大家在盘时间线时，尽可能多的弄清楚，自己在作案时，<strong>其他人都在做些什么事情</strong>。</p><h3 id="3-隐藏非必须公开的关键线索"><a href="#3-隐藏非必须公开的关键线索" class="headerlink" title="3. 隐藏非必须公开的关键线索"></a>3. <strong>隐藏非必须公开的关键线索</strong></h3><h3 id="4-说些适当谎言"><a href="#4-说些适当谎言" class="headerlink" title="4. 说些适当谎言"></a>4. 说些适当谎言</h3><p>哪些可以撒谎呢？常见的撒谎言辞，如：</p><p>“我是想杀TA，但是我还没来得及实施杀人计划，就离开了…”</p><p>“这个东西确实是我的，但被一个神秘人给抢走了（或在前往xxx的地方时丢失了）”</p><p>再比如：</p><p>当你将匕首捅了死者后背时，有血渍在你的衣服上。而你有血迹的衣服恰好被别人搜证到了。你就可以说，“我的匕首被神秘人抢夺时，一不小心划伤了我的手臂，手上的血蹭到了我的袖子上…</p><p>那些不可以撒谎呢？<br>在别人阐述的时间线上，看到了你做了什么事情，你就需要<strong>委婉解释</strong>。如果在这件事情上你撒谎不承认，这就很快暴漏了你是“凶手”的身份。(我的理解是，不是直接不承认我做了，而是我做了其他什么事导致这件事的发生)</p><p>作为凶手，虽然可以撒谎，你<strong>不能太激进地撇清自己</strong>，说自己没有杀人动机（在场每个人都或多或少有一些杀人动机），特别是当别人质疑你的时侯。</p><h3 id="5-积极地参与寻找真凶"><a href="#5-积极地参与寻找真凶" class="headerlink" title="5. 积极地参与寻找真凶"></a>5. <strong>积极地参与寻找真凶</strong></h3><p>聆听、嫁祸、试图带偏别人的观点、受到质疑时不要沉默，只会增加嫌疑，考虑话术</p><h2 id="Third-Part-剧本杀分类"><a href="#Third-Part-剧本杀分类" class="headerlink" title="Third Part 剧本杀分类"></a>Third Part 剧本杀分类</h2><p>剧本题材上：上面已经解释了</p><ul><li><strong>本格本</strong>：</li><li><strong>变格本</strong>：</li></ul><p>剧本玩法上：</p><ul><li><strong>开放本</strong>：这种类型的本一般剧情开放，允许玩家自由发挥。此外，玩家凶手指认正确，故事角色会有一种走向。凶手指认失败，故事角色的另一种走向，会有明确交代。</li><li><strong>封闭本</strong>：剧本大多分幕式呈现给玩家，一般不会在第一幕就知道自己的身份，任务也可能存在阶段性。剧情固定，流程固定。</li></ul><h2 id="Fourth-Part-步骤"><a href="#Fourth-Part-步骤" class="headerlink" title="Fourth Part 步骤"></a>Fourth Part 步骤</h2><h3 id="1-游戏前"><a href="#1-游戏前" class="headerlink" title="1.游戏前"></a>1.游戏前</h3><p>找合适的队友（建议找自己熟悉的）-&gt;关注一些剧本测评-&gt;找到适合自己的剧本</p><h3 id="2-游戏中"><a href="#2-游戏中" class="headerlink" title="2.游戏中"></a>2.游戏中</h3><ul><li><p><strong>拿到剧本时，先看你的角色任务！</strong>在剧本的中间部分或结束部分，每个角色都会有自己要完成的任务。带着任务读本，可以帮助你代入角色、高效读本、理清头绪。</p></li><li><p><strong>认真阅读剧本，注意每一个时间线或具体细节</strong>。注意安排好自己的读本速度，剧本阅读时长并没有具体的要求，这个要看剧本本身的体量。</p></li><li><p><strong>别暴漏身份！</strong>通过读本先熟悉角色身份与人物关系，无论你的角色是什么，在游戏开始前一定要<strong>守口如瓶</strong>！随着游戏的进度，其他玩家会在公聊或私聊以及搜证时逐步了解各自的信息。提前暴漏，对自己、对其他玩家而言都<strong>是极为不尊重</strong>的行为。<strong>请记住，我们每个人玩本是为了体验一种不同的人生经历。</strong></p></li><li><p><strong>你手中的剧本一定不要让其他人看！</strong>从某种意义上说，你手中的本就是你的“大脑”。特别是在公聊或私聊时，尽量不要说：“我的本上写的什么什么”，<em>玩家在口述时一定要换成“我的记忆里是这样的…”或者“我的回忆中是怎样的…”</em></p></li><li><p><strong>剧本杀游戏一般都会涉及到搜证环节、公聊或私聊环节。</strong>玩家到时候按照主持人（DM）的要求进行即可。玩家需要认真看线索卡，<strong>做好笔记</strong>，避免遗忘，也不要遗漏任何一个细节。</p><ul><li><p>介绍环节，进行自我介绍，让大家互相了解身份，要学会从这个人物的性格和价值观去思考和行动（从现在开始，我就是他，他就是我）。<strong>切记不要拿着自己的剧本去读</strong>，例如【我剧本就是这么写的】、【我剧本上没有说明……】、【我扮演的角色就是……】，类如这样的话千万不要说，这样会严重影响游戏体验，最好能将剧本<strong>口语化</strong>的表达，可以类似于【我的回忆里是这样的…….】</p></li><li><p>公聊，在公聊（圆桌）过程中尽量减少对自己不利的话题。<strong>谎言是必不可少的，但一定要能圆的回来</strong>。感觉在教我们如何面不改色的撒谎。</p></li><li><p>私聊，私聊中请注意，保护自己的秘密的同时，也要去<strong>套出</strong>自己想要知道的事情。私聊中博取信任也是一份非常高深的学问</p></li><li><p>搜证</p></li><li><p>结案，注意细节</p></li></ul></li></ul><ul><li><strong>指证凶手。玩家在剧本杀游戏设定中，避免不了一个环节就是，在游戏的最后投出你认为哪名玩家才是本场游戏的杀人凶手。（根据主持人【DM】的提醒进行即可）</strong></li></ul><h3 id="3-游戏后"><a href="#3-游戏后" class="headerlink" title="3.游戏后"></a>3.游戏后</h3><p>游戏结束后，<strong>DM（主持人）会对剧本进行复盘</strong>。</p><p>玩家也可以将玩本中不清楚的事情向DM提问，由DM进行解答。</p><h2 id="Fifth-Part-具体环节分析"><a href="#Fifth-Part-具体环节分析" class="headerlink" title="Fifth Part 具体环节分析"></a>Fifth Part 具体环节分析</h2><h3 id="1-如何自我介绍"><a href="#1-如何自我介绍" class="headerlink" title="1.如何自我介绍"></a>1.如何自我介绍</h3><p>太复杂，容易吸引火力，被爆锤。</p><p>太简单，没意思</p><p>一般包含（<strong>名字，年龄，身份，职业，人物关系，目的</strong>）</p><p><strong>对于特定的人物身份、人物关系、人物出现的目的等内容是否需要隐藏或编造，一定要根据你的剧本任务来定。</strong></p><h3 id="2-如何私聊"><a href="#2-如何私聊" class="headerlink" title="2.如何私聊"></a>2.如何私聊</h3><p><strong>是在剧本游戏机制允许的条件下展开讨论的。</strong>那些不允许私聊的剧本游戏就另当别论吧。</p><p>私聊开始之前，玩家们一般都会经历“<strong>第一轮搜证</strong>”与“<strong>第一轮公聊</strong>”。</p><p>玩家为了打消心中的疑虑，需要进一步确认或作出某种行为，就需要<strong>借助私聊进行试探</strong></p><ul><li><p>对于非凶手玩家：</p><p>主要目的：确定真凶；次要目的：完成支线任务，以实际为准</p><p>手段：采用<strong>封闭式</strong>和<strong>开放式</strong>相结合的问题来问其他玩家，以进行比对并确认时间线上的细节，并多询问几名玩家以判断信息的真实性</p><p><strong>封闭式问题有哪些呢</strong>？该类问题答案都<strong>设限</strong>。例如：</p><p>TA抢走了你的未婚妻，你是不是特别恨TA？（要么“是”，要么“不是”）</p><p>在晚上8:00之前，你有没有听到什么声音？（要么“有”，要么“没有”）</p><p>衣服、匕首、毒药，哪一个是你的？（三选一）</p><p><strong>开放式问题有哪些呢？</strong>顾名思义，该类问题比较开放。如：</p><p>在案发之前你在做些什么？</p><p>（如果该玩家想杀人，你就可以问TA）你计划怎么杀人？</p></li></ul><ul><li><p>对于凶手玩家：</p><p>目的：（按我的理解就是混淆是非，干扰判断，博取信任）</p><ul><li>隐藏自己杀人的事实以及时间线上作案的相关事情。</li><li>干扰其他玩家的推凶逻辑，解除其他玩家对你的怀疑</li><li>建立玩家对你的信任，并引导其对其他玩家产生怀疑</li></ul><p>手段：</p><ul><li>积极主动找人私聊（有种我作为凶手我不心虚的感觉，显得我很想找出真凶）</li><li>撒谎之前有一个大前提，就是你的言行需要：符合大家“<strong>已知的”故事时间线和“未知的”证据</strong>）</li><li>假如别人被质疑，可以帮别人解围来获取信任（这招感觉好像得适当点，要不然容易引火上身）</li></ul></li></ul><h3 id="3-如何搜证"><a href="#3-如何搜证" class="headerlink" title="3.如何搜证"></a>3.如何搜证</h3><h2 id="Sixth-Part-实操感受"><a href="#Sixth-Part-实操感受" class="headerlink" title="Sixth Part 实操感受"></a>Sixth Part 实操感受</h2><p>有了再来补充</p><hr><p>2.23剧本杀《北国之春》</p><p>“灾难面前人人都是受害者”</p><p>我，康斯坦丁，为了革命事业奉献一切，到头来谎言罢了。</p><p>作为凶手如何隐藏自己？</p><p>我觉得有两种方法，一种是把思路理的很清楚，能够在多个人的确认下有不在场证明；一种是少说话，做出好奇宝宝的样子，然后在局势变得迷茫的情况下给一点线索，显示自己也在很认真的寻找真凶，并且在别人发言时能够甩锅就甩锅，毕竟说得越多错的越多。</p><p>First Part 参考文章    <a href="https://zhuanlan.zhihu.com/p/265459305">https://zhuanlan.zhihu.com/p/265459305</a></p><p>Second Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/266171750">https://zhuanlan.zhihu.com/p/266171750</a></p><p>Third Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/269180411">https://zhuanlan.zhihu.com/p/269180411</a></p><p>Fourth Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/267068326">https://zhuanlan.zhihu.com/p/267068326</a></p><p>​                                        <a href="https://zhuanlan.zhihu.com/p/83883004">https://zhuanlan.zhihu.com/p/83883004</a></p><p>Fifth Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/299130233">https://zhuanlan.zhihu.com/p/299130233</a></p><p>​                                    <a href="https://zhuanlan.zhihu.com/p/271955890">https://zhuanlan.zhihu.com/p/271955890</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天小周同学要去玩剧本杀，and我被无情嫌弃了Ծ‸Ծ&lt;/p&gt;
&lt;p&gt;这里做一点笔上功夫&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>春节见闻</title>
    <link href="http://example.com/2021/02/14/%E6%98%A5%E8%8A%82%E8%A7%81%E9%97%BB/"/>
    <id>http://example.com/2021/02/14/%E6%98%A5%E8%8A%82%E8%A7%81%E9%97%BB/</id>
    <published>2021-02-14T07:50:51.000Z</published>
    <updated>2021-02-15T07:43:46.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><a id="more"></a><p>交流，以为大家过得很好，其实大家都很普通。</p><p>关于学习方面：多与精英交流，大局观，能侃，系统层级分析，不要过分注重眼前利益。</p><p>提高自己各方面素养（很多方面）。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>论一种思维方式</title>
    <link href="http://example.com/2021/02/06/%E8%AE%BA%E4%B8%80%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/02/06/%E8%AE%BA%E4%B8%80%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/</id>
    <published>2021-02-06T06:29:46.000Z</published>
    <updated>2021-02-10T03:45:35.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>别说为啥没写java的文章了，休息了几天并且有其他事要做，休整好了立马写</p><p>今天要说的是一种思维方式，想摆脱却做不到，我猜可能每个人都有。</p></blockquote><a id="more"></a><h2 id="自我设障"><a href="#自我设障" class="headerlink" title="自我设障"></a>自我设障</h2><h3 id="自我设障的含义和表现"><a href="#自我设障的含义和表现" class="headerlink" title="自我设障的含义和表现"></a>自我设障的含义和表现</h3><p>自我设障（self-handicapping）：为了避免失败带来的负面影响，提前给自己设置障碍。</p><p>1.行为上：个体通过“做点什么破坏性的事情”或是“什么都不做”来阻碍成功结果的出现。</p><p>拖延就是一种最常见的形式。比如用ddl来作为最大生产力驱动自己（你再骂），这样，我们便有理由有安慰自己：你看，这篇论文是因为没有时间草草完成的哦，如果我早点开始做，那结果可能就不一样了。一边怒骂自己不断生产着学术垃圾，一遍干着同样的事。</p><p>还有以下几种典型表现：</p><ul><li><p>临考前摸鱼</p><blockquote><p>“哎呀，只是昨晚通宵打游戏了，没睡好，所以考试没考好的”</p><p>“要不是我昨晚去干其他事情去了，没咋复习”</p></blockquote></li><li><p>故意设置过高的目标或者安排过难的任务。</p><blockquote><p>“不成，这么难的任务，换谁都不行，耶稣来了都没用，我说的！”</p></blockquote></li><li><p>减少努力的程度</p><blockquote><p>“要是我认真，那这件事就是小case”</p></blockquote></li></ul><p>2.言语上：个体用难辨真伪的借口<strong>公开</strong>表示自己处于不利的竞争情境，（<strong>但并不一定减少实际的努力</strong>），失败时也容易博取他人的谅解。</p><p>比如人们常在考试前不经意的提及：</p><blockquote><p>“这几天感冒了/没睡好/精神不好/学习效率太低了”</p></blockquote><p>这种言语上的自我设障会给自己一种心理暗示，而并不一定是真的存在，也许自己并不一定真的是因为没睡好，也不一定是精神状态不好，但多次的公开表示在一定程度上就将其转变成了现实。</p><p>是我们自我保护的一种典型方法，在失败后我们有理由相信别人会谅解我们的失败</p><p>万一成功，自我概念得到提升，“我不复习都那么厉害”，在一定程度上也能增强自信心，也为以后的下次失败埋下了伏笔。</p><h3 id="自我设障的原因"><a href="#自我设障的原因" class="headerlink" title="自我设障的原因"></a>自我设障的原因</h3><p>从外部和内部两个方面来解释：一是印象管理（维护自我形象），二是保护自尊（相信自己有能力）</p><p>1.印象管理</p><p>一个很现实的原因：一旦我们失败了，别人会知道，别人会觉得我无能？看不起我？</p><p>那么，我们需要维护颜面，给别人留下好的印象。</p><p>自我设障能帮助我们更好的做到印象管理。这样，我们在失败后，别人会觉得：哦，并不是他自己的问题，而是他遇到了种种困难，运气不好罢了，不涉及到能力等种种自身因素。而别人不知道的是，这种“困难”是我们自己设下的。</p><p>2.保护自尊</p><p>别人的看法仅仅是部分的原因，更重要的原因在于，如果我们拼尽全力，结果却仍不如人意，就意味着我们揭开了自己的伪装，不得不面对“能力不足”这个残忍的现实了。</p><p>所以，我们才有了这么多的借口。我们不会认为这是自身的不足，而将其归结为种种外部因素。</p><p>人们常常宁愿因为懒惰而失败而不愿因为愚笨而失败<strong>。“我成绩差是因为我没努力”是不是比“成绩差是因为我笨”听起来舒服太多了。</strong></p><p>岔个题，不过可笑的是，往往人们会在若干年后认识到自己的平庸</p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>讲讲我自己的看法，行为上的自我设障是我们需要去克服的，言语上的自我设障并不一定是真的没努力，也有可能是烟幕弹罢了。</p><p>需要控制情绪，当双方都无法去</p><p>参考文章：</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;别说为啥没写java的文章了，休息了几天并且有其他事要做，休整好了立马写&lt;/p&gt;
&lt;p&gt;今天要说的是一种思维方式，想摆脱却做不到，我猜可能每个人都有。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>华尔街韭菜</title>
    <link href="http://example.com/2021/02/02/%E5%8D%8E%E5%B0%94%E8%A1%97%E9%9F%AD%E8%8F%9C/"/>
    <id>http://example.com/2021/02/02/%E5%8D%8E%E5%B0%94%E8%A1%97%E9%9F%AD%E8%8F%9C/</id>
    <published>2021-02-02T12:01:55.000Z</published>
    <updated>2021-02-16T06:50:09.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>b站视频</p></blockquote><a id="more"></a><p>电影：华尔街之狼</p><p>做空</p><p>做多</p><p>爆仓</p><p>券商：帮你买卖股票的中介</p><p>机构</p><p>杠杆：</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;b站视频&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>艺术品拍卖市场乱象</title>
    <link href="http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/"/>
    <id>http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/</id>
    <published>2021-01-30T02:14:27.000Z</published>
    <updated>2021-01-30T03:50:20.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结</p></blockquote><a id="more"></a><p>疫情期间拍卖行业创下新纪录</p><p>著名拍卖行：<br>苏富比、佳士得、保利、</p><p>托、洗钱、黑幕、雅贿</p><p>拍卖行的商业模式：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102420569.png" alt="image-20210130102420569"></p><p>中介、赚取佣金、收取佣金比例</p><p>规则：价格与比例成反比</p><p><strong>拍卖行流程</strong>：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102735852.png" alt="image-20210130102735852"></p><blockquote><p>吊灯叫价：当气氛还没有热烈起来的时候，拍卖师会指着拍卖大厅的吊灯说，这位先生加价了，以此来调动买家们的情绪，活跃气氛。</p><p>人肉吊灯：俗称托。</p></blockquote><p>拍卖行常用宣传造价的方式来提高拍卖品的身价，例如：</p><p>故意编造一个可歌可泣集战乱、革命、家国之恨等传奇要素于一身的文物</p><p>遗失国宝、媒体狂轰乱炸</p><p>双赢：拍卖行、卖家。</p><p>拍卖行活跃市场氛围、自己买下自己拍卖的藏品</p><p>一种新的玩法，实现买家、卖家、拍卖行三赢的局面</p><p>流程如下：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130103705089.png" alt="image-20210130103705089"></p><p>艺术家委托朋友将其作品高价拍走，提高自己的身价，私底下送给朋友自己其他的作品，这样朋友拿着升值了的作品再卖出，同时拍卖行再从中收取佣金，牵桥搭线，实现三赢的局面。</p><hr><p>养一个人，炒作出一个画家。</p><p>炒作集团与画家签订协议，提前买断画家接下来几年的画，买下来之后炒作集团开始炒作这批画，比如以每幅20万收购了30幅画，将其炒作成100万，只需卖出几幅画就能将成本收回。</p><p>问题：存在风险</p><p>即便存在媒体宣传和人肉吊灯，买家谁会冒着这么大的风险用100万买下这样一幅画呢</p><p>炒作集团的解决方法：如果出现没有买家买这幅画时，炒作集团会提前与拍卖行商量，派自己人将这幅画买下来，但收取的佣金并不会以正常的佣金比例收取。</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130105703545.png" alt="image-20210130105703545"></p><p>如今这种规则大家都心照不宣。</p><p>艺术市场的频频造神现象就有点道理了</p><hr><p>洗钱，简单来说就是将非法得来的钱用某种方式合法化</p><p>地下钱庄、手续费3-5</p><p>跨国钱庄10-20，数额较大时</p><p>如今风险越来越大</p><p>艺术品洗钱</p><p>风险小、手续费低</p><p>一个例子：<br>A——洗钱者</p><p>B——洗钱组织</p><p>A需要提前1、2年养成收藏艺术品的爱好（），并低价购入一批艺术品。</p><p>到时机成熟了，A让B提供一个价值2000W的艺术品，并用3个亿拍下。</p><p>接着B再去各地买下A提前购入的那批低价艺术品，这样，钱又都回到了A的手里</p><p>并且，分析A和B此时的状态</p><p>A：成功洗钱、用高价买下的艺术品可以被宣传成有良心的好企业家用高价买下流离失所的文物，赢得一个好名头。此外，把买下来的文物建一个民间博物馆作为一个幌子，让以后的文物交易有正规渠道，做得好还能获取国家补贴</p><p>B:从中赚取手续费、从A获取的艺术品可以再拍卖出去</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130110740738.png" alt="image-20210130110740738"></p><hr><p>艺术品质押投资</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130112553255.png" alt="image-20210130112553255"></p><p>一个例子：</p><p>企业将自己的一件价值200w的艺术品以自己的另一个公司主体用3000w买下，拿到这个艺术品之后，在拍卖行的证明下用艺术品作为担保质押出1500w，假如有10件这样的艺术品，就能质押出1.5亿，由于买和卖两家公司都是自己的，就硬托，或者直接不支付赔几十万给拍卖行完事。接着拿着这些质押出来的资金用来炒高其他艺术品，只要炒作铮的钱足以支付手续费和利息，就能以钱生钱。</p><p>风险：</p><p>当泡沫破碎之后。。</p><p>蛋壳公寓。</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1yi4y1c7Cn">https://www.bilibili.com/video/BV1yi4y1c7Cn</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>spring基于注解的ioc</title>
    <link href="http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/"/>
    <id>http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/</id>
    <published>2021-01-24T00:22:10.000Z</published>
    <updated>2021-01-24T01:57:44.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring用注解实现ioc</p></blockquote><a id="more"></a><p><strong>注意</strong>：直接打开别人的spring工程时，因为原工程是保留别人电脑的maven路径，需要改到自己的maven路径。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>使用注解之前的必要操作：</p><p>在bean.xml中更换约束（与用xml方式的不同），约束如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为</span></span><br><span class="line"><span class="comment">    context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- base-package 是说明这个包下面可能用到注解的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>曾经XML的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>  <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> | <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别从以下四个方面来解释</p><p>1.用于创建对象的</p><p>2.用于注入数据的</p><p>3.用于改变作用范围的</p><p>4.和生命周期相关的</p><h3 id="用于创建对象的"><a href="#用于创建对象的" class="headerlink" title="用于创建对象的"></a>用于创建对象的</h3><p><code>@Component:</code></p><p>作用：用于把当前类对象存入spring容器中。</p><p>相当于xml配置中的<code>&lt;bean id = &quot;&quot; class = &quot;&quot;&gt;</code></p><p>属性：<strong>value</strong>：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p><p>同样用于创建对象的：</p><p><code>@Controller</code>：一般用在表现层</p><p><code>@Service</code>：一般用在业务层</p><p><code>@Repository</code>：一般用在持久层</p><p>以上三个注解他们的作用和属性与Component是一模一样，这样做有什么好处呢？</p><p>是spring框架为我们提供明确的三层使用的注解，可以使我们的三层对象更加清晰。</p><h3 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring用注解实现ioc&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
