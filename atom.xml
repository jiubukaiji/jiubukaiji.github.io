<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pb</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-30T03:47:49.499Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>艺术品拍卖市场乱象</title>
    <link href="http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/"/>
    <id>http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/</id>
    <published>2021-01-30T02:14:27.000Z</published>
    <updated>2021-01-30T03:47:49.499Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结</p></blockquote><a id="more"></a><p>疫情期间拍卖行业创下新纪录</p><p>著名拍卖行：<br>苏富比、佳士得、保利、</p><p>托、洗钱、黑幕、雅贿</p><p>拍卖行的商业模式：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102420569.png" alt="image-20210130102420569"></p><p>中介、赚取佣金、收取佣金比例</p><p>规则：价格与比例成反比</p><p><strong>拍卖行流程</strong>：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102735852.png" alt="image-20210130102735852"></p><blockquote><p>吊灯叫价：当气氛还没有热烈起来的时候，拍卖师会指着拍卖大厅的吊灯说，这位先生加价了，以此来调动买家们的情绪，活跃气氛。</p><p>人肉吊灯：俗称托。</p></blockquote><p>拍卖行常用宣传造价的方式来提高拍卖品的身价，例如：</p><p>故意编造一个可歌可泣集战乱、革命、家国之恨等传奇要素于一身的文物</p><p>遗失国宝、媒体狂轰乱炸</p><p>双赢：拍卖行、卖家。</p><p>拍卖行活跃市场氛围、自己买下自己拍卖的藏品</p><p>一种新的玩法，实现买家、卖家、拍卖行三赢的局面</p><p>流程如下：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130103705089.png" alt="image-20210130103705089"></p><p>艺术家委托朋友将其作品高价拍走，提高自己的身价，私底下送给朋友自己其他的作品，这样朋友拿着升值了的作品再卖出，同时拍卖行再从中收取佣金，牵桥搭线，实现三赢的局面。</p><hr><p>养一个人，炒作出一个画家。</p><p>炒作集团与画家签订协议，提前买断画家接下来几年的画，买下来之后炒作集团开始炒作这批画，比如以每幅20万收购了30幅画，将其炒作成100万，只需卖出几幅画就能将成本收回。</p><p>问题：存在风险</p><p>即便存在媒体宣传和人肉吊灯，买家谁会冒着这么大的风险用100万买下这样一幅画呢</p><p>炒作集团的解决方法：如果出现没有买家买这幅画时，炒作集团会提前与拍卖行商量，派自己人将这幅画买下来，但收取的佣金并不会以正常的佣金比例收取。</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130105703545.png" alt="image-20210130105703545"></p><p>如今这种规则大家都心照不宣。</p><p>艺术市场的频频造神现象就有点道理了</p><hr><p>洗钱，简单来说就是将非法得来的钱用某种方式合法化</p><p>地下钱庄、手续费3-5</p><p>跨国钱庄10-20，数额较大时</p><p>如今风险越来越大</p><p>艺术品洗钱</p><p>风险小、手续费低</p><p>一个例子：<br>A——洗钱者</p><p>B——洗钱组织</p><p>A需要提前1、2年养成收藏艺术品的爱好（），并低价购入一批艺术品。</p><p>到时机成熟了，A让B提供一个价值2000W的艺术品，并用3个亿拍下。</p><p>接着B再去各地买下A提前购入的那批低价艺术品，这样，钱又都回到了A的手里</p><p>并且，分析A和B此时的状态</p><p>A：成功洗钱、用高价买下的艺术品可以被宣传成有良心的好企业家用高价买下流离失所的文物，赢得一个好名头。此外，把买下来的文物建一个民间博物馆作为一个幌子，让以后的文物交易有正规渠道，做得好还能获取国家补贴</p><p>B:从中赚取手续费、从A获取的艺术品可以再拍卖出去</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130110740738.png" alt="image-20210130110740738"></p><hr><p>艺术品质押投资</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130112553255.png" alt="image-20210130112553255"></p><p>一个例子：</p><p>企业将自己的一件价值200w的艺术品以自己的另一个公司主体用3000w买下，拿到这个艺术品之后，在拍卖行的证明下用艺术品作为担保质押出1500w，假如有10件这样的艺术品，就能质押出1.5亿，由于买和卖两家公司都是自己的，就硬托，或者直接不支付赔几十万给拍卖行完事。接着拿着这些质押出来的资金用来炒高其他艺术品，只要炒作铮的钱足以支付手续费和利息，就能以钱生钱。</p><p>风险：</p><p>当泡沫破碎之后。。</p><p>蛋壳公寓。</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1yi4y1c7Cn">https://www.bilibili.com/video/BV1yi4y1c7Cn</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>spring基于注解的ioc</title>
    <link href="http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/"/>
    <id>http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/</id>
    <published>2021-01-24T00:22:10.000Z</published>
    <updated>2021-01-24T01:57:44.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring用注解实现ioc</p></blockquote><a id="more"></a><p><strong>注意</strong>：直接打开别人的spring工程时，因为原工程是保留别人电脑的maven路径，需要改到自己的maven路径。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>使用注解之前的必要操作：</p><p>在bean.xml中更换约束（与用xml方式的不同），约束如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为</span></span><br><span class="line"><span class="comment">    context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- base-package 是说明这个包下面可能用到注解的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>曾经XML的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>  <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> | <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别从以下四个方面来解释</p><p>1.用于创建对象的</p><p>2.用于注入数据的</p><p>3.用于改变作用范围的</p><p>4.和生命周期相关的</p><h3 id="用于创建对象的"><a href="#用于创建对象的" class="headerlink" title="用于创建对象的"></a>用于创建对象的</h3><p><code>@Component:</code></p><p>作用：用于把当前类对象存入spring容器中。</p><p>相当于xml配置中的<code>&lt;bean id = &quot;&quot; class = &quot;&quot;&gt;</code></p><p>属性：<strong>value</strong>：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p><p>同样用于创建对象的：</p><p><code>@Controller</code>：一般用在表现层</p><p><code>@Service</code>：一般用在业务层</p><p><code>@Repository</code>：一般用在持久层</p><p>以上三个注解他们的作用和属性与Component是一模一样，这样做有什么好处呢？</p><p>是spring框架为我们提供明确的三层使用的注解，可以使我们的三层对象更加清晰。</p><h3 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring用注解实现ioc&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>人与人的悲欢是不相同的</title>
    <link href="http://example.com/2021/01/22/%E4%BA%BA%E4%B8%8E%E4%BA%BA%E7%9A%84%E6%82%B2%E6%AC%A2%E6%98%AF%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84/"/>
    <id>http://example.com/2021/01/22/%E4%BA%BA%E4%B8%8E%E4%BA%BA%E7%9A%84%E6%82%B2%E6%AC%A2%E6%98%AF%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84/</id>
    <published>2021-01-22T13:56:29.000Z</published>
    <updated>2021-01-29T12:30:18.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>权当划水</p></blockquote><a id="more"></a><p>人与人的悲欢是不相同的，这边娱乐圈的大瓜一波接着一波，那边b站up主墨茶以一种近乎卑微的方式死去。</p><p>就不说别人，我自己的情绪在一天中被新闻媒体的各种消息牵着鼻子走，被生活中的琐事所影响（好吧，这就是我今天划水的原因了）。</p><p>大明星的瓜我只是会心一笑，小人物之死却让我灵魂震颤。</p><p>看完那位up主的动态，直接给我整破防了。</p><p>不知道为什么变得有点多愁善感。</p><p>可能是年龄大了。</p><p>我尝试用科学的理论去探究这个原因。</p><p>却发现并不是什么事情都能用完美的科学理论来解释的。</p><p>扯远了又聊到了人类的进化过程。</p><p>往近了聊就是各种资本化的过程。</p><p>又在乱七八糟的尝试写点什么东西。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;权当划水&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>java 反射</title>
    <link href="http://example.com/2021/01/21/java-%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2021/01/21/java-%E5%8F%8D%E5%B0%84/</id>
    <published>2021-01-21T12:50:55.000Z</published>
    <updated>2021-01-21T12:52:47.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在jdbc和spring框架中有用到反射，记录一下反射的用法</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在jdbc和spring框架中有用到反射，记录一下反射的用法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>spring概述和基于xml的IOC配置</title>
    <link href="http://example.com/2021/01/20/spring%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E4%BA%8Exml%E7%9A%84IOC%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/01/20/spring%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E4%BA%8Exml%E7%9A%84IOC%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-20T01:22:17.000Z</published>
    <updated>2021-01-21T12:48:55.884Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring的简要概述和用xml配置spring的细节</p></blockquote><a id="more"></a><h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><h3 id="spring是什么"><a href="#spring是什么" class="headerlink" title="spring是什么"></a>spring是什么</h3><p>Spring是分层的 Java SE/EE应用full- stack轻量级开源框架，以<code>IoC</code>(Inversion of Control:反转控制）和<code>AOP</code>( Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 <code>Spring MVC</code>和持久层 <code>Spring JDBC</code>以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE企业应用开源框架</p><h3 id="spring开发优势"><a href="#spring开发优势" class="headerlink" title="spring开发优势"></a>spring开发优势</h3><ul><li><strong>方便解耦，简化开发</strong> 通过 Spring提供的<code>IoC</code>容器，可以将对象间的依赖关系交由 Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li><li><strong>AOP编程的支持</strong> 通过 Spring的<code>AOP</code>功能，方便进行面向切面的编程，许多不容易用传统<code>OOP</code>实现的功能可以通过<code>AOP</code>轻松实现。<strong>声明式事务的支持</strong> 可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</li><li><strong>方便程序的测试</strong> 可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</li><li><strong>方便集成各种优秀框架</strong> Spring可以降低各种框架的使用难度，提供了对各种优秀框架（ <code>Struts</code>、<code>Hibernate</code>、<code>Hessian</code>、 <code>Quartz</code> 等）的直接支持。</li><li><strong>降低 JAVAEE API的使用难度</strong> Spring对 javsEE API（如<code>JDBC</code>、 <code>JavaMail</code>、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</li><li><strong>Java源码是经典学习范例</strong> Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诸。它的源代码是Java技术的最佳实践的范例。</li></ul><h3 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h3><img src="../images/spring%E6%A1%86%E6%9E%B6/sadsa.png" alt="spring结构体系" style="zoom: 67%;" /><h2 id="程序的耦合与解耦"><a href="#程序的耦合与解耦" class="headerlink" title="程序的耦合与解耦"></a>程序的耦合与解耦</h2><h3 id="什么是程序的耦合"><a href="#什么是程序的耦合" class="headerlink" title="什么是程序的耦合"></a>什么是程序的耦合</h3><p>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。</p><h3 id="如何解决耦合"><a href="#如何解决耦合" class="headerlink" title="如何解决耦合"></a>如何解决耦合</h3><p>使用工厂模式解耦</p><p>步骤：</p><ol><li>在配置文件中书写全限定类名（key = value）</li><li>通过读取配置文件获取全限定类名，通过反射创建对象</li><li>所有的对象创建均通过FactoryBean进行创建（可以通过单例模式每次只生成一个对象）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义properties类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Map，用于存放对象，可以称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取properties文件对象流</span></span><br><span class="line">            InputStream inputStream = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(inputStream);</span><br><span class="line">            <span class="comment">// 实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">// 取出配置文件中的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">// 取出每个key值</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">// 根据key获取value值</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">// 反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">// 将key和value放到容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的name获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h3><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>IoC的作用：解决程序间的耦合（解除代码中的依赖关系）</p><blockquote><p>spring的核心容器相当于一个<code>Map</code>，存放了IoC管理的对象</p></blockquote><h2 id="使用spring解决耦合问题"><a href="#使用spring解决耦合问题" class="headerlink" title="使用spring解决耦合问题"></a>使用spring解决耦合问题</h2><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><strong>第一步</strong>：在pom.xml中配置依赖：</p><p>导入spring相关依赖和版本，在IDEA中配置好后将会自动导入相关的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：编写持久层（DAO）和业务层（Service）</p><p><strong>第三步</strong>：用maven创建项目后，在resource文件夹中新建bean.xml文件。内容包括：</p><ul><li>必要的依赖</li><li>自己写的<code>&lt;bean&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第四步</strong>：模拟一个表现层用来调用业务层和持久层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个表现层，用于调用业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取service</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        IAccountDao adao = ac.getBean(<span class="string">&quot;accountDao&quot;</span>,IAccountDao.class);</span><br><span class="line"><span class="comment">//3.打印得到的bean对象</span></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(adao);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果如下</strong>：</p><p><img src="../images/spring%E6%A1%86%E6%9E%B6/image-20210121172457854.png"></p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext是spring提供的一个<strong>创建核心容器的接口</strong>，可以<strong>通过此接口可以创建IoC核心容器对象</strong>，并通过此对象进行IoC容器内对象的管理。</p><h4 id="ApplicationContext的三个常用实现类"><a href="#ApplicationContext的三个常用实现类" class="headerlink" title="ApplicationContext的三个常用实现类"></a>ApplicationContext的三个常用实现类</h4><ul><li>ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，<strong>要求配置文件必须在类路径下</strong>。不在的话，加载不了。(更常用)</li><li>FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限）</li><li>AnnotationConfigApplicationContext：它是用于<strong>读取注解创建容器</strong>的。</li></ul><p>用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line"><span class="comment">// 1.1 通过相对目录的方式获取核心容器对象</span></span><br><span class="line">   ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">   <span class="comment">// 1.2 通过绝对路径的方式获取核心容器对象</span></span><br><span class="line">   ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;E:\\workspace\\workspace_idea03\\demo-spring\\day02_03spring\\src\\main\\resources\\beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.根据id获取Bean对象（两种方法），可以传入class对象不再进行强转</span></span><br><span class="line">   AccountService as = (AccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">   AccountDao ad = ac.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);</span><br></pre></td></tr></table></figure><p><img src="../images/spring%E6%A1%86%E6%9E%B6/image-20210121174721430.png" alt="Application接口继承关系图"></p><blockquote><p>在IDEA中进入这个类，右键-&gt; Diagrams-&gt;show Diagrams 就可以看到这幅图，同时可以在工具栏中调出每个接口和类的构造器、方法、属性等</p></blockquote><ul><li>BeanFactory 和 ApplicationContext 的区别： 创建对象的时间点不一样。</li><li> ApplicationContext：只要一读取配置文件，默认情况下就会创建对象。 </li><li>BeanFactory：什么使用什么时候创建对象</li></ul><h3 id="spring中创建Bean的三种方式"><a href="#spring中创建Bean的三种方式" class="headerlink" title="spring中创建Bean的三种方式"></a>spring中创建Bean的三种方式</h3><p><strong>bean标签</strong></p><p><strong>作用</strong>： 用于配置对象让 spring 来创建的。 默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</p><p> <strong>属性</strong>： </p><p>id：给对象在容器中提供一个唯一标识。用于获取对象。 </p><p>class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。 </p><p>scope：指定对象的作用范围。</p><ul><li>singleton :默认值，单例的. </li><li>prototype :多例的. </li><li>request :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 request 域中. </li><li>session :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 session 域中. </li><li>global session :WEB 项目中,应用在 Portlet 环境.如果没有 Portlet 环境那么 globalSession 相当于 session. </li></ul><p>init-method：指定类中的初始化方法名称。 </p><p>destroy-method：指定类中销毁方法名称。</p><p><strong>三种方式</strong>：</p><ul><li><p>第一种方式：使用默认无参构造函数创建。</p><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认无参构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><p>下面的代码就是用了默认的无参构造函数。</p><p>相当于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面的代码相当于<code>AccountServiceImpl as = new AccountServiceImpl();</code>调用的是无参的构造函数。</p><ul><li><p>第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><ul><li>指定工厂对象id和全路径名</li><li>指定要创建的对象、工厂对象、工厂对象方法</li></ul><p>此种方式是： 先把工厂的创建交给 spring 来管理。 然后在使用工厂的 bean 来调用里面的方法</p><p>​     factory-bean 属性：用于指定实例工厂 bean 的 id。 </p><p>​    factory-method 属性：用于指定实例工厂中创建对象的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span>  <span class="attr">factory-bean</span>=<span class="string">&quot;instancFactory&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">factory-method</span>=<span class="string">&quot;createAccountService&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</p><ul><li>直接通过静态工厂方法获取对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class ：全类名 </span></span><br><span class="line"><span class="comment">  factory-method：要调用的方法</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="spring依赖注入"><a href="#spring依赖注入" class="headerlink" title="spring依赖注入"></a>spring依赖注入</h3><p>依赖注入：Dependency Injection。它是 spring 框架核心 ioc 的具体实现。 </p><p>我们的程序在编写时，通过控制反转，把对象的创建交给了 spring，但是代码中不可能出现没有依赖的情况。 ioc 解耦只是降低他们的依赖关系，但不会消除。</p><p>例如：我们的业务层仍会调用持久层的方法。 那这种业务层和持久层的依赖关系，在使用 spring 之后，就让 spring 来维护了。 简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p><ul><li>能注入的数据：有三类<ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul></li><li>注入的方式：有三种<ul><li>第一种：使用构造函数提供</li><li>第二种：使用set方法提供</li><li>第三种：使用注解提供</li></ul></li></ul><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>顾名思义，就是使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让 spring 框架来为我们注入。</p><p>使用构造函数的方式，给 service 中的属性传值<br>要求：<br>类中需要提供一个对应参数列表的构造函数。<br><strong>涉及的标签</strong>：<code>&lt;constructor-arg&gt;</code><br><strong>属性</strong>：</p><ul><li>index:指定参数在构造函数参数列表的索引位置</li><li>type:指定参数在构造函数中的数据类型</li><li>name:指定参数在构造函数中的名称 用这个找给谁赋值<br>— 上面三个都是找给谁赋值，下面两个指的是赋什么值的—</li><li>value:它能赋的值是基本数据类型和 String 类型</li><li>ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>顾名思义，就是在类中提供需要注入成员的 set 方法。具体代码如下：</p><p><strong>设计的标签</strong>：<code>&lt;property&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h4><p>顾名思义，就是给类中的集合成员传值，它用的也是<strong>set方法</strong>注入的方式，只不过变量的<strong>数据类型都是集合</strong>。 我们这里介绍注入数组，List,Set,Map,Properties。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给数组注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 list 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 set 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 Map 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 properties 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring的简要概述和用xml配置spring的细节&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习</title>
    <link href="http://example.com/2021/01/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-20T01:21:18.000Z</published>
    <updated>2021-01-20T01:24:32.442Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开个坑，了解一下操作系统的相关原理</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;开个坑，了解一下操作系统的相关原理&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="基础课程" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java 内部类</title>
    <link href="http://example.com/2021/01/19/java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://example.com/2021/01/19/java-%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-01-19T03:14:31.000Z</published>
    <updated>2021-01-19T13:37:00.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java 内部类（nested class的一种）</p></blockquote><a id="more"></a><p>在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者 称为外部类</p><p>分类：</p><ul><li><p>成员内部类（static成员内部类和非static成员内部类） </p></li><li><p>局部内部类（没有修饰符）</p></li><li><p>匿名内部类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态成内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类（方法内）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类（代码块内）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类（构造器内）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.<strong>成员内部类</strong></p><ul><li>一方面，作为外部内的成员<ul><li>可以被static修饰（正常来说static是不可以修饰类的）</li><li>可以被四种权限修饰符修饰（public 、protected、default、private）。外部类一般是只能有一个与文件名同名的类被public修饰，其他类只能缺省，protected和private不能使用</li></ul></li></ul><ul><li>另一方面，作为一个类<ul><li>类中可以定义属性、方法、构造器</li><li>可以使用final，不使用final时可以被继承</li><li>可以被abstract修饰</li><li>静态成员内部类不可以调用外部类的非静态方法</li></ul></li></ul><ul><li>如何实例化成员内部类的对象（见下面Dog类和Bird类创建的例子）</li><li>如何在成员内部类中区分调用外部类的结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ceshi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Dog类的实例（Dog类是Person类的一个静态成员内部类）</span></span><br><span class="line">        Person.Dog dog = <span class="keyword">new</span> Person.Dog();</span><br><span class="line">        dog.show();</span><br><span class="line">        <span class="comment">//创建Bird类的实例（Bird类是Person类的一个非静态成员内部类）</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person.Bird bird = person.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">        bird.show();</span><br><span class="line"></span><br><span class="line">        bird.display(<span class="string">&quot;形参&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;Person成员name&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员内部类</span></span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am a dog&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;Bird成员name&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Person.<span class="keyword">this</span>.eat();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//区分内部调用和外部调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参name：&quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;Bird成员name：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类成员name：&quot;</span> + Person.<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p><img src="/images/java-%E5%86%85%E9%83%A8%E7%B1%BB/image-20210119204833281.png"></p><p>2.<strong>局部内部类</strong></p><p>3.<strong>匿名对象和匿名内部类</strong></p><p><strong>匿名对象：没有名字的对象。</strong></p><p><strong>非匿名对象：</strong></p><p>ClassName c=new ClassName();</p><p>c.run();</p><p><strong>匿名对象：</strong></p><p>new ClassName().run();</p><p><strong>注意事项</strong>：</p><p>1、当对象对方法仅进行一次调用的时候，就可以简化成匿名对象。</p><p>2、两个匿名对象不可能是同一个对象。</p><p>3、一般不给匿名对象赋予属性值，因为永远无法获取到。</p><p>4、运行一次，直接就被回收掉了，节省内存空间</p><p><strong>匿名对象的例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anony</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Anony().a=<span class="number">10</span>; <span class="comment">//只是给了匿名对象赋值，并不会改变类中的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过创建对象的方式去调用方法</span></span><br><span class="line">        Anony a=<span class="keyword">new</span> Anony();</span><br><span class="line">        a.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名创建对象并调用方法</span></span><br><span class="line">        <span class="keyword">new</span> Anony().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>：</p><p><img src="/images/java-%E5%86%85%E9%83%A8%E7%B1%BB/image-20210119212111332.png"></p><p><strong>匿名内部类</strong></p><p>匿名内部类会隐式的继承一个类或者实现一个接口。</p><p>或者说，<strong>匿名内部类是一个继承了该类或者实现了该接口的子类匿名对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Inner()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;实现了Inner接口&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java 内部类（nested class的一种）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://example.com/2021/01/17/JDBC/"/>
    <id>http://example.com/2021/01/17/JDBC/</id>
    <published>2021-01-17T04:06:21.000Z</published>
    <updated>2021-01-21T02:11:06.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</p></blockquote><a id="more"></a><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p><strong>通过加载配置文件的方式来获取连接</strong></p><p><strong>java代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1.加载配置文件</span></span><br><span class="line">    InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">    Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">    pros.load(is);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.读取配置信息</span></span><br><span class="line">    String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.加载驱动</span></span><br><span class="line">    Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    System.out.println(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jdbc.properties文件中代码</strong>（位于src目录下）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="使用PreparedStatement实现CRUD操作"><a href="#使用PreparedStatement实现CRUD操作" class="headerlink" title="使用PreparedStatement实现CRUD操作"></a>使用PreparedStatement实现CRUD操作</h2><h3 id="对数据库调用的方式"><a href="#对数据库调用的方式" class="headerlink" title="对数据库调用的方式"></a>对数据库调用的方式</h3><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/images/JDBC/%E8%B0%83%E7%94%A8%E5%88%86%E7%B1%BB.png"></p><h3 id="使用Statement操作数据表的弊端"><a href="#使用Statement操作数据表的弊端" class="headerlink" title="使用Statement操作数据表的弊端"></a>使用Statement操作数据表的弊端</h3><p>因为Statement存在字符串连接和sql注入的弊端，采用PreparedStatement</p><p><img src="/images/JDBC/%E6%B5%81%E7%A8%8B.png" alt="流程"></p><h3 id="自己编写一个JDBCUtils类"><a href="#自己编写一个JDBCUtils类" class="headerlink" title="自己编写一个JDBCUtils类"></a><strong>自己编写一个JDBCUtils类</strong></h3><p>实现获取数据库连接、关闭连接和Statement的操作、关闭资源操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取数据库的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭连接和Statement的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//关闭资源操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)</span><br><span class="line">                rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用PreparedStatement实现增、删、改操作"><a href="#使用PreparedStatement实现增、删、改操作" class="headerlink" title="使用PreparedStatement实现增、删、改操作"></a><strong>使用PreparedStatement实现增、删、改操作</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用PreparedStatement实现查询操作"><a href="#使用PreparedStatement实现查询操作" class="headerlink" title="使用PreparedStatement实现查询操作"></a>使用PreparedStatement实现查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">                <span class="comment">//通过反射获取类中属性名为columnLabel的属性</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                <span class="comment">//设置属性为可以访问的(防止私有的不能访问)</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//给这个类中该属性赋值</span></span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResultSet与ResultSetMetaData"><a href="#ResultSet与ResultSetMetaData" class="headerlink" title="ResultSet与ResultSetMetaData"></a>ResultSet与ResultSetMetaData</h3><p>在上面的查询的例子中用到了ResultSet和ResultSetMetaData来承载查询结果集</p><h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><ul><li>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个<strong>ResultSet 对象</strong></li><li>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的<strong>第一条记录的前面</strong>。</li></ul><ul><li>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，<strong>且指针下移</strong>。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</li></ul><blockquote><p>当获取一个迭代器（iterator）对象后，用iterator.hasNext()和iterator.next()来遍历迭代器元素</p><p>hasNext()：没有指针下移操作，只是判断是否存在下一个元素</p><p>next()：指针下移，返回该指针所指向的元素</p></blockquote><ul><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li></ul><p><strong>关于ResultSet中数据的获取过程如下所示：</strong></p><p><img src="/images/JDBC/%E7%A7%BB%E5%8A%A8%E6%96%B9%E5%BC%8F.png"></p><h4 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h4><ul><li>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</li><li>ResultSetMetaData meta = rs.getMetaData();<ul><li><strong>getColumnName</strong>(int column)：获取指定列的名称（数据库表中的列名）</li><li><strong>getColumnLabel</strong>(int column)：获取指定列的别名（数据库表中起的别名）</li><li><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </li><li><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。</li></ul></li></ul><p><strong>针对于表的字段名与类的属性名不相同的情况</strong>(getColumnName和getColumnLabel的区别)</p><p>比如说在数据库order表中，字段名是order_id,在类中定义的是orderId这个属性，在查询的时候</p><p>用 select order_id orderId from order where name = “pb”   ,这样别名和类名就相同了。</p><p>1.必须声明sql时，使用类的属性名来命名字段的别名<br>2·使用ResultSetMetaData时，需要使用getColumnLabel()来替换getColumnName()<br>获取列的别名。<br>说明：如果sql中没有给字段其别名，getColumnLabel()获取的就是列名</p><p><img src="/images/JDBC/%E5%BE%97%E5%88%B0%E7%BB%93%E6%9E%9C%E9%9B%86.png"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/images/JDBC/1555579816884.png"></p><h2 id="DAO及相关实现类"><a href="#DAO及相关实现类" class="headerlink" title="DAO及相关实现类"></a>DAO及相关实现类</h2><p>目录结构：<br>BaseDao  是一个增删改查的基本操作类</p><p>若要具体实现对某个类的操作。定义一个类的接口，再继承BaseDao类并实现这个接口。</p><p><img src="/images/JDBC/image-20210118094925782.png"></p><p>上图这三个构成了一个基本的操作单位。</p><p>BaseDao：基本操作类</p><p>UserDao：User类的接口</p><p>UserDaoImpl：User的具体实现方法</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>druid.properties中的配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">filters</span>=<span class="string">wall</span></span><br></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关</td></tr></tbody></table><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><h3 id="什么是Apache-DBUtils？"><a href="#什么是Apache-DBUtils？" class="headerlink" title="什么是Apache-DBUtils？"></a>什么是Apache-DBUtils？</h3><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，相当于把crud的各种操作写好封装了，我们在使用的时候只需要调用就好。</p><p><strong>常用API</strong>：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>org.apache.commons.dbutils.DbUtils</li></ul><p>打开官方文档，进入org.apache.commons.dbutils这个package下，可以看到相应的类和接口</p><p><img src="/images/JDBC/image-20210119095920806.png"></p><h3 id="DbUtils"><a href="#DbUtils" class="headerlink" title="DbUtils"></a>DbUtils</h3><ul><li><strong>DbUtils</strong> ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li></ul></li></ul><h3 id="QueryRunner"><a href="#QueryRunner" class="headerlink" title="QueryRunner"></a>QueryRunner</h3><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p><ul><li><strong>更新</strong>（包括插入、更新、删除操作）</li></ul><p><code>public int update(Connection conn, String sql, Object... params) throws SQLException:</code>用来执行一个更新（插入、更新或删除）操作。</p><ul><li><strong>查询</strong></li></ul><p><code>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException</code>：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</p><h3 id="ResultSetHandler接口及实现类"><a href="#ResultSetHandler接口及实现类" class="headerlink" title="ResultSetHandler接口及实现类"></a>ResultSetHandler接口及实现类</h3><p><strong>接口的主要实现类</strong>：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值</li></ul><h3 id="CRUD测试的例子"><a href="#CRUD测试的例子" class="headerlink" title="CRUD测试的例子"></a>CRUD测试的例子</h3><p><strong>操作中使用的数据库表</strong>：customers</p><p><img src="/images/JDBC/image-20210119101304811.png"></p><p><strong>使用的工具类</strong>：JdbcUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从Durid连接池中获取连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getDuridConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">    pro.load(DuridTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">    DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">    Connection conn = ds.getConnection();</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接和Statement的操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span></span>&#123;</span><br><span class="line">    DbUtils.closeQuietly(conn);</span><br><span class="line">    DbUtils.closeQuietly(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据库中每条记录作为一个javaBean</strong>（javaBean的理解？）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date birth)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;, birth=&quot;</span> + birth + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体操作如下：</strong></p><p>1.<strong>添加一条记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接，得到QueryRunner对象，设置sql语句</span></span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;insert into customers(name,email,birth) values (?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">//获取当前日期</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        java.util.Date currentTime = calendar.getTime();</span><br><span class="line">        <span class="comment">//返回修改记录的数量，并更新数据库</span></span><br><span class="line">        <span class="keyword">int</span> count = runner.update(conn,sql,<span class="string">&quot;pb&quot;</span>,<span class="string">&quot;pb@qq.com&quot;</span>,currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102201154.png"></p><p>2.<strong>更新记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;update customers set email = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//将id为1的记录邮箱设置为110409@qq.com</span></span><br><span class="line">        <span class="keyword">int</span> count = queryRunner.update(conn,sql,<span class="string">&quot;110409@qq.com&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102436335.png"></p><p>3.<strong>删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        <span class="comment">//将name=pb的记录删除</span></span><br><span class="line">        String sql = <span class="string">&quot;delete from customers where name = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = queryRunner.update(conn,sql,<span class="string">&quot;pb&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：原来name为pb这条记录已经被删除掉</p><p><img src="/images/JDBC/image-20210119102602642.png" alt="image-20210119102602642"></p><p>4.<strong>查询操作</strong></p><p>4.1查询一条记录，以javaBean形式返回查询到的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询一条记录（BeanHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">        Customer customer = runner.query(conn, sql, handler, <span class="number">13</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102922545.png"></p><p>4.2查询多条记录，将得到的多个customer对象放入List集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询多条记录（BeanListHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//用beanListHandler来作为返回的结果集</span></span><br><span class="line">        BeanListHandler&lt;Customer&gt; beanListHandler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">        <span class="comment">//将返回的结果放到列表中</span></span><br><span class="line">        List&lt;Customer&gt; list = queryRunner.query(conn,sql,beanListHandler,<span class="number">4</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//list 快速打印</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"><span class="comment">//        for(Customer customer : list)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(customer);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119103349982.png"></p><p>4.3用map形式保存返回的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询一条记录（MapHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        MapHandler handler = <span class="keyword">new</span> MapHandler();</span><br><span class="line">        Map map = runner.query(conn, sql, handler, <span class="number">13</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询多条记录(MapListHandler)</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from Customers where id &lt; ?&quot;</span>;</span><br><span class="line">        MapListHandler mapListHandler = <span class="keyword">new</span> MapListHandler();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = queryRunner.query(conn,sql,mapListHandler,<span class="number">4</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：用map键值对形式保存</p><p><img src="/images/JDBC/image-20210119103538062.png"></p><p><img src="/images/JDBC/image-20210119103553227.png"></p><p>4.4查询数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询数量</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from customers where id &lt; ?&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        ScalarHandler scalarHandler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">        <span class="keyword">long</span> count= (<span class="keyword">long</span>) queryRunner.query(conn,sql,scalarHandler,<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义ResultSetHandler的实现类"><a href="#自定义ResultSetHandler的实现类" class="headerlink" title="自定义ResultSetHandler的实现类"></a>自定义ResultSetHandler的实现类</h3><p>下面这个类实现了beanHandler的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    Connection conn = JdbcUtils.getDuridConnection();</span><br><span class="line">    String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名内部类，内部重写了handle方法</span></span><br><span class="line">    ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                Date birth = rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Customer customer = runner.query(conn, sql, handler, <span class="number">6</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">    JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点开beanHandler的源码，看一下也差不多，有就返回Bean对象，没有就返回null</p><p><img src="/images/JDBC/image-20210119110955996.png"></p><h2 id="JDBC的一般性操作"><a href="#JDBC的一般性操作" class="headerlink" title="JDBC的一般性操作"></a>JDBC的一般性操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接的操作（</span></span><br><span class="line">            <span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line">            <span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line">            <span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line">            <span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line">            <span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交数据</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//回滚数据</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//3.关闭连接等操作</span></span><br><span class="line">            <span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line">            <span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JDBC" scheme="http://example.com/categories/JDBC/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java web——Filter和Listener</title>
    <link href="http://example.com/2021/01/17/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/"/>
    <id>http://example.com/2021/01/17/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/</id>
    <published>2021-01-17T01:40:02.000Z</published>
    <updated>2021-01-17T04:03:20.337Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于javaweb中组件：过滤器和监听器</p></blockquote><a id="more"></a><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><h3 id="什么是Filter过滤器"><a href="#什么是Filter过滤器" class="headerlink" title="什么是Filter过滤器"></a>什么是Filter过滤器</h3><p>1、Filter 过滤器它是 JavaWeb 的三大组件之一。<strong>三大组件</strong>分别是：Servlet 程序、Listener 监听器、Filter 过滤器 </p><p>2、Filter 过滤器它是 JavaEE 的规范。也就是<strong>接口</strong></p><p>3、Filter 过滤器它的作用是：<strong>拦截请求</strong>，过滤响应。</p><p>拦截请求常见的应用场景有： </p><p>1、权限检查 </p><p>2、日记操作 </p><p>3、事务管理</p><p>……</p><h3 id="Filter的一个例子"><a href="#Filter的一个例子" class="headerlink" title="Filter的一个例子"></a>Filter的一个例子</h3><p><strong>要求</strong>：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必须是<strong>用户登录之后才允许访问</strong>。</p><p><strong>Filter过滤器的图示如下：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94filter%E5%92%8Clistener/image-20210117100553130.png"></p><p><strong>有权限-&gt;放行               无权限-&gt;不允许访问并跳转到其他页面</strong></p><p><strong>Filter 过滤器的使用步骤：</strong> </p><p>1、编写一个类去实现 Filter 接口 </p><p>2、实现过滤方法 doFilter() </p><p>3、到 web.xml 中去配置 Filter 的拦截路径</p><p><strong>主要代码如下：</strong>继承Filter接口，并重写doFilter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        Object user = session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果没有得到用户信息，请求转发到登录页面</span></span><br><span class="line"> servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 让程序继续往下访问用户的目标资源</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置web.xml代码</strong>：类似servlet程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!--配置Filter拦截--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>exercise.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截的路径是admin路径下的所有资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模拟一次登录操作"><a href="#模拟一次登录操作" class="headerlink" title="模拟一次登录操作"></a>模拟一次登录操作</h3><p>上面代码并没有给出一次具体的登录操作，知识获取session中看有没有user的相关信息</p><p><strong>新建一个LoginServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;pb&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,username);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>login.jsp页面</strong>：登录表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">这是登录页面。login.jsp 页面 &lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8123/15_Filter/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    密 码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94filter%E5%92%8Clistener/image-20210117105649624.png"></p><p><strong>流程如下</strong>：</p><p>进入login界面，输入用户名和密码。（正确的账号是pb，密码是123456）</p><ul><li>若账号密码错误，跳转到login.jsp页面（原页面），此时因为没有登陆成功，在AdminFilter中不能获取到user的信息，不能访问到资源，也会跳转到login.jsp</li><li>若密码正确，AdminFilter不会拦截，资源正常访问。</li></ul><h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>Filter 的生命周期包含几个方法：与servlet生命周期类似</p><p> 1、构造器方法 </p><p>2、init 初始化方法 第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建） </p><p>3、doFilter 过滤方法 第 3 步，每次拦截到请求，就会执行 </p><p>4、destroy 销毁 第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）</p><h3 id="FilterConfig-类"><a href="#FilterConfig-类" class="headerlink" title="FilterConfig 类"></a>FilterConfig 类</h3><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。 </p><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。 </p><p><strong>FilterConfig 类的作用是获取 filter 过滤器的配置内容</strong> </p><p>1、获取 Filter 的名称 filter-name 的内容 </p><p>2、获取在 Filter 中配置的 init-param 初始化参数</p><p>3、获取 ServletContext 对象</p><p><strong>AdminFilter类中代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);</span><br><span class="line"><span class="comment">// 1、获取 Filter 的名称 filter-name 的内容</span></span><br><span class="line">       System.out.println(<span class="string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());</span><br><span class="line"><span class="comment">// 2、获取在 web.xml 中配置的 init-param 初始化参数</span></span><br><span class="line">       System.out.println(<span class="string">&quot;初始化参数 username 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="comment">// 3、获取 ServletContext 对象</span></span><br><span class="line">       System.out.println(filterConfig.getServletContext());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml中配置信息</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter别名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter的全类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>exercise.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置filter初始化参数--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/image-20210117111434255.png"></p><h3 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h3><p>Filter 过滤器 </p><p>Chain 链，链条 </p><p>FilterChain 就是过滤器链（<strong>多个过滤器如何一起工作</strong>）</p><p><strong>执行流程如下图所示</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/image-20210117112914063.png"></p><p><strong>FilterChain.doFilter(）方法的作用：</strong></p><p>1.执行下一个Filter过滤器（如果有的话）</p><p>2.执行目标资源（如果没有）</p><p><strong>多个Filter过滤器的作用：</strong></p><p>1.所有Filter和目标资源默认都执行在同一个线程中</p><p>2.多个Filter共同执行的时候，他们都是共享一个Request对象</p><p><strong>多个Filter执行的顺序</strong>：</p><p>由它们在web.xml文件中从上到下的配置顺序决定的</p><h3 id="Filter拦截路径匹配"><a href="#Filter拦截路径匹配" class="headerlink" title="Filter拦截路径匹配"></a>Filter拦截路径匹配</h3><ul><li><p>精确匹配<br><code>&lt;url-pattern&gt;/target.jsp&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p></li><li><p>目录匹配<br><code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>* </p></li><li><p>后缀名匹配（不需要加反斜杆，否则会报错）<br><code>&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到<br><code>&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.do 结尾才会拦截到<br><code>&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.action 结尾才会拦截到</p></li></ul><p><strong>Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在</strong></p><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><h3 id="什么是listener监听器"><a href="#什么是listener监听器" class="headerlink" title="什么是listener监听器"></a>什么是listener监听器</h3><p>1、Listener监听器它是Javaweb的三大组件之一。Javaweb的三大组件分别是：Servlet程序、Filter过滤器、Listener监听器。<br>2、Listener它是JavaEE的规范，就是<strong>接口</strong>。<br>3、监听器的作用是，<strong>监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</strong></p><p>很多监听器都不怎么常用了，下面就讲一下ServletContextListener。</p><h3 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h3><ul><li><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。 </p></li><li><p>ServletContext 对象在 <strong>web 工程启动的时候创建，在 web 工程停止的时候销毁。</strong> </p></li><li><p>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p></li></ul><p><strong>示例如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListenerImpl</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 对象被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 对象被销毁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关于javaweb中组件：过滤器和监听器&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>鲁豫问答法</title>
    <link href="http://example.com/2021/01/15/%E9%B2%81%E8%B1%AB%E9%97%AE%E7%AD%94%E6%B3%95/"/>
    <id>http://example.com/2021/01/15/%E9%B2%81%E8%B1%AB%E9%97%AE%E7%AD%94%E6%B3%95/</id>
    <published>2021-01-15T07:56:38.000Z</published>
    <updated>2021-01-15T08:05:49.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>真的吗？我不信</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;真的吗？我不信&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>java web——Cookie和Session</title>
    <link href="http://example.com/2021/01/15/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/"/>
    <id>http://example.com/2021/01/15/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/</id>
    <published>2021-01-15T01:03:47.000Z</published>
    <updated>2021-01-16T15:26:50.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Cookie和Session的用法</p></blockquote><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie?"></a>什么是 Cookie?</h3><p>1、Cookie 翻译过来是饼干的意思。</p><p> 2、Cookie 是服务器通知客户端<strong>保存键值对</strong>的一种技术。 </p><p>3、客户端有了 Cookie 后，每次请求都发送给服务器。 </p><p>4、每个 Cookie 的大小不能超过 4kb</p><h3 id="如何创建-Cookie"><a href="#如何创建-Cookie" class="headerlink" title="如何创建 Cookie"></a>如何创建 Cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">   <span class="comment">//1.创建Cookie</span></span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">   <span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;Cookie 创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理如下图所示：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115094206419.png"></p><p>当客户端发现有set-Cookie这个响应头时，就创建或者修改Cookie。</p><p>下图通过查看检查-&gt;network查看。</p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115094542733.png"></p><h3 id="服务器如何获取-Cookie"><a href="#服务器如何获取-Cookie" class="headerlink" title="服务器如何获取 Cookie"></a>服务器如何获取 Cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">//服务器获取客户端的Cookie只需要req.getCookie();即可，返回Cookie数组</span></span><br><span class="line">   Cookie[] cookies = req.getCookies();</span><br><span class="line">   <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">      resp.getWriter().write(<span class="string">&quot;cookie名称：&quot;</span> + cookie.getName()+ <span class="string">&quot;,cookie值：&quot;</span> + cookie.getValue());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理如下：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115100137267.png"><br><strong>同样的，我们可以在network中看到这个请求头</strong><br><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115100258913.png"></p><h3 id="如何修改Cookie"><a href="#如何修改Cookie" class="headerlink" title="如何修改Cookie"></a>如何修改Cookie</h3><p><strong>方法一：</strong>与Cookie的创建是一致的，因为Cookie没有就创建，有就修改覆盖掉。</p><p>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象 </p><p>2、在构造器，同时赋于新的 Cookie 值。 </p><p>3、调用 response.addCookie( Cookie );</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">   req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;newValue1&quot;</span>);</span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;新的Cookie修改成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方案二：</strong> </p><p>1、先查找到需要修改的 Cookie 对象 </p><p>2、调用 setValue()方法赋于新的 Cookie 值。 </p><p>3、调用 response.addCookie()通知客户端保存修改</p><p>不在演示了。</p><h3 id="谷歌浏览器如何查看-Cookie："><a href="#谷歌浏览器如何查看-Cookie：" class="headerlink" title="谷歌浏览器如何查看 Cookie："></a>谷歌浏览器如何查看 Cookie：</h3><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115101713248.png"></p><h3 id="Cookie-生命控制"><a href="#Cookie-生命控制" class="headerlink" title="Cookie 生命控制"></a>Cookie 生命控制</h3><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p><strong>主要方法</strong>：<code>setMaxAge()</code> </p><ul><li>正数，表示在指定的秒数后过期 </li><li>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） </li><li>零，表示马上删除 Cookie</li></ul><p>三种情况测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie的存活时长为3s</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setCookieThreeSecond</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;life3&quot;</span>, <span class="string">&quot;life3&quot;</span>);</span><br><span class="line">   cookie.setMaxAge(<span class="number">3</span>); <span class="comment">// 设置 Cookie 一小时之后被删除。无效</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;已经创建了一个存活3s的 Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除名称为key1的cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   Cookie[] cookies = req.getCookies();</span><br><span class="line">   <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;key1&quot;</span>)) &#123;</span><br><span class="line">         cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">         resp.addCookie(cookie);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浏览器关闭后cookie被删除（默认情况的cookie属于这种情况）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">        IOException </span>&#123;</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;defalutLife&quot;</span>, <span class="string">&quot;defaultLife&quot;</span>);</span><br><span class="line">   cookie.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置存活时间</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie-有效路径-Path-的设置"><a href="#Cookie-有效路径-Path-的设置" class="headerlink" title="Cookie 有效路径 Path 的设置"></a>Cookie 有效路径 Path 的设置</h3><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。 </p><p>path 属性是通过请求的地址来进行有效的过滤。</p><p> CookieA path=/工程路径 </p><p>CookieB path=/工程路径/abc</p><p>请求地址如下：</p><p> <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a> </p><p>CookieA 发送 CookieB 不发送 </p><p><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a> </p><p>CookieA 发送 CookieB 发送</p><p><strong>简单来说：就是cookie满足path路径（在路径下），就能成功发送</strong></p><p><strong>用到的方法是</strong>：<strong>cookie.setPath(String url);</strong></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="什么是Session？"><a href="#什么是Session？" class="headerlink" title="什么是Session？"></a>什么是Session？</h3><p>1、每个客户端都有自己的一个 Session 会话。 </p><p>2、Session 会话中，我们经常用来保存用户登录之后的信息。</p><h3 id="Session的创建与获取"><a href="#Session的创建与获取" class="headerlink" title="Session的创建与获取"></a>Session的创建与获取</h3><p><strong>创建和获取</strong> <strong>Session</strong>。它们的 API 是一样的： <code>request.getSession()</code> ；</p><p>第一次调用是：创建 Session 会话 </p><p>之后调用都是：获取前面创建好的 Session 会话对象。</p><p>判断session到底是不是刚创建出来的：<code>session.isNew();</code></p><p><strong>每个会话都有一个身份证号</strong>。也就是 ID 值。而且这个 ID 是<strong>唯一的</strong>。 <code>session.getId();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();  </span><br><span class="line"><span class="keyword">boolean</span> isNew = session.isNew();</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;isNew的值时：&quot;</span> + isNew + <span class="string">&quot; &lt;br/&gt; &quot;</span> + <span class="string">&quot;id是: &quot;</span> + session.getId());</span><br></pre></td></tr></table></figure><h3 id="Session-域数据的存取"><a href="#Session-域数据的存取" class="headerlink" title="Session 域数据的存取"></a>Session 域数据的存取</h3><p>与cookie不同，session的值可以是Object类型的。</p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116220222545.png"></p><p><strong>session的存放</strong>：<code>req.getSession().setAttribute(String, Object);</code></p><p><strong>session的取出</strong>：<code>Object object = session.getAttribute(String);</code></p><h3 id="Session-生命周期控制"><a href="#Session-生命周期控制" class="headerlink" title="Session 生命周期控制"></a>Session 生命周期控制</h3><p><code>public void setMaxInactiveInterval(int interval)</code> 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。</p><ul><li><p>值为正数的时候，设定 Session 的超时时长。</p></li><li><p>负数表示永不超时（极少使用）</p></li></ul><p><code>public int getMaxInactiveInterval(</code>)获取 Session 的超时时间<br><code>public void invalidate()</code> 让当前 Session 会话马上超时无效。</p><p><strong>Session 默认的超时时间长为 30 分钟。</strong><br><strong>原因</strong>：在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session</p><p><strong>如下图所示：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116224453690.png"></p><p>当然，我们可以在每个servlet程序单独的web.xml文件中设置默认时间，如下设置该servlet时间为10分钟。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="session与浏览器之间的技术关联"><a href="#session与浏览器之间的技术关联" class="headerlink" title="session与浏览器之间的技术关联"></a>session与浏览器之间的技术关联</h3><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116231504548.png"></p><h2 id="小结：Session与Cookie的区别与联系"><a href="#小结：Session与Cookie的区别与联系" class="headerlink" title="小结：Session与Cookie的区别与联系"></a>小结：Session与Cookie的区别与联系</h2><p>待续。。。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Cookie和Session的用法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java web——Servlet</title>
    <link href="http://example.com/2021/01/14/java-web-Servlet/"/>
    <id>http://example.com/2021/01/14/java-web-Servlet/</id>
    <published>2021-01-14T05:55:28.000Z</published>
    <updated>2021-01-14T14:48:00.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于Servlet</p></blockquote><a id="more"></a><h2 id="Servlet-技术"><a href="#Servlet-技术" class="headerlink" title="Servlet 技术"></a>Servlet 技术</h2><h3 id="什么是-Servlet"><a href="#什么是-Servlet" class="headerlink" title="什么是 Servlet"></a>什么是 Servlet</h3><p>1、Servlet 是 JavaEE 规范之一。规范就是<strong>接口</strong><br> 2、Servlet 就 JavaWeb <strong>三大组件之一</strong>。三大组件分别是：<strong>Servlet 程序</strong>、<strong>Filter 过滤器</strong>、<strong>Listener 监听器</strong>。<br> 3、Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端。</p><h3 id="手动实现-Servlet-程序"><a href="#手动实现-Servlet-程序" class="headerlink" title="手动实现 Servlet 程序"></a>手动实现 Servlet 程序</h3><p><strong>步骤</strong>：</p><p>1、编写一个类去实现 Servlet 接口 </p><p>2、实现 service 方法，处理请求，并响应数据 </p><p>3、到 web.xml 中去配置 servlet 程序的访问地址</p><p>我实现的时候，并没有自动导入相关的包，需要我们手动找到Tomcat的lib目录下把Servlet的jar包导入进去。</p><p><img src="/images/java-web-Servlet/image-20210114145911295.png"></p><p>我们导入这个jar包即可</p><p><img src="/images/java-web-Servlet/image-20210114150205821.png"></p><hr><p>第一步和第二步：在src目录下编写一个类去实现 Servlet 接口，重写service方法</p><p><strong>注：service 方法是专门用来处理请求和响应的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloServlet被访问了！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：到 web.xml 中去配置 servlet 程序的访问地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class 是 Servlet 程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>exercise.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern 标签配置访问地址 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">/ 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">/hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：配置好后运行Tomcat，只能有一个Tomcat在运行，否则会报错端口被占用。</p><p>运行成功后在浏览器中输入刚刚配置好的地址：<em>hello就是我们刚刚在<url-pattern>中配置的地址</em></p><p><img src="/images/java-web-Servlet/image-20210114151507915.png"></p><p>在IDEA中可以看到一下运行结果，说明运行成功</p><p><img src="/images/java-web-Servlet/image-20210114151656217.png"></p><h3 id="Servlet程序的访问过程"><a href="#Servlet程序的访问过程" class="headerlink" title="Servlet程序的访问过程"></a>Servlet程序的访问过程</h3><p>下面这张图很完整的诠释了资源的定位和访问过程，要记住</p><p><img src="/images/java-web-Servlet/image-20210114152254369.png" alt="记住这张图"></p><h3 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h3><p>1、执行 Servlet 构造器方法</p><p>2、执行 init 初始化方法 </p><p> <em>第一、二步，是在第一次访问，的时候创建 Servlet 程序会调用。</em> </p><p>3、执行 service 方法 </p><p><em>第三步，每次访问都会调用。</em> </p><p>4、执行 destroy 销毁方法 </p><p><em>第四步，在 web 工程停止的时候调用</em></p><h3 id="GET-和-POST-请求的分发处理"><a href="#GET-和-POST-请求的分发处理" class="headerlink" title="GET 和 POST 请求的分发处理"></a>GET 和 POST 请求的分发处理</h3><p>在service方法中获得请求的方式，请求的方式是get，就执行get方法的相关操作；请求的方式是post，就执行post的相关操作。</p><p>如何知道请求的方式呢？</p><p><img src="/images/java-web-Servlet/image-20210114154324992.png"></p><p>ServletRequest有一个子接口HttpServletRequest ，它有getMethod方法，可以获得请求的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * service 方法是专门用来处理请求和响应的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3 service === Hello Servlet 被访问了&quot;</span>);</span><br><span class="line"><span class="comment">// 类型转换（因为它有 getMethod()方法）</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="comment">// 获取请求的方式</span></span><br><span class="line">        String method = httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doGet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 get 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 post 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过继承-HttpServlet-实现-Servlet-程序"><a href="#通过继承-HttpServlet-实现-Servlet-程序" class="headerlink" title="通过继承 HttpServlet 实现 Servlet 程序"></a>通过继承 HttpServlet 实现 Servlet 程序</h3><p>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。 </p><p><strong>具体步骤</strong>：</p><p>1、编写一个类去继承 HttpServlet 类 </p><p>2、根据业务需要重写 doGet 或 doPost 方法 </p><p>3、到 web.xml 中的配置 Servlet 程序的访问地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doGet（）在 get 请求的时候调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 的 doGet 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doPost（）在 post 请求的时候调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 的 doPost 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet类的继承体系"><a href="#Servlet类的继承体系" class="headerlink" title="Servlet类的继承体系"></a>Servlet类的继承体系</h3><img src="/images/java-web-Servlet/image-20210114162308178.png" style="zoom: 80%;" /><h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><p>ServletConfig类是Servlet程序的配置信息</p><h3 id="ServletConfig类的三大作用"><a href="#ServletConfig类的三大作用" class="headerlink" title="ServletConfig类的三大作用"></a>ServletConfig类的三大作用</h3><p>1、可以获取 Servlet 程序的别名 servlet-name 的值 ：   配置文件中*<servlet-name>*中的值就是别名</p><p>2、获取初始化参数 init-param </p><p>3、获取 ServletContext 对象</p><p><strong>servlet中代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Servlet初始化方法&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;程序的别名是：&quot;</span> + servletConfig.getServletName());</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化参数username的值时：&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取ServletContext对象：&quot;</span> + servletConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml配置文件代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>exercise.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>pb<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在浏览器中访问servlet程序的运行结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114165553379.png"></p><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><h3 id="什么是-ServletContext？"><a href="#什么是-ServletContext？" class="headerlink" title="什么是 ServletContext？"></a>什么是 ServletContext？</h3><p>1、ServletContext 是一个<strong>接口</strong>，它表示 Servlet 上下文对象 </p><p>2、<strong>一个 web 工程，只有一个 ServletContext 对象实例</strong>。 </p><p>3、ServletContext 对象是一个<strong>域对象</strong>。</p><p> 4、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</p><p><strong>什么是域对象?</strong> </p><p>域对象，是可以像 Map 一样存取数据的对象，叫域对象。 </p><p>这里的域指的是存取数据的操作范围，整个 web 工程。 </p><p>​                        存数据                     取数据              删除数据</p><p> Map                 put()                         get()              remove() </p><p>域对象        setAttribute()         getAttribute()    removeAttribute();</p><h3 id="ServletContext-类的四个作用"><a href="#ServletContext-类的四个作用" class="headerlink" title="ServletContext 类的四个作用"></a>ServletContext 类的四个作用</h3><p>1、获取 web.xml 中配置的上下文参数 context-param </p><p>2、获取当前的工程路径，格式:  /工程路径 </p><p>3、获取工程部署后在服务器硬盘上的绝对路径 </p><p>4、像 Map 一样存取数据</p><p><strong>servlet代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取 web.xml 中配置的上下文参数 context-param</span></span><br><span class="line">        ServletContext context = getServletContext();  <span class="comment">//获取servletContext对象</span></span><br><span class="line">        System.out.println(context.getInitParameter(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(context.getInitParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">// 2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前工程路径：&quot;</span> + context.getContextPath());</span><br><span class="line">        <span class="comment">// 3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">         <span class="comment">//斜杠被服务器解析地址为:http://ip:port/工程名/ 映射到IDEA代码的web目录&lt;br/&gt;</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;工程部署的路径是:&quot;</span> + context.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件配置：</strong>（<servlet> 和 <servlet-mapping> 没有写出）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个 web 工程) ，每个web工程只有一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>pb<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114173623140.png"></p><hr><p><strong>第四个作用</strong>：ServletContext 像 Map 一样存取数据</p><p>下面两段代码都是继承了HttpServlet类，在doPost方法中。</p><p><strong>HelloServlet中代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;保存之前: Context1 获取 key1 的值是:&quot;</span>+ context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">context.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Context1 中获取域数据 key1 的值是:&quot;</span>+ context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>HelloServlet1中代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = getServletContext();</span><br><span class="line">    System.out.println(context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要验证第四点，<strong>ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</strong></p><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a><strong>Http协议</strong></h2><p>所谓 HTTP 协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议。</p><p> HTTP 协议中的数据又叫报文。</p><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p><strong>常用请求头的说明</strong></p><ul><li><p> Accept: 表示客户端可以接收的数据类型 </p></li><li><p>Accpet-Languege: 表示客户端可以接收的语言类型 </p></li><li><p>User-Agent: 表示客户端浏览器的信息</p></li><li><p> Host： 表示请求时的服务器 ip 和端口号</p></li></ul><p><strong>哪些是 GET 请求，哪些是 POST 请求</strong></p><p> GET 请求有哪些：</p><p> 1、form 标签 method=get</p><p> 2、a 标签 </p><p>3、link 标签引入 css </p><p>4、Script 标签引入 js 文件</p><p> 5、img 标签引入图片 </p><p>6、iframe 引入 html 页面 </p><p>7、在浏览器地址栏中输入地址后敲回车 POST 请求有哪些： </p><p>8、form 标签 method=post</p><p>POST 请求有哪些：</p><p> 8、form 标签 method=post</p><h3 id="常用的响应码说明"><a href="#常用的响应码说明" class="headerlink" title="常用的响应码说明"></a>常用的响应码说明</h3><p>200 表示请求成功 </p><p>302 表示请求重定向</p><p>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p><p>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h3 id="MIME-类型说明"><a href="#MIME-类型说明" class="headerlink" title="MIME 类型说明"></a>MIME 类型说明</h3><p>MIME 是 HTTP 协议中数据类型。</p><p> MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。</p><p>MIME 类型的格式是“大类型/小 类型”，并与某一种文件的扩展名相对应。</p><h2 id="HttpServletRequest-类"><a href="#HttpServletRequest-类" class="headerlink" title="HttpServletRequest 类"></a>HttpServletRequest 类</h2><p>我们可以通过 HttpServletRequest 对象，获取到所有请求的信息。 </p><h3 id="HttpServletRequest-类的常用方法"><a href="#HttpServletRequest-类的常用方法" class="headerlink" title="HttpServletRequest 类的常用方法"></a>HttpServletRequest 类的常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. getRequestURI() 获取请求的资源路径</span><br><span class="line"></span><br><span class="line">2. getRequestURL() 获取请求的统一资源定位符（绝对路径）</span><br><span class="line"></span><br><span class="line">3. getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line"></span><br><span class="line">4. getHeader() 获取请求头 </span><br><span class="line"></span><br><span class="line">5. getParameter() 获取请求的参数</span><br><span class="line"></span><br><span class="line">6. getParameterValues() 获取请求的参数（多个值的时候使用） </span><br><span class="line"></span><br><span class="line">7. getMethod() 获取请求的方式 GET 或 POST </span><br><span class="line"></span><br><span class="line">8. setAttribute(key, value); 设置域数据</span><br><span class="line"></span><br><span class="line">9. getAttribute(key); 获取域数据</span><br><span class="line"></span><br><span class="line">10. getRequestDispatcher() 获取请求转发对象</span><br></pre></td></tr></table></figure><p><strong>示例如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// i.getRequestURI() 获取请求的资源路径</span></span><br><span class="line">    System.out.println(<span class="string">&quot;URI =&gt; &quot;</span> + req.getRequestURI());</span><br><span class="line">    <span class="comment">// ii.getRequestURL() 获取请求的统一资源定位符（绝对路径）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;URL =&gt; &quot;</span> + req.getRequestURL());</span><br><span class="line">    <span class="comment">// iii.getRemoteHost() 获取客户端的 ip 地址</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 localhost 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 127.0.0.1&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 127.0.0.1 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 127.0.0.1&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 真实 ip 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 真实的客户端 ip 地址&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;客户端 ip 地址 =&gt; &quot;</span> + req.getRemoteHost());</span><br><span class="line">    <span class="comment">// iv.getHeader() 获取请求头</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请求头 User-Agent ==&gt;&gt; &quot;</span> + req.getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line">    <span class="comment">// vii.getMethod() 获取请求的方式 GET 或 POST</span></span><br><span class="line">    System.out.println( <span class="string">&quot;请求的方式 ==&gt;&gt; &quot;</span> + req.getMethod() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下所示：</strong></p><p><img src="/images/java-web-Servlet/image-20210114200944483.png"></p><h3 id="如何获取请求参数"><a href="#如何获取请求参数" class="headerlink" title="如何获取请求参数"></a>如何获取请求参数</h3><p><strong>表单代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8123/06_Servlet/hello3&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>&gt;</span>C++</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>java代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">    System.out.println(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">    System.out.println(<span class="string">&quot;兴趣爱好&quot;</span> + Arrays.asList(hobby));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表单效果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203013358.png"></p><p><strong>IDEA结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203052445.png"></p><h3 id="解决Post请求中文乱码问题"><a href="#解决Post请求中文乱码问题" class="headerlink" title="解决Post请求中文乱码问题"></a>解决Post请求中文乱码问题</h3><p>上面的例子使用Get请求，当用户名输入为中文时可以得到正常的结果。</p><p>若将请求方式改为Post，把代码移入doPost方法中。</p><p><strong>在表单中的输入如下图所示：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203642617.png"></p><p><strong>IDEA中的到的结果如下图所示</strong><br><img src="/images/java-web-Servlet/image-20210114203701212.png"></p><p><strong>现象</strong>：当用户名输入为中文时，会出现乱码。</p><p><strong>解决方法：</strong>在doPost()方法中，加上下面这句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求体的字符集为 UTF-8，从而解决 post 请求的中文乱码问题</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p><strong>概念：</strong>请求转发是指，服务器收到请求后，从一个资源跳转到另一个资源的操作。</p><p><img src="/images/java-web-Servlet/image-20210114213327551.png"></p><p><strong>特点：</strong></p><p>1、浏览器地址栏没有变化<br>2、他们是<strong>一次请求</strong><br>3、他们共享Request域中的数据<br>4、可以转发到WEB-INF目录下（如果直接用浏览器访问的话是不可以的）<br>5、不可以访问工程以外的资源</p><p><strong>servlet1程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet1（柜台 1）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 给材料 盖一个章，并传递到 Servlet2（柜台 2）去查看</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;柜台 1 的章&quot;</span>);</span><br><span class="line">        <span class="comment">// 问路：Servlet2（柜台 2）怎么走</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ , 映射到 IDEA 代码的 web 目录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">      RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line">        <span class="comment">// 走向 Sevlet2（柜台 2）</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>servlet2程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet2（柜台 2）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 查看柜台 1 是否有盖章</span></span><br><span class="line">        Object key1 = req.getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;柜台 1 是否有章：&quot;</span> + key1);</span><br><span class="line">        <span class="comment">// 处理自己的业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2 处理自己的业务 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意下面servlet1程序中的两条关键语句：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line"></span><br><span class="line">requestDispatcher.forward(req,resp);</span><br></pre></td></tr></table></figure><h3 id="web中斜杆的含义"><a href="#web中斜杆的含义" class="headerlink" title="web中斜杆的含义"></a>web中斜杆的含义</h3><p>在 web 中 / 斜杠 是一种绝对路径。</p><ul><li><p>/ 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a></p></li><li><p>/ 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p><p>比如<img src="/images/java-web-Servlet/image-20210114224746280.png"></p></li></ul><h2 id="HttpServletResponse-类"><a href="#HttpServletResponse-类" class="headerlink" title="HttpServletResponse 类"></a>HttpServletResponse 类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>每次请求进来，Tomcat 服务器都会创建一个 Response 对象传 递给 Servlet 程序去使用。HttpServletResponse 表示所有响应的信息。</p><p> 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</p><p>用两个输出流来表示响应</p><ul><li><p>字节流                 getOutputStream();       常用于下载（传递二进制数据） </p></li><li><p>字符流                 getWriter();                      常用于回传字符串（常用）</p><p>两个流同时只能使用一个。 使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p></li></ul><h3 id="往客户端回传数据"><a href="#往客户端回传数据" class="headerlink" title="往客户端回传数据"></a>往客户端回传数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h3><p><strong>问题：</strong>若在响应中写入中文数据，就会出现乱码问题</p><p><strong>解决方法：</strong></p><ul><li><p>方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务器字符集为 UTF-8 </span></span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集 </span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法二</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头 </span></span><br><span class="line"><span class="comment">// 注意！此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><p><strong>概述：</strong>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说，我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）。</p><p><img src="/images/java-web-Servlet/image-20210114221734161.png"></p><p><strong>特点：</strong>（注意与请求转发的特点对比）</p><p>1、浏览器地址栏<strong>会发生变化</strong><br>2、<strong>两次请求</strong><br>3、不共享Request域中数据<br>4、不能访问WEB-INF下的资源<br>5、可以访问工程外的资源</p><p><strong>Response1程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;response1&quot;</span>);</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">        <span class="comment">// 设置响应状态码 302 ，表示重定向，（已搬迁）</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">// 设置响应头，说明 新的地址在哪里</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;http://localhost:8123/06_Servlet/response2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二种方法（推荐）</span></span><br><span class="line">       <span class="comment">// resp.sendRedirect(&quot;http://localhost:8123/06_Servlet/response2&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Response2程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;真正处理用户请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从浏览器的response1中可以看出，代码302，location指向response2<br><img src="/images/java-web-Servlet/image-20210114223715661.png"></p><p>最终在response2中正常访问，如下图所示：</p><p><img src="/images/java-web-Servlet/image-20210114223826422.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>每次写一个servlet程序时都要在xml文件中配置好地址</li><li>xml文件的<url-pattern>/hello</url-pattern>中的标签内容一定要写”/“</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关于Servlet&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java web——Tomcat</title>
    <link href="http://example.com/2021/01/14/java-web-Tomcat/"/>
    <id>http://example.com/2021/01/14/java-web-Tomcat/</id>
    <published>2021-01-14T00:55:28.000Z</published>
    <updated>2021-01-17T09:21:55.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>梳理下javaweb，忘得差不多了。</p></blockquote><a id="more"></a><p><strong>java web 技术体系</strong></p><p><img src="/images/java-web-Tomcat/image-20210117172041979.png" alt="image-20210117172041979"></p><h2 id="java-web-简述"><a href="#java-web-简述" class="headerlink" title="java web 简述"></a>java web 简述</h2><h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><p>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称。 JavaWeb 是基于<strong>请求</strong>和<strong>响应</strong>。</p><p><strong>请求（request）：</strong>指客户端给服务器发送数据</p><p><strong>响应（response）：</strong>服务器给客户端回传数据</p><p>请求和响应是成对存在的。</p><h3 id="web资源分类"><a href="#web资源分类" class="headerlink" title="web资源分类"></a>web资源分类</h3><ul><li><strong>静态资源</strong>： html、css、js、txt、mp4 视频 , jpg 图片</li><li><strong>动态资源</strong>： jsp 页面、Servlet 程序</li></ul><h3 id="常用的web服务器"><a href="#常用的web服务器" class="headerlink" title="常用的web服务器"></a>常用的web服务器</h3><p><strong>Tomcat</strong>：由 <strong>Apache 组织</strong>提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务 器），也是当前应用最广的 JavaWeb 服务器（免费）。</p><p><strong>Jboss</strong>：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p><p>。。。还有一些企业级的和收费版的</p><h2 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>找到对应版本的安装包，解压到需要安装的目录即可</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="/images/java-web/image-20210114094730750.png" alt="" style="zoom: 67%;" /><p>bin ：（binary，二进制文件）专门用来存放 Tomcat 服务器的可执行程序<br>conf ：（configuration，配置文件）专门用来存放 Tocmat 服务器的配置文件<br>lib ：（library）专门用来存放 Tomcat 服务器的 jar 包<br>logs ：专门用来存放 Tomcat 服务器运行时输出的日记信息<br>temp ：（temporary）专门用来存放 Tomcdat 运行时产生的临时数据<br>webapps ：（webapplications）专门用来存放部署的 Web 工程。<br>work ：是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</p><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><ul><li>方法一，进入bin目录下，双击startup.bat文件启动</li><li>方法二，进入bin目录下，在命令行模式下输入<code>catalina run</code></li></ul><p>我遇到的一个启动错误问题：</p><p><img src="/images/java-web/image-20210114101447178.png"></p><p><strong>错误原因</strong>：初始化失败，查找资料后发现是端口号被占用，Tomcat默认的端口号是8080，而这个端口号可能被其他进程给占用了。（如何查看端口号是否被占用？参考链接：<a href="https://blog.csdn.net/qq_47588845/article/details/108281132%EF%BC%89">https://blog.csdn.net/qq_47588845/article/details/108281132）</a></p><p><strong>解决方案：</strong></p><ul><li>将占用该端口的进程kill掉</li><li>修改Tomcat的端口号，在<code>conf\server.xml</code>文件中修改默认端口号为其他的，重启Tomcat</li></ul><p><strong>测试是否成功启动：</strong></p><p>打开浏览器，在浏览器地址栏中输入以下地址测试：</p><ul><li><a href="http://localhost:8080/">http://localhost:8080</a> </li><li><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> </li><li>http://本机ip:8080      （cmd中ipconfig）</li></ul><h3 id="如何部暑-web-工程到-Tomcat-中"><a href="#如何部暑-web-工程到-Tomcat-中" class="headerlink" title="如何部暑 web 工程到 Tomcat 中"></a>如何部暑 web 工程到 Tomcat 中</h3><p><strong>部署方式</strong>：</p><ul><li>方式一，把 web 工程的目录拷贝到 Tomcat 的 webapps 目录下 即可。</li><li>方式二，找到 Tomcat 下的 conf 目录\Catalina\localhost\ 下,创建如下的配置文件：</li></ul><p><img src="/images/java-web/image-20210114112717051.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Context 表示一个工程上下文</span><br><span class="line">path 表示工程的访问路径:&#x2F;abc</span><br><span class="line">docBase 表示你的工程目录在哪里</span><br><span class="line">--&gt;</span><br><span class="line">&lt;Context path&#x3D;&quot;&#x2F;test&quot; docBase&#x3D;&quot;E:\book&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p><strong>访问</strong>：只需要在浏览器中输入访问地址格式如下： <a href="http://ip:port/工程名/目录下/文件名">http://ip:port/工程名/目录下/文件名</a></p><p><a href="http://ip:port/就已经访问到webapps目录下了，接着输入工程项目、目录名和文件名即可访问">http://ip:port/就已经访问到webapps目录下了，接着输入工程项目、目录名和文件名即可访问</a></p><p><strong>注意</strong>：有时候访问失败，是因为没有重启Tomcat。</p><p><strong>默认访问</strong>：</p><ul><li><p>当我们在浏览器地址栏中输入访问地址如下：</p><p><a href="http://ip:port/">http://ip:port/</a> ====&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程。</p></li><li><p>当我们在浏览器地址栏中输入的访问地址如下：</p><p><a href="http://ip:port/工程名/">http://ip:port/工程名/</a> ====&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html 页面</p></li></ul><h2 id="IDEA整合Tomcat服务器"><a href="#IDEA整合Tomcat服务器" class="headerlink" title="IDEA整合Tomcat服务器"></a>IDEA整合Tomcat服务器</h2><p>1.在File | Settings | Build, Execution, Deployment | Application Servers中添加Tomcat服务器</p><p>2.创建动态web工程，新版本的IDEA（2020.2版本）与之前的版本有所不同。步骤如下：</p><ul><li>先创建一个普通的java Module</li><li>创建好后右键Module-&gt;Add Framework Support-&gt;将Web Application勾选上即可</li></ul><img src="/images/java-web/image-20210114115752291.png" alt="" style="zoom:67%;" /><p>lib文件夹是我自己创建用来存放jar包的。</p><p>3.web工程目录介绍</p><p><img src="/images/java-web/image-20210114121331171.png"></p><p>4.IDEA添加jar包</p><ul><li>方式一：复制jar包到lib目录下，选中jar包右键-&gt;make directionary as-&gt;选择作用范围。（较为简单）</li><li>方式二：在File-&gt;Project Structure-&gt;Library中添加选择jar包路径，并选择作用范围，之后在Artifacts中点击右下角的fix，添加到部署中。</li></ul><p>5.修改Tomcat名称</p><p>我们一般把Tomcat的名称Module同名</p><img src="/images/java-web/image-20210114141539175.png" style="zoom: 50%;" /><p>6.修改工程访问路径</p><img src="/images/java-web/image-20210114141644240.png" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;梳理下javaweb，忘得差不多了。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>1-13</title>
    <link href="http://example.com/2021/01/13/1-13/"/>
    <id>http://example.com/2021/01/13/1-13/</id>
    <published>2021-01-13T14:57:50.000Z</published>
    <updated>2021-01-14T14:55:23.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近日乱七八糟的感想</p></blockquote><a id="more"></a><p>就很奇怪，最近拼多多疯狂暴雷，每天一条热搜，加上最近看了学校论坛还有知乎上的帖子，本来是很畅想未来的工作生活的，感觉这种幻想又被一次次击碎。</p><p>谈谈事情的缘由，开始我是对互联网企业的加班文化有所耳闻的，从去年还是前年的996.icu运动，到后面甚至9116，工作时间是运来越长，感觉时间长了社会便默许了这个准则，于是乎，加班文化兴起。但是中国人是喜欢调和的，到最后人们可能感觉996还不错？</p><p>我在网上看到了许多论调：</p><ul><li><p>”你们别光顾着看互联网企业呀，那其他各行各业辛苦的人多了去了，xx设计院每天工作都不止12个小时了，工地上底层劳动人这不都干这么长时间吗？挣的钱还没那么多呢“</p><p>先说这种思想，这。。这不就比烂吗？当我们在生活中觉得一些事情不好想吐槽时，就会有一些人跳出来说啥就这，那我们那XX不比这更加过分吗？那我想说，本质上不都是一些不好的事物，比来比去比个谁更过分，并去攻击对方的说法，这不就是压迫者想要看到的吗，两人都在受害方，却不联合起来，而去鄙视另一方的言论，本身就是一件很可笑的事。其次，每种工作的性质和强度是不一样的，脑力劳动和体力劳动是不一样的，</p><p>有的工作，看似下班了，其实处在oncall状态。。</p></li><li><p>“那你不干就是了，有的是人想做”</p><p>这句话我看了其实很扎心，好像确实是这样，即便拼多多那位员工猝死了，但还是有人前赴后继的想去做，或许是“给的太多了”。企业为什么要让一个人高强度的加班，而不去雇两个人呢，就牵扯到一个利益的问题，如果这份工作让你花两个人的工作时间去做，给你1.5倍的工资，但雇佣两个人，就需要2倍的工资，那么那个是企业更想去做的呢，还不说人多了之后在沟通、信息流通方面所需的额外资金消耗。我在学校树洞上看到一个帖子，把这两年拼多多的骚操作用日记的形式写了下来，当时看的我都愤怒了，他说他离职了才敢公开出来，要不然可能像前几天那位在陌陌匿名发帖被查出来的员工一样，被各种敷衍的理由给辞退。</p></li></ul><p>然后就心情有点乱，，看了看狂神的git视频和他的最新的开公司的视频，一个18岁辍学的人（不知道是不是我看错了）在几年内挣够了钱出资500万开了家公司，从一打工人翻身成了老板，讲了一堆他的想法，看的我是心潮澎湃，立马想撸起袖子加油干。</p><p>就晚上的时候看了一下阿里面经，人给我看蒙了，这都问的啥，基本上都不会，其实不会也很正常。然后联想到前几天看到一个人写的博客，作者是双非学校的大三学生（现在应该在字节工作有1年了），他的博客里面记录了大学的学习过程，我看完觉得我连普通学校的人都比不过，给我整自卑了，当然我并不是对学历有什么歧视，最近越来越意识到人与人之间的差距远比学校与学校之间的差距要大。</p><p>好吧，虽然我可能现在还不找工作，但这些在实践的技能上我还差得远，我经常吐槽自己“先天下之忧而忧”，我知道这句话不是这样用的，但看起来还蛮有喜感。</p><p>最近脑子是被塞了好多东西，时不时就会感慨一下，这世界真的很奇怪。。</p><p>想说的太多，工作上的，学习上的，人际交往上的，过去的一些事情，未来的畅想，爱情、友情、亲情上的思考。</p><p>不过挺晚了该睡了。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近日乱七八糟的感想&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>java 异常处理</title>
    <link href="http://example.com/2021/01/12/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2021/01/12/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-01-12T02:44:52.000Z</published>
    <updated>2021-01-13T03:37:50.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写点关于异常处理的</p></blockquote><a id="more"></a><h2 id="异常结构概述"><a href="#异常结构概述" class="headerlink" title="异常结构概述"></a>异常结构概述</h2><h3 id="异常结构"><a href="#异常结构" class="headerlink" title="异常结构"></a>异常结构</h3><p> 异常机制是指<strong>当程序出现错误</strong>后，程序如何处理。具体来说，异常机制提供了程序退出的安全通道。当出现错误后，程序执行的流程发生改变，程序的控制权转移到异常处理器。</p><p>异常结构如下图所示：</p><p><img src="/images/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2019101117003396.jpg" alt="异常结构"></p><ul><li><p><strong>Throwable</strong>：是Error（错误）和Exception（异常）的父类，这两个又有很多子类。</p></li><li><p><strong>Error</strong>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。</p></li><li><p><strong>Exception</strong>：是程序本身可以处理的异常</p><ul><li>RuntimeException（运行时异常）</li><li>除RuntimeException以外的异常（非运行时异常或编译异常）</li></ul></li></ul><p>根据编译器是否要求必须处理可分为：</p><ul><li>非受检(unchecked)异常，编译器不要求强制处理的异常，Error和RuntimeException属于此。</li><li>受检(checked)异常，编译器要求强制处理的异常，Exception中的非RuntimeException属于此。</li></ul><img src="/images/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20210112150535693.png" alt="受检异常和非受检异常" style="zoom:90%;" /><h3 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h3><ul><li><p>java.lang.RuntimeException (运行时异常)</p><ul><li><p>ClassCastException </p></li><li><p>ArrayIndexOutOfBoundsException </p></li><li><p>NullPointerException </p></li><li><p>ArithmeticException </p></li><li><p>NumberFormatException </p></li><li><p>InputMismatchException</p></li></ul></li><li><p> java.io.IOExeption（编译异常）</p></li><li><p>FileNotFoundException</p></li><li><p>EOFException</p></li><li><p>java.lang.ClassNotFoundException（编译异常）</p></li></ul><h2 id="异常处理机制一-try-catch-finally"><a href="#异常处理机制一-try-catch-finally" class="headerlink" title="异常处理机制一   try -catch-finally"></a>异常处理机制一   try -catch-finally</h2><h3 id="抓抛模型"><a href="#抓抛模型" class="headerlink" title="抓抛模型"></a>抓抛模型</h3><ul><li>Java提供的是异常处理的<strong>抓抛模型</strong>。</li><li>Java程序的执行过程中如出现异常，会生成一个异常类对象， 该异常对象将被提交给Java运行时系统，这个过程称为<strong>抛出 (throw)异常</strong>。</li><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处 理。如果异常没有在调用者方法中处理，它继续被抛给这个调用 方法的上层方法。这个过程将一直继续下去，直到异常被处理。 这一过程称为<strong>捕获(catch)异常。</strong></li></ul><h3 id="try-catch处理过程"><a href="#try-catch处理过程" class="headerlink" title="try-catch处理过程"></a>try-catch处理过程</h3><ul><li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码。</li><li>catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。</li><li>catch中的异常类型如果满足子父类关系，则要求<strong>子类一定声明在父类的上面</strong>（若父类放上面，则下面的子类永远都不可能被执行）。否则，报错。</li><li>常用的异常处理的方式（catch后的语句）：<code>e.printStackTrace()</code>，打印出异常处理信息。</li><li>在try结构中声明的变量，再出了try结构后，就不能再被调用（就是变量的作用范围）。</li></ul><h3 id="try-catch-finally中finally的作用"><a href="#try-catch-finally中finally的作用" class="headerlink" title="try-catch-finally中finally的作用"></a>try-catch-finally中finally的作用</h3><p>finally中写的是一定会执行的语句。</p><p>我们会有这样的疑问：把语句写到try-catch后和把语句写到finally中有什么区别呢，不都是执行完异常后在执行后面的语句吗？<br><strong>区别：</strong></p><ul><li>假如在catch中要执行的语句又有异常出现，又因为此时没有捕获异常，就会终止程序。<ul><li>若语句写在finally中，则会在终止程序之前被执行</li><li>若没有写在finally中，则不会执行</li></ul></li></ul><p>第一种情况，写在finally语句中，这句话会被打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(a[<span class="number">10</span>]); <span class="comment">//下标越界</span></span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;此语句一定会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种情况，没有写在finally语句中，不会被打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(a[<span class="number">10</span>]); <span class="comment">//下标越界</span></span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;此语句一定会被执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在语句中有return语句</li></ul><p>有以下几种情况：都是要返回语句之前先执行finally中的语句。(<strong>但我在IDEA中执行并没有得到异常结果？疑惑</strong>）<br>第一种：打印语句并返回2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;此语句一定会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种,将异常语句注释掉后，先打印语句再返回1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="comment">// System.out.println(arr[10]);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;此语句一定会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种，打印语句并返回3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;此语句一定会被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源台释放。此时的资源释放，就需要声明在finally中。</li></ul><h2 id="异常处理机制二-throws"><a href="#异常处理机制二-throws" class="headerlink" title="异常处理机制二 throws"></a>异常处理机制二 throws</h2><ul><li><p>“throws +异常类型”写在方法的声明处。<br>一旦当方法体执行时，出现异常，<strong>仍会在异常代码处生成一个异常类的对象</strong>，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p></li><li><p>相当于并没有真正被处理掉，而是抛给了它的调用者。若一直往上抛给了main方法，就需要在main方法中写try-catch方法，若在main方法上还往外抛出，jvm就会崩溃。</p></li><li><p><strong>子类重写方法抛出的异常类型不大于父类抛出的异常类型</strong>(重写规则)</p><p>下面用一个例子来解释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">father_function</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">father_function</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">new</span> File(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Father fs = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fs.father_function();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发生了异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ol><li>定义了一个类，类名为Father，Father中包含一个普通实例方法，但是该方会抛出IOException</li><li>定义了一个Father类的子类：Son，该类重写了父类Father的方法，但是子类重写方法后选择了抛出一个更大的异常</li><li>定义了一个Test类，包含一个main方法</li><li>Test类中创建了一个Son类对象（也即Father类的子类对象），然后使try…catch…语句将<code>fs.father_function();</code>这条会抛出异常的语句包围，并使用了IOException对象对当前可能产生的异常进行捕</li></ol><p><strong>结果：</strong></p><p>​    程序编译失败</p><p><strong>原因分析</strong>：</p><ol><li><p>在java多态机制中，对象引用fs在<strong>编译时期</strong>是属于父类类型也即Father类型，但是在<strong>运行时</strong>fs属于子类类型，也就是Son类型</p></li><li><p>也就是说在编译的时候，编译器发现catch中的IOException完全能将父类方法中抛出的异常捕获，因此编译通过，但是在运行时期，由于fs变成了子类类型，子类重写的方法抛出的异常是Exception，显<strong>然IOException不能捕获这个比它更大的异常</strong>，因此在运行时期也就出现失败</p></li></ol><p><strong>总结</strong>：</p><p>这个示例也就演示了一个道理，在java中，子类重写父类的方法时，子类如果选择抛出异常，那么抛出的异常类型不能大于父类的异常类型。</p></li></ul><h2 id="异常处理之手动抛出异常—throw"><a href="#异常处理之手动抛出异常—throw" class="headerlink" title="异常处理之手动抛出异常—throw"></a>异常处理之手动抛出异常—throw</h2><p>关于异常对象的产生：</p><ul><li>系统自动生成异常对象</li><li>手动生成一个异常对象，并抛出（throw）异常对象</li></ul><p>下面举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Throw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.register(-<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//手动抛出一个异常对象</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;您输入的数据非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若抛出的异常不是RuntimeException，而是需要处理的异常，如下所示：需要throws并在调用处try-catch处理掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Throw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stu.register(-<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">int</span> id)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//抛出一个需要处理的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;您输入的数据非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理之用户自定义异常"><a href="#异常处理之用户自定义异常" class="headerlink" title="异常处理之用户自定义异常"></a>异常处理之用户自定义异常</h2><p>如何自定义异常类？(可以点开系统中任意一个异常类的内部源码，主要步骤就是下面三步)<br>1.继承于现有的异常结构：RuntimeException、Exception<br>2.提供全局常量：serialVersionUID<br>3.提供重载的构造器，有参和无参的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">703874729833L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一道练习题"><a href="#一道练习题" class="headerlink" title="一道练习题"></a>一道练习题</h2><p>练习1.判断下列程序输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法A&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;制造异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用A方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法B&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用B方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：</p><p>进入方法A<br>用A方法的finally<br>制造异常<br>进入方法B<br>调用B方法的finally</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/images/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20210113113636331.png" alt="image-20210113113636331"></p><p>参考链接：</p><p>1.子类重写方法抛出的异常类型不大于父类抛出的异常类型</p><p><a href="https://blog.csdn.net/xichengfengyulou/article/details/93330694">https://blog.csdn.net/xichengfengyulou/article/details/93330694</a></p><p>2.java异常更详细的解释</p><p><a href="https://blog.csdn.net/qq_29229567/article/details/80773970">https://blog.csdn.net/qq_29229567/article/details/80773970</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写点关于异常处理的&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java IO流</title>
    <link href="http://example.com/2021/01/11/java-IO%E6%B5%81/"/>
    <id>http://example.com/2021/01/11/java-IO%E6%B5%81/</id>
    <published>2021-01-11T06:25:08.000Z</published>
    <updated>2021-01-13T11:23:31.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java io 其实看过好几遍了，但是看过就忘了，没有系统的总结，所以记下来加深印象。</p></blockquote><a id="more"></a><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="File类构造器"><a href="#File类构造器" class="headerlink" title="File类构造器"></a>File类构造器</h3><p>File类的一个对象通常来代替一个文件或者一个文件夹。</p><p>1.<code>public File(String pathname)</code>：以pathname为路径创建File对象，可以是绝对路径或者相对路径。</p><ul><li><p>绝对路径：是一个固定的路径,从盘符开始。</p></li><li><p>相对路径：是相对于某个位置开始</p></li></ul><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\idea_worksapce\\holiday_java_study\\java_io\\hello2.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<strong>运行上述代码只是在内存层面创建了文件对象，文件夹中并不会看到有新文件产生</strong>。</p><blockquote><p>**路径分隔符 **</p><p>路径分隔符与系统有关</p><ul><li>windows和DOS系统默认使用“\”来表示。</li><li>UNIX和URL使用“/”来表示</li></ul><p>为了支持跨平台运行，提供了一下三种方法解决：</p><ul><li><p>第一种双斜杆，避免被转译</p><p><code>File file1 = new File(&quot;d:\\yourFile\\info.txt&quot;);</code> </p></li><li><p>第二种用File类中的已定义好的一个常量<code>File.separator</code></p><p><code>File file2 = new File(&quot;d:&quot; + File.separator + &quot;yourFile&quot; + File.separator + &quot;info.txt&quot;);</code></p></li><li><p>第三种用单反斜杠</p><p><code>File file3 = new File(&quot;d:/yourFile&quot;);</code></p></li></ul></blockquote><p>​        </p><p>2.<code>public File(String parent,String child)</code>:以parent为父路径，child为子路径创建File对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\idea_worksapce\\holiday_java_study\\java_io&quot;</span>,<span class="string">&quot;file&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.<code>public File(File parent,String child)</code>:根据一个父File对象和子文件路径创建File对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file4 = <span class="keyword">new</span> File(file3,<span class="string">&quot;hello3.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="File类常用方法"><a href="#File类常用方法" class="headerlink" title="File类常用方法"></a>File类常用方法</h3><ul><li>File类的获取功能</li></ul><p><code>public String getPath()</code> ：获取路径<br><code>public String getName()</code> ：获取名称<br><code>public String getParent()</code>：获取上层文件目录路径。若无，返回null<br><code>public long length()</code> ：获取文件长度（即：字节数）。不能获取目录的长度。<br><code>public long lastModified()</code> ：获取最后一次的修改时间，毫秒值</p><p>–这两种方法适用于文件目录–</p><p><code>public String[] list()</code> ：获取指定目录下的所有文件或者文件目录的名称数组<br><code>public File[] listFiles()</code> ：获取指定目录下的所有文件或者文件目录的File数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\idea_worksapce\\holiday_java_study\\java_io\\hello2.txt&quot;</span>);</span><br><span class="line">    System.out.println(file1.getAbsolutePath());</span><br><span class="line">    System.out.println(file2.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(file1.getPath());</span><br><span class="line">    System.out.println(file2.getPath());</span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    System.out.println(file1.getName());</span><br><span class="line">    System.out.println(file2.getName());</span><br><span class="line">    System.out.println(<span class="number">3</span>);</span><br><span class="line">    System.out.println(file1.getParent());<span class="comment">//用相对路径结果null</span></span><br><span class="line">    System.out.println(file2.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    System.out.println(file1.length());<span class="comment">//此时文件还不存在，结果为0.可新建文件验证</span></span><br><span class="line">    System.out.println(file2.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    System.out.println(file1.lastModified());<span class="comment">//记录上次修改时间点的毫秒数，例如：1610352348114</span></span><br><span class="line">    <span class="comment">//System.out.println(new Date(file1.lastModified());</span></span><br><span class="line">    <span class="comment">//可以获得准确时间点，例如：Mon Jan 11 16:05:48 CST 2021</span></span><br><span class="line">    System.out.println(file2.lastModified());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">运行结果如下：</span><br><span class="line">D:\idea_worksapce\holiday_java_study\java_io\hello1.txt</span><br><span class="line">D:\idea_worksapce\holiday_java_study\java_io\hello2.txt</span><br><span class="line">1</span><br><span class="line">hello1.txt</span><br><span class="line">D:\idea_worksapce\holiday_java_study\java_io\hello2.txt</span><br><span class="line">2</span><br><span class="line">hello1.txt</span><br><span class="line">hello2.txt</span><br><span class="line">3</span><br><span class="line">null</span><br><span class="line">D:\idea_worksapce\holiday_java_study\java_io</span><br><span class="line">4</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>文件目录测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\idea_worksapce\\holiday_java_study&quot;</span>);</span><br><span class="line">    String[] list = file1.list();</span><br><span class="line">    <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File[] file = file1.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File f : file)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">holiday_java_study.iml</span><br><span class="line">java_io</span><br><span class="line">out</span><br><span class="line">src</span><br><span class="line">D:\idea_worksapce\holiday_java_study\.idea</span><br><span class="line">D:\idea_worksapce\holiday_java_study\holiday_java_study.iml</span><br><span class="line">D:\idea_worksapce\holiday_java_study\java_io</span><br><span class="line">D:\idea_worksapce\holiday_java_study\out</span><br><span class="line">D:\idea_worksapce\holiday_java_study\src</span><br></pre></td></tr></table></figure><ul><li><p>File类的重命名功能</p><p><code>public boolean renameTo(File dest):</code>把文件重命名为指定的文件路径</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//本例将hello.txt移动到C:\\Users\\1\\Desktop并更名为hello2.txt</span></span><br><span class="line"><span class="comment">//注意file1在硬盘中要存在，file2在硬盘中不能存在。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file1  = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\1\\Desktop\\hello2.txt&quot;</span>);</span><br><span class="line">    Boolean renameto = file1.renameTo(file2);</span><br><span class="line">    System.out.println(renameto);<span class="comment">// 如果移动成功返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>File类的判断功能</p><p><code>public boolean isDirectory()</code>：判断是否是文件目录<br><code>public boolean isFile() </code>：判断是否是文件<br><code>public boolean exists() </code>：判断是否存在<br><code>public boolean canRead()</code> ：判断是否可读<br><code>public boolean canWrite()</code> ：判断是否可写<br><code>public boolean isHidden() </code>：判断是否隐藏</p></li><li><p>File类的创建与删除功能</p></li></ul><p><code>public boolean createNewFile() </code>：创建文件。若文件存在，则不创建，返回false<br><code>public boolean mkdir()</code> ：创建文件目录。如果此文件目录存在，就不创建了。<br>                                                    如果此文件目录的上层目录不存在，也不创建。<br><code>public boolean mkdirs()</code> ：创建文件目录。如果上层文件目录不存在，一并创建<br><code>public boolean delete()</code>：删除文件或者文件夹</p><p>文件的创建与删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//如果文件不存在则创建文件，如果存在则删除文件。</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        file.delete();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 1.第一种情况io目录已存在，则两种方法都能成功创建。</span></span><br><span class="line"><span class="comment">// 2.第二种情况，io目录存在，但是iox目录不存在，则mkdir方法不能创建目录，mkdirs方法能成功创建。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1&quot;</span>);</span><br><span class="line">   <span class="comment">// File file1 = new File(&quot;D:\\io\\iox\\io1&quot;);</span></span><br><span class="line">    Boolean mkdir = file1.mkdir();</span><br><span class="line">    <span class="keyword">if</span>(mkdir)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io2&quot;</span>);</span><br><span class="line">   <span class="comment">// File file2 = new File(&quot;D:\\io\\iox\\io2&quot;);</span></span><br><span class="line">    Boolean mkdirs = file2.mkdirs();</span><br><span class="line">    <span class="keyword">if</span>(mkdirs)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="File类的几个练习题"><a href="#File类的几个练习题" class="headerlink" title="File类的几个练习题"></a>File类的几个练习题</h3><ol><li>给定一个已存在的文件，在其所在目录下创建新的目录或文件。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    File parentFile = <span class="keyword">new</span> File(file.getParentFile(),<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> flag = parentFile.createNewFile();</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        parentFile.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断指定目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io&quot;</span>);</span><br><span class="line">String[] list = file.list();</span><br><span class="line"><span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">        <span class="comment">//String类endsWith函数，判断字符串是否以给定的str结尾</span></span><br><span class="line"><span class="keyword">if</span>(s.endsWith(<span class="string">&quot;jpg&quot;</span>))&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="I-O流的分类"><a href="#I-O流的分类" class="headerlink" title="I/O流的分类"></a>I/O流的分类</h2><p>1.输入（input）和输出（output）</p><p>我们站在内存的角度。</p><p>内存-&gt;硬盘（用txt、jpg等形式保存），输出；硬盘-&gt;内存，输入。</p><p>2.分类</p><ul><li><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</p></li><li><p>按数据流的流向不同分为：输入流，输出流  </p></li><li><p>按流的角色的不同分为：节点流，处理流</p></li></ul><table><thead><tr><th align="center"></th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><p>java io流的类都是由这四个类派生出来的，并且以这四个类名作为后缀。</p><p>下图显示了IO流的体系，要特别注意的标成了深色。</p><img src="/images/java-IO%E6%B5%81/image-20210111192730116.png" alt="image-20210111192730116" style="zoom:80%;" /><p>下面主要来介绍节点流（文件流）和缓冲流。</p><h2 id="节点流（文件流）"><a href="#节点流（文件流）" class="headerlink" title="节点流（文件流）"></a>节点流（文件流）</h2><p><strong>注：若用单元测试方法，相对路径是以当前Module为根目录；若用main方法，相对路径是以当前工程为根目录。</strong></p><p>节点流包括：FileReader、FileWriter、FileInputStream、FileOutputStream 四种。</p><ul><li>对于文本文件，（.txt、.java、.cpp）采用字符流（FileReader、FileWriter）</li><li>对于非文本文件，（.jpg、.mp4、.avi、.doc、.ppt）采用字节流（FileInputStream、FileOutputStream）</li></ul><h3 id="FileReader使用"><a href="#FileReader使用" class="headerlink" title="FileReader使用"></a>FileReader使用</h3><p><strong>例题：读取hello.txt文件的内容并打印出来</strong></p><p>1.用<code>read()</code>方法读取单个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//从hello.txt中读取内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        fileReader = <span class="keyword">new</span> FileReader(file1);</span><br><span class="line">        <span class="keyword">int</span> data ;</span><br><span class="line">        <span class="keyword">while</span>((data = fileReader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fileReader != <span class="keyword">null</span>)</span><br><span class="line">                fileReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.用<code>read(char[] cbuf)</code>一次读取多个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file  = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                System.out.print(cbuf[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><p><code>int read()</code> 读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个 字节的Unicode码），如果已到达流的末尾，则返回 -1 。</p></li><li><p><code>int read(char[] cbuf)</code> 将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</p></li></ul><h3 id="FileWriter使用"><a href="#FileWriter使用" class="headerlink" title="FileWriter使用"></a>FileWriter使用</h3><p><strong>例题：向hello.txt中写数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        fw.write(<span class="string">&quot;asd&quot;</span>);<span class="comment">//向hello.txt写入asd字符串</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><ul><li>若文件不存在，则会自动创建一个新文件，并向里面写入数据。</li><li>若文件存在<ul><li>如果使用的构造器是<code>FileWriter(file)</code>或<code>FileWriter(file,false)</code>,每次写出会覆盖原来的内容</li><li>如果使用的构造器是<code>FileWriter(file,true)</code>，每次写出不会覆盖原来的内容，在原来基础上追加内容</li></ul></li></ul><h3 id="FileReader和FileWriter一同使用"><a href="#FileReader和FileWriter一同使用" class="headerlink" title="FileReader和FileWriter一同使用"></a>FileReader和FileWriter一同使用</h3><p><strong>例题：将hello.txt中的内容复制到test.txt中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file1 = <span class="keyword">new</span> File (<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(file1);</span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            fw.write(str);</span><br><span class="line">            <span class="comment">//fw.write(cbuf,0,len);上面两句可直接用这句来代替</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>上述是字符流的使用，因为字符流通常用来处理文本，处理不了图片，需要用字节流来处理。</p><h3 id="FileInputStream和FileOutputStream实现图片复制"><a href="#FileInputStream和FileOutputStream实现图片复制" class="headerlink" title="FileInputStream和FileOutputStream实现图片复制"></a>FileInputStream和FileOutputStream实现图片复制</h3><p>**例题：复制1.png为2.png</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        File file1 = <span class="keyword">new</span> File (<span class="string">&quot;2.png&quot;</span>);</span><br><span class="line">        fr = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        fw = <span class="keyword">new</span> FileOutputStream(file1);</span><br><span class="line">        <span class="keyword">byte</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，上述程序与文本的复制并无很大差别，只是将FileReader和FileWriter换成了FileInputStream和FileOutputStream，读取时采用了byte[]数组。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>分类：</p><ul><li>字符流：BufferedReader、BufferedWriter</li><li>字节流：BufferedInputStream、BufferedOutputStream</li></ul><p>作用：提高读取、写入的速度。</p><p><strong>例题1：用缓冲流实现图片复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BufferedInputStream br = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        File file1 = <span class="keyword">new</span> File (<span class="string">&quot;2.png&quot;</span>);</span><br><span class="line">        <span class="comment">//相当于再套了一层缓冲流</span></span><br><span class="line">        br = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        bw = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file1));</span><br><span class="line">        <span class="keyword">byte</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = br.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//要求先关闭外面的流，再关闭内层的流，此处关闭外层的会自动关闭内层的。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)</span><br><span class="line">                bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题2：用缓冲流实现文本复制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">while</span>((str = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            bw.write(str);</span><br><span class="line">            bw.newLine();<span class="comment">//因为br.readLine不会读取换行符，要手动读取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)</span><br><span class="line">                bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p><code>readLine()</code>函数每次读取一行返回字符串，当读取空行时返回null。</p><p><code>bw.newLine()</code>读取一个空行，用来换行。</p><p><strong>例题3：统计文件中每个字符出现的字数</strong></p><p>test.txt中有若干字符，统计其中的个数，并写入hello.txt中。</p><p>用到的思路是把数据放入HashMap中，接着遍历HashMap并写入新文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test8</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>((len = br.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                <span class="comment">//若字符不存在就设为1，字符存在就加一</span></span><br><span class="line">                map.put(cbuf[i],!map.containsKey(cbuf[i]) ? <span class="number">1</span> : (map.get(cbuf[i]) + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历map，写入数据</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Character,Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Character,Integer&gt; entry : set)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (entry.getKey())&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                    bw.write(<span class="string">&quot;空格=&quot;</span> + entry.getValue());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">                    bw.write(<span class="string">&quot;tab=&quot;</span> + entry.getValue());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                    bw.write(<span class="string">&quot;换行=&quot;</span> + entry.getValue());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:</span><br><span class="line">                    bw.write(<span class="string">&quot;回车=&quot;</span> + entry.getValue());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    bw.write(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)</span><br><span class="line">                bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="/images/java-IO%E6%B5%81/image-20210112121123676.png" alt="test.txt内容"></p><p><img src="/images/java-IO%E6%B5%81/image-20210112121325706.png" alt="hello.txt中内容"></p><h2 id="文件流和缓冲流小结"><a href="#文件流和缓冲流小结" class="headerlink" title="文件流和缓冲流小结"></a>文件流和缓冲流小结</h2><p>其中所涉及的到的类和函数如下图所示：</p><p><img src="/images/java-IO%E6%B5%81/image-20210111221251534.png"></p><p>还有打印流、数据流、对象流等，但其实用法和上面都差不多，就是几层嵌套而已。    </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java io 其实看过好几遍了，但是看过就忘了，没有系统的总结，所以记下来加深印象。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://example.com/2021/01/08/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/01/08/git%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-08T03:31:59.000Z</published>
    <updated>2021-01-13T08:43:27.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本博客的搭建用到了git，<del>出于对知识的热爱</del>（在家太无聊了），决定写一个git的简单使用</p></blockquote><a id="more"></a><h2 id="git简要介绍"><a href="#git简要介绍" class="headerlink" title="git简要介绍"></a>git简要介绍</h2><p>Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Git图标：<img src="/images/git%E4%BD%BF%E7%94%A8/Git%E5%9B%BE%E6%A0%87.jpeg" alt="Git图标" style="zoom:80%;" /></p><p>Git 是一个<strong>开源的分布式版本控制系统</strong>，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git版本控制</p><ul><li>个人操作</li><li>团队协作：记录每次修改的情况。</li></ul><p><strong>什么是版本控制呢？</strong></p><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><img src="/images/git%E4%BD%BF%E7%94%A8/%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3-1610510235263.jpg" alt="版本迭代" style="zoom:50%;" /><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p>请参考<a href="https://www.jianshu.com/p/bebba0d8038e">安装教程</a>。</p><h2 id="git的配置文件"><a href="#git的配置文件" class="headerlink" title="git的配置文件"></a>git的配置文件</h2><p>有以下三种配置文件，若文件中定义的值有冲突，优先级：仓库&gt;用户&gt;系统。</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置文件。</li><li><code>~/.gitconfig</code> 文件：某个用户目录下的配置文件。</li><li>用户定义的各个库中Git目录下的<code>.git/config</code>配置文件，只对当前仓库有效。</li></ul><p>用<code>git config --list</code>命令可以查看自己的配置文件的信息。</p><h2 id="git的工作流程"><a href="#git的工作流程" class="headerlink" title="git的工作流程"></a>git的工作流程</h2><p><img src="/images/git%E4%BD%BF%E7%94%A8/%E6%B5%81%E7%A8%8B.png" alt="git工作流程"></p><p>名词解释：</p><ul><li>workspace：工作区</li><li>staging area：暂存区/缓存区</li><li>local repository：或本地仓库</li><li>remote repository：远程仓库</li></ul><h2 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h2><ol><li>初始化本地仓库：<code>git init</code></li><li>从远程仓库下载一个项目：<code>git clone</code></li><li>添加文件到暂存区：<code>git add</code></li><li>提交暂存区到本地仓库：<code>git commit</code></li><li>从本地仓库提交到远程仓库：<code>git push</code></li></ol><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p><code>git init</code>用于初始化仓库，会把当前目录当做本地仓库，并多出一个<code>.git</code>文件。</p><p><img src="/images/git%E4%BD%BF%E7%94%A8/git%20init.png" alt="git init"></p><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><code>git clone</code>用于从远程仓库下载项目。</p><p>用法：<code>git clone (项目的url) [修改为其他名称]</code></p><p><img src="/images/git%E4%BD%BF%E7%94%A8/git%20clone.png" alt="git clone"></p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code>将文件添加到缓存区</p><p>用法：<code>git add (要添加的文件名)</code></p><p><code>git status</code>用来查看提交状态，也可用<code>git status -s</code>查看简要情况</p><p><img src="/images/git%E4%BD%BF%E7%94%A8/git%20add.png" alt="git add"></p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit</code>将缓存区的文件提交到本地仓库</p><p>用法：<code>git commit -m (&#39;描述信息&#39;)</code></p><p><img src="/images/git%E4%BD%BF%E7%94%A8/git%20commit.png" alt="git commit"></p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><code>git push</code>用于将本地仓库的文件提交到远程仓库</p><p>提交过程中，可能会弹出github登录的界面，如下</p><img src="/images/git%E4%BD%BF%E7%94%A8/github%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="github登录界面" style="zoom: 80%;" /><p>提交成功后的界面如下图所示，当然我们可以登录到github到对应的仓库中寻找，也能找到被提交的文件。</p><p><img src="/images/git%E4%BD%BF%E7%94%A8/git%20push.png" alt="git push"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上是git最最基本的用法，还有许多命令等到用到的时候再写。</p><hr><p>参考文章：<a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></p><p>git命令大全，还有一些插件和教程之类的：<a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本博客的搭建用到了git，&lt;del&gt;出于对知识的热爱&lt;/del&gt;（在家太无聊了），决定写一个git的简单使用&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>hexo+Typora图片插入</title>
    <link href="http://example.com/2021/01/07/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/"/>
    <id>http://example.com/2021/01/07/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/</id>
    <published>2021-01-07T09:17:05.000Z</published>
    <updated>2021-01-08T12:41:09.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录下hexo+Typora图片插入时遇到的问题与解决方法</p></blockquote><a id="more"></a><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>hexo：用官网的来话，是一种快速、简洁且高效的博客框架。</p><p>Typora：一款Markdown编辑器，最大特点是所见即所得，界面十分简洁。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>首先说明，所有博客文件均保存在 <code>Blog/source/_posts/</code>文件夹下。</p><p>在Typora中能够显示图片，但在博客中显示失败</p><p>如下：</p><p><img src="/images/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/Typora%E4%B8%AD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA.png" alt="Typora中正常显示"></p><p><img src="/images/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA.png" alt="博客中无法显示"></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>上面的猫猫表情在Typora中采用的是绝对路径，但是hexo是要用服务器访问自己blog文件夹中的资源的，显然要用相对路径的方式放置图片，让服务器能够访问到图片。</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>1.在<code>Blog/source</code>目录下创建一个<code>images</code>文件夹，用来存放文章中的图片</p><p>2.进入Typora-&gt;文件-&gt;偏好设置（也可直接按ctrl+逗号）-&gt;图像，按下图所示勾选选项</p><p><img src="/images/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/1.png"></p><p>解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;images&#x2F;$&#123;filename&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将会在包含.md文件的目录的上一级目录（也就是是<code>source</code>目录下）的<code>images</code>目录下新建一个与文章同名的文件夹，里面放的就是本篇文章的所有图片。</p></blockquote><p>效果如下图所示：</p><p><img src="/images/hexo+Typora%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/2.png"></p><p>当然，也可自行定义图片保存位置，具体不再赘述。</p><p>3.进入Typora-&gt;格式-&gt;图像-&gt;设置图片根目录，设置<code>Blog/source</code>作为图片根目录。</p><p><strong>注意：这里的图片根目录是与上一步的图片保存位置相对应的。</strong></p><p><strong>若将图片保存到了<code>Blog/source</code>路径下的其他位置，这里的图片根目录也要随之改变。</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里涉及到的主要是资源的访问问题，注意相对路径和绝对路径。</p><p>参考文章：<a href="https://www.cnblogs.com/yinyoupoet/p/13287385.html">https://www.cnblogs.com/yinyoupoet/p/13287385.html</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文记录下hexo+Typora图片插入时遇到的问题与解决方法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2021/01/06/my-first/"/>
    <id>http://example.com/2021/01/06/my-first/</id>
    <published>2021-01-06T02:43:28.000Z</published>
    <updated>2021-01-12T06:25:07.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>You know,the first try always starts with Hello World.</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;Hello World!&lt;/h1&gt;&lt;p&gt;You know,the first try always starts with Hello World.&lt;/p&gt;</summary>
    
    
    
    <category term="test" scheme="http://example.com/categories/test/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
