<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pb</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-09T08:14:03.899Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是情绪价值</title>
    <link href="http://example.com/2021/03/09/%E4%BB%80%E4%B9%88%E6%98%AF%E6%83%85%E7%BB%AA%E4%BB%B7%E5%80%BC/"/>
    <id>http://example.com/2021/03/09/%E4%BB%80%E4%B9%88%E6%98%AF%E6%83%85%E7%BB%AA%E4%BB%B7%E5%80%BC/</id>
    <published>2021-03-09T07:52:00.000Z</published>
    <updated>2021-03-09T08:14:03.899Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>缘由是看到一个帖子是关于物质价值和情绪价值的，物质价值大家都懂，什么是情绪价值呢？</p></blockquote><a id="more"></a><p>以前也看过许多情绪和心理的文章，也想过很多次，思考过一段时间</p><p>我最后得出的结论是：在自身情绪和同理心之间实现动态平衡</p><p>但是没有一个系统的理解，今天在帖子上看到情绪价值这个词，深究了一番，很有感触</p><p>以下全文摘抄自知乎，共勉</p><p>在罗兰·米勒《亲密关系》一书中，<strong>相互依赖理论指出在亲密关系中，我们都是以最小的代价获取最大的奖赏价值，所以我们只会与那些能够提供足够利益的伴侣维持亲密关系。</strong></p><p>这里所谓的奖赏，分别指两种：</p><ul><li><strong>通过与人接触获得有实体的、令我们满意的物品或；</strong></li><li><strong>通过与人接触所带来的愉悦感、成就感等无形的奖励。</strong></li></ul><p>第一点的原理是由经济人（Homo economicus）的视角出发，<strong>即我们的思考和行为都是绝对理性的，都是为了达成目标，只要物质补偿足够大，那就可以满足我们的一切需求。</strong></p><p>第二点的原理是由复杂人（Complex man）的视角出发，<strong>它指出我们的动机、行为以及感受不仅仅受物质资源的客观因素影响，同时还会受到自尊、情绪以及信念等主观的因素影响。</strong></p><p>而情绪价值就是这些能够影响到自尊、情绪、安全感的主观因素。</p><p>举个栗子：</p><p>女孩下午和老板一起去见客户，但是表现不太好，回来的时候被老板训了一通；</p><p>回家之后就找男朋友诉苦：“今天气死我了，balabala（当时的情景）…我觉得我没做错啊”；</p><p>憨憨男友想了想，觉得女孩确实没做对，然后就给她说哪做错了，然后可以怎么怎么改进巴拉巴拉…</p><p>女孩一下就火了，想不通为什么外面受气，回家还要受气，情绪一起来就要吵架；</p><p>男生也觉得冤枉，被劈头盖脸一顿骂，火气也起来了。</p><p>我问问大家，</p><p><strong>首先，女生此时的需求是什么？</strong></p><p>是上文中说的<strong>第一种奖赏价值（实质价值），还是第二种奖赏价值呢（情绪价值）？</strong></p><p>男生的理解是：现在是女友在寻求物质的需求，即怎么才能避免工作中的失误。</p><p>所以他的当务之急是告诉女朋友正确的处事方式，然后为下次工作做好准备。这样女友就不会出错，也不会不高兴了。</p><p>很显然，除开实质上的需求，女孩回来讲这个事情，从第一句到最后一句全是充斥着情绪的，她还很需要一种情绪层面上的奖赏和价值。</p><p>而这个男生完全忽略了这一点的需求，而忽略情绪价值的重要性就会让他们不断吵架。</p><blockquote><p>这个例子就非常典型，在我们与父母之间的相处也经常会发生</p><p>本意都是为对方着想，但好心办了坏事，没有考虑到对方想要的是<strong>实质价值</strong>还是<strong>情绪价值</strong></p><p>我觉得有一个很好的办法就是，先从情绪价值入手，然后推进到实质价值，类似于先考虑到对方的情绪，再给与建议，这样会不会缓和很多呢？</p></blockquote><p><strong>一、情绪价值的意义在哪</strong></p><p>其实相互流露情绪，就是所谓的自我暴露（<strong>Self-disclosure</strong>），这是一种人类天生的，增进关系的一种行为。但是你看，<strong>很多人相互交流，相互流露情绪反而关系越是水深火热。</strong></p><p>就像上面的男生一样，他的行为确实很蠢，但是他的动机呢？——是不是也是为了女友好呀，好心办坏事，一片好意到了对方耳朵里就成了蓄意气人了。</p><p>这是<strong>因为两个人的成长环境、生活习惯是不一样的，在如何相互喜欢、相互吸引的两个人，也会因为认知、信念的不同导致分歧。</strong></p><p>这些分歧会本身就是两个人亲密关系中的阻碍，像一个很难过的关卡，这个关卡会污染双方的信息一样，最后导致货不对板。让真心诚意的一句话、一个行为变成了坏事。</p><p>面对两个人生活认知习惯都有偏差的情况下，情绪价值的价值就完全体现出来了。</p><p><strong>因为情绪价值就像是夹心饼干的两层饼干一样，把你要表达的事实保护在中间，不受认知偏差的扭曲。</strong></p><p>其实我们的内容始终都是一个：</p><p>就是我希望你好。</p><p>其实这是特别积极的一个内容，但是却很容易变成一种攻击的形式。</p><ul><li>“你的习惯怎么这么差啊，全是坏习惯不知道改改？”——潜台词：你现在的习惯很可能会伤害你，你要学会保护自己啊。</li></ul><ul><li>“说几遍你都不听，你是根本把我的话当成耳边风是吗？”——潜台词：我希望你能对我多在意一点，不然我会感觉很难过。</li></ul><ul><li>“这个就是你做错了啊，你没弄对才错的，你应该这样做才对…”——潜台词：别担心，虽然这次做错了，但是我可以帮你不再做错。</li></ul><ul><li>“这有什么好伤心的，就这么一件小事还难过。”——潜台词：我知道你很伤心，但我希望你能够不要这么伤心，我希望你快乐起来。</li></ul><p>当没有认知偏差的时候，两层饼干外壳可以让你说的话更加动听，让对方更加容易接受；</p><p>当有认知偏差的时候，情绪价值能够给对方提供良好的感受，不会让对方觉得你是在攻击他，所以你想表达的内容也可以传达到对方那里。</p><p>上面的原话就是没有带情绪价值的表达。<strong>从潜台词变成话说出来的时候，你自己只听得到自己的潜台词，但是人家听起来就是刺耳，就是攻击。</strong></p><p>如果有空，你可以试试哪天没事把自己和对方的对话录下来（和家人的也行），等你想起来再拿出来听听，自己品品自己说的话，很可能吓一跳自己怎么会说出那种话。</p><p><strong>二、提供情绪价值的条件</strong></p><p>其实很多人都在说，要给对方提供情绪价值。但如果没有主动有意识的做过这件事的人，会很难体会这种感觉。</p><p>你知道你该提供，你也很想提供，但你以前从没有提供过，甚至今天才具体指导情绪价值是什么东西。</p><p>所以远叔想了很久，终于抛开那些复杂的概念。其实提供情绪价值的前提，以及唯一触发条件就是一个：<strong>具有同理心。</strong></p><p><strong>同理心（Empathy）指自己能够把握与理解到对方的情绪、动机、认知以及态度的一种能力。</strong></p><p><strong>简单来说就是将心比心，换位思考，设身处地的在别人的角度来思考事件。</strong></p><p><strong>①男生/女生同理心能力的优势不同</strong>（有点偏颇，看具体的人）</p><p>一开始的例子里面也看得出来，男生的思维是很实际的，偏向的是实质的价值：</p><ul><li>如果能帮上一个忙，男生会非常开心；</li><li>男生收礼物时，对实用的工具类礼物更倾心（所以一般送电子产品一般都没问题）；</li><li>当你寻求帮助的时候，男生第一目标是解决具体的问题；（是我没错了，</li></ul><p>而女生的思维则是很浪漫的，偏向的是非实体的价值：</p><ul><li>面对帮忙的情况，女生做的更多是陪伴，照顾你的情绪；</li><li>女生收礼物的时候，实用也好，不实用也好，主要是看有没有真的用心（所以随便在淘宝上搜一个礼物就是没有用心，会让人感觉到很敷衍）；</li><li>当你寻求帮助的时候，女生的第一目标是让你先不要这么难过；</li></ul><p>所以<strong>你要提供情绪价值的时候，就要照着对方同理心优势的方向去提供。</strong></p><p>比如男生想要给女生提供情绪价值，就要多着重于对方的情绪，不要急于解决她的问题，而是先照顾她的情绪；</p><p>同时男生在平常生活中，其实可以更多的向对方展现自己的脆弱面，或者向女生倾诉自己的情绪，女孩子会非常乐意陪伴并且处理这些情绪。</p><p>如果女生想要给男生提供情绪价值，就要更多集中在他的需求上，对他所做的具体事情做出肯定。</p><p>女生相较男生在捕捉情绪的能力上要更细腻一些，所以在平时的生活中可以把一些实际的问题留给男生，他们会非常乐意来接手这些具体的麻烦事。</p><p><strong>②意识到对方的本意</strong></p><p>一定要记住对方给你说这些事，本意都是想要亲近你。</p><p>其实你要到这点想：<strong>对方把这些抱怨给你说，是非常信任你的一种表现，他没有其他人可以说了嘛，只有你。</strong></p><p>都说我们对最亲密的人最不伪装，最放肆，所以我们也很容易伤害到对方。</p><p>现在你就要把这个事情反过来想了，他是伤害到你了这是事实，如果他知道他伤害到你了，其实也会很内疚。所以你现在真的要跳过向他确认本意的步骤，二话不说直接反过来伤害他吗？</p><p>虽然说这样好像挨了一顿闷拳，有苦说不出，挺难受的。但是如果你再爆发回去，对方也会感觉很无辜，这样一来两个人就都会进入委屈和愤怒的双重状态，然后就永远失去了相互澄清，相互理解这次矛盾的空间和机会了。</p><blockquote><p>叫做你不服输我也不服输，大家都破罐子破摔呗，哈哈哈</p><p>这样不好</p></blockquote><p><strong>有了同理心，其实本身就具备提供情绪价值的能力了。避免很多冲突，承接对方情绪和缓解冲突的激烈程度，就是在提供一种情绪价值</strong>。</p><p>因为这种表现就是在用身体告诉对方：没关系，你做得再差，我也可以接受。</p><p>这种姿态其实就是在给对方传达一个信息：<strong>你在我的身边是安全的，我不会恶意地伤害你。对方接受到这个信息之后，就会产生安全感。</strong></p><p><strong>而这个安全感就是情绪价值中特别重要的一点，重要到什么地步呢。</strong></p><p><strong>在斯滕伯格的爱情三角（Triangular theory of love）之中，激情之爱、亲密之爱以及承诺之爱，情绪价值所带来的安全感贯穿了亲密与承诺两个要素。</strong></p><p>如果在物质价值层面，一个足够的安全感可能等于房子、车子、家庭背景、样貌身材等等…并不是说这些物质价值是不好的，而是说在情绪价值层面上能够达到的效果，可能比这些拼命才能争取到的资源的效果还要好，还要快，所以大家一定要重视情绪价值。</p><p><strong>三、如何主动提供情绪价值</strong></p><p>上面说的都是比较被动的局面，也是提供情绪价值的大概纲领。</p><p>现在远叔说一些干货，确保你能够根据自己情况马上上手试一下，然后马上体验——你提供的情绪价值越多，对方回报的情绪价值就越多。</p><p><strong>①展现自己的兴趣</strong></p><p>对他人的兴趣，就是把他人当做主角。什么叫做主角呢，就是世界都是围绕他再转，他想干什么就干什么，他想说什么就说什么。</p><p>当然现实生活中不可能达到这样的条件，但是你可以创造出一个虚拟的，小型的主人公情景。<strong>在这里你提供的是情绪价值中的自尊感以及存在感，这些都是人们在现实世界中永恒追求的价值。</strong></p><p>在这个情景中，对方说的话永远排在第一位，也就是说没有人去打断。其实具体的操作就是倾听，让对方讲，自己绝对不插嘴，绝对不发表自己的看法。但是，要有一个细节，那就是加入反馈，认可的反馈。</p><p>首先是语言上的：</p><ul><li>“嗯嗯”、“哦哦”、“原来如此”这类词——在他说完一段话之后，对他说的话进行反馈，表示你正在听他说话。</li></ul><ul><li>“啊，真的吗？”、“之后怎么样了啊？”之类的提问——在你感觉他要说到重点之前的一两句话时（这个需要相互了解，以及长期的练习才能抓住），用来引导他说高潮和重点的部分。</li></ul><p>然后是肢体动作上的：</p><ul><li>眼睛一定要看着对方，可以看眼睛，也可以看眉心；</li><li>谈话时轻松的内容可以微笑，谈话时严肃的内容可以微皱眉头以表示关心；</li><li>频频点头，不要就点一下，一次最少点两下，总之不要太刻意，越自然随便越好；</li><li>模仿对方的情绪，对方笑你就笑，对方叹气你就咂嘴；</li></ul><p>这些语言和行为都是表明，你正在听对方讲话，而且非常的投入（至少表面上看着是），对方就会感觉很爽，感觉暂时的成为了世界中心。</p><p><strong>试问，这么一个完美的交流环境，来过一次，谁不想来第二次呢？</strong></p><p><strong>②表达自己的理解</strong></p><p>既然是交流，那你不可能永远都像上面那样，只倾听不发言。但是一旦发言，就很容易产生攻击，所以你要先展现出非敌意的状态，也就是理解对方的态度。</p><p>要展现出非敌意，直白点说就是：我和你是一个战线的。你说的就是对的，你做的就是对的，你说谁错就是谁错，你说什么就是什么。这里提供的是安全感以及存在感的情绪价值。</p><p>听起来很离谱，既然是交流，那肯定会有摩擦，会有相反的思想和建议。</p><p>我们通常都是以自己为中心，所以一句话里面的重点永远是自己，句式就像下面：</p><p><strong>对方的事 + 转折词 + 自己的想法</strong></p><p>● “这个事情辛苦你了，但是，我觉得你还有很多地方可以提升。”</p><p>● “我听说这次你受伤不轻没事吧？只不过，你也太不小心了吧。”</p><p>● “你的事情还是要优先处理，不过你要记着，弄完之后就来帮我啊。”</p><p>你注意一下，可以发现几乎所有人都是这么说话的，虽然听多了也习惯，但是听着就是不舒服，更别说情绪不好的时候，虽然这句话没毛病，都是在称述事实，但那听着就是个气不打一出来。</p><p>而我们现在要表达出非敌意的态度，同时也要说出自己的想法，怎么表达呢？其实很简单，转折词其实本身就有强调的作用，之前的句式是强调自己。那我们现在把转折词前后的内容颠倒一下，就是强调对方的呀：</p><p>自己的想法 + 转折词 + 对方的事</p><p>● “我觉得你还有很多地方可以提升，但是，这个事情真的辛苦你了。”</p><p>● “你这次也太不小心了，只不过，听说这次受伤不轻没事吧？”</p><p>● “你记得之后来帮我啊，不过，你的事情还是要优先处理。”</p><p>你看，整句话的信息也没有任何的改变，要传递的内容也是相同的。但简单的调换一下顺序，感受就会变得完全不一样，这就是情绪价值的作用和体现。</p><p><strong>四、在亲密关系中体会情绪价值</strong></p><p>其实说这么多理论和方法，远叔还是希望你可以多多去感受，读万卷书，行万里路。有了这些知识，相当于武装了自己，但这不代表你之后的感情之路上你就可以所向披靡。</p><p>你依然会遇到很多的挫折和困难，但远叔要说，这才是好事。因为亲密关系就是一次次挫折和困难中慢慢磨合出来的。</p><p>尼采说：杀不死我的，会让我变得更强。远叔也想说：分不开你们两个的，也会让你们更加相爱。磨难越大，之后的合力就越大。</p><p>这些理论与方法，是你的武器，但怎么使用，使用的好不好，会不会伤到对方，又会不会误伤……等等，都会在真正的亲密关系中一一得到验证。享受亲密关系带来的惊喜和感动，也不要害怕亲密关系带来的伤害和疼痛。</p><p>没有关系是平步青云的，情绪价值在于交流，亲密关系的价值在于经历。相信我，等尘埃落定之后，着身后的一切经历，都有它们自己的意义。</p><p>作者：远叔<br>链接：<a href="https://www.zhihu.com/question/326968879/answer/1640435890">https://www.zhihu.com/question/326968879/answer/1640435890</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;缘由是看到一个帖子是关于物质价值和情绪价值的，物质价值大家都懂，什么是情绪价值呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="摘录" scheme="http://example.com/tags/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫之beautifulsoup</title>
    <link href="http://example.com/2021/03/07/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/"/>
    <id>http://example.com/2021/03/07/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/</id>
    <published>2021-03-07T14:32:50.000Z</published>
    <updated>2021-03-08T04:50:07.243Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实验课要用到python爬虫，其中比较难的部分就是提取已经解析好的html页面，使用beautifulsoup是一种对新手比较友好的方式</p></blockquote><a id="more"></a><h2 id="之前所要做的工作"><a href="#之前所要做的工作" class="headerlink" title="之前所要做的工作"></a>之前所要做的工作</h2><p>无库装库</p><p>在beautifulsoup之前的工作是，解析网页获取网页html代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取浏览器代理头</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#豆瓣网有反爬虫机制，需要加上</span></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers) </span><br><span class="line">html = resp.text   <span class="comment">#返回html源码</span></span><br></pre></td></tr></table></figure><p>好了接下来说说怎么提取页面信息</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="节点选择"><a href="#节点选择" class="headerlink" title="节点选择"></a>节点选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.prettify()) <span class="comment">#把要解析的字符串以标准的缩进格式输出</span></span><br><span class="line">print(soup.title) <span class="comment">#获取title标签整个内容</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prettify结果省略...</span><br><span class="line">&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure><p>看下面的例子，介绍了如何从节点选择内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.title)  <span class="comment"># 获取title标签内容</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.title))  <span class="comment"># 每个节点的类型为 bs4.element.Tag</span></span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)  <span class="comment"># 当有几个p标签时只会匹配第一个</span></span><br><span class="line">print(<span class="string">&quot;下面是提取信息。。。&quot;</span>)</span><br><span class="line">print(soup.title.name)  <span class="comment"># 获取标签名称</span></span><br><span class="line">print(soup.title.string)  <span class="comment"># 标签文本内容，推荐用string</span></span><br><span class="line">print(soup.title.text)  <span class="comment"># 也是标签文本内容，但是在某些标签嵌套的情况下与上面不同</span></span><br><span class="line">print(soup.p.attrs)  <span class="comment"># 获取标签中的所有属性，他们被存放在字典中，name是唯一的所以为字符串，而一个节点元素class属性可能有很多个，用列表存储</span></span><br><span class="line">print(soup.p.attrs[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 下面这两种方式都能获取具体的属性值</span></span><br><span class="line">print(soup.p[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">print(soup.head.title.name)  <span class="comment"># 筛选head后得到的还是Tag类型，所以可以继续筛选</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">bs4.element.Tag</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dromouse&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">下面是提取信息。。。</span><br><span class="line">title</span><br><span class="line">The Dormouse&#x27;s story</span><br><span class="line">The Dormouse&#x27;s story</span><br><span class="line">&#123;&#x27;class&#x27;: [&#x27;title&#x27;], &#x27;name&#x27;: &#x27;dromouse&#x27;&#125;</span><br><span class="line">dromouse</span><br><span class="line">dromouse</span><br><span class="line">title</span><br></pre></td></tr></table></figure><h3 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h3><p>就是先选择某个节点后选择其子孙，兄弟，父母节点的一种选择方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;span&gt;Elsie&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            hello</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.p.contents)  <span class="comment"># 筛选出p标签的直接子节点，以列表形式返回，我们注意到&lt;span&gt;标签没有被单独列出来，因为它属于子孙节点了</span></span><br><span class="line">print(<span class="string">&quot;*************直接子节点**************&quot;</span>)</span><br><span class="line">print(soup.p.children)  <span class="comment"># 同样是筛选出p标签的直接子节点，返回的是生成器类型，用for循环迭代可以输出相应内容</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.children):</span><br><span class="line">    print(i, child)</span><br><span class="line">print(<span class="string">&quot;**************所有子孙节点************&quot;</span>)</span><br><span class="line">print(soup.p.descendants)  <span class="comment"># 递归查询所有子节点，得到所有子孙节点，</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> <span class="built_in">enumerate</span>(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br><span class="line">print(<span class="string">&quot;**************直接父节点************&quot;</span>)</span><br><span class="line">print(soup.a.parent)  <span class="comment"># 输出结果是节点内容</span></span><br><span class="line">print(<span class="string">&quot;**************祖先节点************&quot;</span>)</span><br><span class="line">print(<span class="built_in">type</span>(soup.a.parents))  <span class="comment"># generator类型</span></span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.parents)))  <span class="comment"># 获取祖先节点，用列表输出了它的索引和内容</span></span><br><span class="line">print(<span class="string">&quot;**************一个兄弟节点************&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Next Sibling&#x27;</span>, soup.a.next_sibling)  <span class="comment"># 下一个兄弟节点,节点类型</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.a.next_sibling))</span><br><span class="line">print(<span class="string">&#x27;Prev Sibling&#x27;</span>, soup.a.previous_sibling)  <span class="comment"># 上一个兄弟节点,节点类型</span></span><br><span class="line">print(<span class="string">&#x27;Next Siblings&#x27;</span>, <span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.next_siblings)))  <span class="comment"># 返回前面所有兄弟节点的生成器，可转化为list后处理</span></span><br><span class="line">print(<span class="string">&quot;**************所有兄弟节点************&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Prev Siblings&#x27;</span>, <span class="built_in">list</span>(<span class="built_in">enumerate</span>(soup.a.previous_siblings)))  <span class="comment"># 返回后面所有兄弟节点的生成器</span></span><br><span class="line">print(<span class="built_in">list</span>(soup.a.next_siblings))  <span class="comment"># 转化为list后再次处理</span></span><br><span class="line">print(<span class="built_in">list</span>(soup.a.next_siblings)[<span class="number">1</span>].string)  <span class="comment"># 转化为list后再次处理</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p>省略。。。，可以复制后自己去试</p><h3 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h3><p>主要是关于 <code>find_all()</code> 和 <code>find()</code> 方法的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询所有符合条件的元素。给它传入一些属性或文本，就可以得到符合条件的元素。</span><br><span class="line">find_all(name , attrs , recursive , text , **kwargs)</span><br><span class="line">find同上，只不过返回第一个结果</span><br></pre></td></tr></table></figure><ul><li>name，通过节点的标签名来查询节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>))  <span class="comment"># 通过节点的标签名来查询节点，返回一个列表</span></span><br><span class="line">print(<span class="built_in">type</span>(soup.find_all(name=<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>]))  <span class="comment"># bs4.element.Tag类型，可用到上面讲过的知识继续查询</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;, &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>attrs，通过每个标签中的属性名字来查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-heading&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;list-1&#x27;</span>&#125;))  <span class="comment"># 查询id为 &#x27;list-1&#x27;所在的标签节点内容</span></span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;elements&#x27;</span>&#125;))  <span class="comment"># 查询name 为&#x27;elements&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于一些常用的属性，比如 id 和 class 等，我们可以不用 attrs 来传递。</span></span><br><span class="line"><span class="comment"># 比如，要查询 id 为 list-1 的节点，可以直接传入 id 这个参数。得到的结果与上面一样</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;list-1&#x27;</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">&#x27;element&#x27;</span>))  <span class="comment"># 对于 class 来说，由于 class 在 Python 里是一个关键字，所以后面需要加一个下划线</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure><ul><li>text 用来匹配节点的文本，传入的形式可以是字符串，可以是正则表达式对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">html=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div class=&quot;panel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;panel-body&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Hello, this is a link&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Hello, this is a link, too&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;link&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Hello, this is a link&#x27;</span>, <span class="string">&#x27;Hello, this is a link, too&#x27;</span>]</span><br></pre></td></tr></table></figure><p>还有以下方法，同上述使用差不多</p><ul><li><code>find_parents()</code> 和 <code>find_parent()</code>：前者返回所有祖先节点，后者返回直接父节点。</li><li><code>find_next_siblings()</code> 和 <code>find_next_sibling()</code>：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</li><li><code>find_previous_siblings()</code> 和 <code>find_previous_sibling()</code>：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</li><li><code>find_all_next()</code> 和 <code>find_next()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li><li><code>find_all_previous()</code> 和 <code>find_previous()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li></ul><h2 id="爬取豆瓣电影top250小练习"><a href="#爬取豆瓣电影top250小练习" class="headerlink" title="爬取豆瓣电影top250小练习"></a>爬取豆瓣电影top250小练习</h2><p>下面是一个爬取豆瓣电影top250的练习，分析可知每页25条记录，循环10次查找即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Mobile Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> +<span class="built_in">str</span>(i*<span class="number">25</span>) + <span class="string">&#x27;&amp;filter=&#x27;</span></span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    div_list = soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;info&#x27;</span>)  <span class="comment"># 我们从html代码中可以看到所有电影都在一个class=&#x27;hd&#x27;的div中</span></span><br><span class="line">    print(<span class="string">&#x27;正在打印 top&#x27;</span> + <span class="built_in">str</span>((i + <span class="number">1</span>)*<span class="number">25</span><span class="number">-24</span>) + <span class="string">&#x27; 到 top&#x27;</span> + <span class="built_in">str</span>((i + <span class="number">1</span>) * <span class="number">25</span>) + <span class="string">&#x27; 的电影...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> div_list:</span><br><span class="line">        <span class="comment"># movie_name = each.a.span.string</span></span><br><span class="line">        movie_name = each.find_all(class_=<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].string.strip()  <span class="comment"># 得到电影中文名</span></span><br><span class="line">        <span class="comment"># movie_link = each.a.attrs[&#x27;href&#x27;]</span></span><br><span class="line">        movie_link = each.find(name=<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]  <span class="comment"># 得到电影对应的豆瓣网链接</span></span><br><span class="line">        <span class="comment"># 这里为啥用-1呢？因为有的电影没有外国名，得到的列表中只有一项</span></span><br><span class="line">        movie_other_country_name = each.find_all(class_=<span class="string">&#x27;title&#x27;</span>)[<span class="number">-1</span>].string.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27; &#x27;</span>).strip()  <span class="comment"># 电影外国名</span></span><br><span class="line">        movie_other_name = each.find_all(class_=<span class="string">&#x27;other&#x27;</span>)[<span class="number">0</span>].string.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27; &#x27;</span>).strip()  <span class="comment"># 电影别名</span></span><br><span class="line"></span><br><span class="line">        movie_score = each.find(class_=<span class="string">&#x27;rating_num&#x27;</span>).string  <span class="comment"># 电影评分</span></span><br><span class="line">        movie_type = each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>].strip() <span class="comment"># 电影类型</span></span><br><span class="line">        movie_from_country = each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-2</span>]  <span class="comment"># 电影出品国</span></span><br><span class="line">        <span class="comment"># movie_director = each.find(class_=&#x27;bd&#x27;).p.text.split(&#x27;/&#x27;)</span></span><br><span class="line">        movie_director = each.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;导演&#x27;</span>))[<span class="number">0</span>].split(<span class="string">&quot;主演&quot;</span>)[<span class="number">0</span>].strip()  <span class="comment"># 导演和主演信息</span></span><br><span class="line">        <span class="comment"># 用正则表达式将非数字去掉</span></span><br><span class="line">        movie_play_time = re.sub(<span class="string">&quot;\D&quot;</span>, <span class="string">&#x27;&#x27;</span>, each.find(class_=<span class="string">&#x27;bd&#x27;</span>).p.text)  <span class="comment"># 电影上映时间</span></span><br><span class="line">        movie_review_num = each.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;评价&#x27;</span>))[<span class="number">0</span>].replace(<span class="string">&quot;人评价&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 电影评价人数</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;No.&quot;</span>, number)</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        print(movie_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_other_country_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_other_name, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_link, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        print(movie_review_num, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_director, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_score, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_from_country, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_type, end=<span class="string">&#x27;\t\t&#x27;</span>)</span><br><span class="line">        print(movie_play_time)</span><br></pre></td></tr></table></figure><p>列出了一部分结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正在打印 top1 到 top25 的电影...</span><br><span class="line">No. <span class="number">1</span></span><br><span class="line">肖申克的救赎The Shawshank Redemption月黑高飞(港)     刺激<span class="number">1995</span>(台)https://movie.douban.com/subject/<span class="number">1292052</span>/<span class="number">2300850</span>导演: 弗兰克·德拉邦特 Frank Darabont<span class="number">9.7</span> 美国 犯罪 剧情<span class="number">1994</span></span><br><span class="line">No. <span class="number">2</span></span><br><span class="line">霸王别姬霸王别姬再见，我的妾     Farewell My Concubinehttps://movie.douban.com/subject/<span class="number">1291546</span>/<span class="number">1706837</span>导演: 陈凯歌 Kaige Chen<span class="number">9.6</span> 中国大陆 中国香港 剧情 爱情 同性<span class="number">1993</span></span><br><span class="line">No. <span class="number">3</span></span><br><span class="line">阿甘正传Forrest Gump福雷斯特·冈普https://movie.douban.com/subject/<span class="number">1292720</span>/<span class="number">1730152</span>导演: 罗伯特·泽米吉斯 Robert Zemeckis<span class="number">9.5</span> 美国 剧情 爱情<span class="number">1994</span></span><br><span class="line">No. <span class="number">4</span></span><br><span class="line">这个杀手不太冷Léon杀手莱昂     终极追杀令(台)https://movie.douban.com/subject/<span class="number">1295644</span>/<span class="number">1910590</span>导演: 吕克·贝松 Luc Besson<span class="number">9.4</span> 法国 美国 剧情 动作 犯罪<span class="number">1994</span></span><br><span class="line">No. <span class="number">5</span></span><br><span class="line">泰坦尼克号Titanic铁达尼号(港   台)https://movie.douban.com/subject/<span class="number">1292722</span>/<span class="number">1692244</span>导演: 詹姆斯·卡梅隆 James Cameron<span class="number">9.4</span> 美国 剧情 爱情 灾难<span class="number">1997</span></span><br></pre></td></tr></table></figure><p>参考文章：（<a href="https://cuiqingcai.com/1319.html">崔庆才个人博客——Python 爬虫利器二之 Beautiful Soup 的用法</a>）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实验课要用到python爬虫，其中比较难的部分就是提取已经解析好的html页面，使用beautifulsoup是一种对新手比较友好的方式&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>手机摄影技巧</title>
    <link href="http://example.com/2021/02/22/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2021/02/22/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-22T12:35:42.000Z</published>
    <updated>2021-02-23T00:40:26.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今日整活        </p></blockquote><a id="more"></a><h2 id="第一期-自拍"><a href="#第一期-自拍" class="headerlink" title="第一期 自拍"></a>第一期 自拍</h2><p>1.面对顶光如何处理光线不均匀</p><p>场景：头顶有灯光，中午太阳直射</p><ul><li>帽子遮挡</li><li>避开</li></ul><p>2.室内光线</p><ul><li>脸朝向光线</li><li>避免侧光和逆着光线（一面明一面暗，或者全暗）</li></ul><p>3.道具遮挡显脸小（好像雨我无瓜）</p><p>4.全身照拥有大长腿</p><ul><li>不能俯拍</li><li>仰拍，脚部留白，要有地面，但地面要少</li></ul><p>下图，左边显矮，留白过多</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222205607138.png"></p><h2 id="第二期-构图"><a href="#第二期-构图" class="headerlink" title="第二期 构图"></a>第二期 构图</h2><p><strong>1.黄金分割法</strong></p><p>近似用三分法，九宫格 ，四个交叉点就是黄金分割点 ，用来拍人像是比较稳妥的构图法</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222205854053.png"></p><p><strong>2.点构图</strong></p><p>适合环境人像   场景通常视野开阔  画面干净   没有太多杂物  强调环境和人物和谐统一<br>通常大环境 小人物<br>人物只<strong>有一个点</strong>   有可能不好找到人物  所以也被称为“找你妹”构图</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210126388.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210149536.png"></p><p><strong>3.对角线构图</strong></p><p>适用于拍摄景物或者风光<br>拍摄植物和花朵 百试不爽  画面更饱满<br>仔细寻找大自然本身就有的对角线</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210339840.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210359426.png"></p><p><strong>4.中心构图</strong></p><p>并不是所有人像用三分法都好看<br>有倒影的时候   一片平平 中间有突出的树的时候就适合中心构图  追求中心对称<br>适用于任务特写 突出神态 饱满构图<br><strong>中心构图突出画面中心</strong>  </p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210620887.png"></p><p><strong>5.三角形构图</strong></p><p>拍摄物品，排在三个角，构成三角形</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210738383.png"></p><p>拍摄人物，利用躯体构成</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222210943918.png"></p><p><strong>6.引导线构图</strong></p><p>公路场景中 道路可以作为引导线，给人纵深感</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211112389.png"></p><p><strong>7.开放式构图</strong></p><p>开放式构图 主体不一定在画中心 注重主体与画外的联系  在意画面周围留下被切割不完整的形象  引导观众突破画面限制 产生空间联想<br>并不是每张照片都追求构图工整 主体完整<br>特写之类可以拍局部<br>美食可以只拍部分  引导观众思考</p><p>引发想象，拍一部分</p><p>下面这张将美食放在桌角进行拍摄</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211358170.png"></p><p><strong>8.前景虚化构图</strong></p><p>利用镜头前花花草草  来大光圈虚化，即青草树叶遮挡，营造梦幻感</p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211649766.png"></p><p><img src="/images/%E6%89%8B%E6%9C%BA%E6%91%84%E5%BD%B1%E6%8A%80%E5%B7%A7/image-20210222211719680.png"></p><h2 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h2><h2 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h2><p>参考链接：<a href="https://www.bilibili.com/video/BV1Gb411S7wC">https://www.bilibili.com/video/BV1Gb411S7wC</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今日整活        &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统学习</title>
    <link href="http://example.com/2021/02/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/02/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-21T01:21:18.000Z</published>
    <updated>2021-02-21T01:45:40.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>标题是在一个月前建的，由于<del>各种不可抗因素</del>（中间玩了一两周），拖到现在，能写多少是多少吧</p><p>内容参照王道考研书</p></blockquote><a id="more"></a><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;标题是在一个月前建的，由于&lt;del&gt;各种不可抗因素&lt;/del&gt;（中间玩了一两周），拖到现在，能写多少是多少吧&lt;/p&gt;
&lt;p&gt;内容参照王道考研书&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="基础课程" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.19</title>
    <link href="http://example.com/2021/02/19/2-19/"/>
    <id>http://example.com/2021/02/19/2-19/</id>
    <published>2021-02-19T09:58:31.000Z</published>
    <updated>2021-02-20T01:02:43.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>唧唧歪歪唧唧歪歪</p></blockquote><a id="more"></a><p>知乎话题</p><h1 id="年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？"><a href="#年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？" class="headerlink" title="年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？"></a>年轻人不结婚到底侵犯了谁的利益？为啥全社会都在逼婚？</h1><p>倒不是我被催婚，而是目睹了身边几个大龄亲戚被催婚有感</p><p>中国父母责任的结束是子女的婚礼?</p><ul><li>父母，有人可以赡养自己，关系孩子孤独，多点老年乐趣</li><li>国家，国家经济发展需要新生劳动力所维系</li><li>社会行业，许许多多相关行业的需要，举个例子：房地产行业、新生儿所拉动的社会经济发展。。。</li></ul><p>还看到几个角度，在人与人的交往方面，哪壶不开提哪壶是人与人不熟时尬聊永远优先选择的主题，因为聊这个能戳到你痛点嘛，你肯定最差要反驳几句对不对。你不好说车轱辘话嗯嗯啊啊来敷衍我了。（那意思是并不是别人有意想要催婚，而只是将其当做一个拉近关系聊天的方式。）</p><hr><p>屁股决定脑袋</p><p>出处：</p><blockquote><p>贾雨村断案时想：原来当官没别的诀窍，无非是看脑袋指挥屁股，还是屁股决定脑袋。</p><p>如此权衡一番得失，贾雨村的屁股就移位了，脑袋全听了屁股的指挥，结果便是“徇情枉法，胡乱判断了此案”。</p><p>​                                                        ——《红楼梦》</p></blockquote><p>屁股决定脑袋，网络用语，出自《红楼梦》。用文明一点的说法叫做“位置决定想法”。<strong>一个人坐什么位置，往往决定了他思考的角度和范围</strong></p><p>屁股决定脑袋有两种意思。</p><ul><li>一种是说一个人看问题的角度和立场受到他所处的位置限制，他的位置限制了他的视野，使他只能看到问题的某一方面，能力受限，他是被动的。</li><li>另一种是说一个人会选择对自己的位置有利的立场和角度论述一件利益相关的事，他是主动的</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;唧唧歪歪唧唧歪歪&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>剧本杀</title>
    <link href="http://example.com/2021/02/18/%E5%89%A7%E6%9C%AC%E6%9D%80/"/>
    <id>http://example.com/2021/02/18/%E5%89%A7%E6%9C%AC%E6%9D%80/</id>
    <published>2021-02-18T02:56:10.000Z</published>
    <updated>2021-03-01T13:37:51.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天小周同学要去玩剧本杀，and我被无情嫌弃了Ծ‸Ծ</p><p>这里做一点笔上功夫</p></blockquote><a id="more"></a><h2 id="First-Part-名词介绍和个人理解"><a href="#First-Part-名词介绍和个人理解" class="headerlink" title="First Part 名词介绍和个人理解"></a>First Part 名词介绍和个人理解</h2><p>先说说我的看法，一直是有听过这个名词的，但是没有去玩过。按照我的简单理解</p><p>​                                                    剧本杀 ≈ 角色扮演+逻辑推理？</p><p>围着一个事件，推理、伪装、甩锅。。。</p><p>给个建议：看几期明星大侦探？？</p><p>下面是一些专有名词介绍：</p><p><strong>跳车</strong>：与人开始约定好了要来却鸽了</p><p><strong>翻车</strong>：人没来而且也没成功组局</p><p><strong>发车</strong>：组局成功并进行了游戏</p><p><strong>DM</strong>:主持者，掌握剧本游戏的节奏，推动游戏进程发展</p><blockquote><p>本格就是单纯的谋杀破案，手法复杂但合理可行。<br>变格是脑洞大开，发散思维，奇思妙想，比如涉及牛鬼蛇神时空错乱穿越人格分裂等。</p><p>​                                                                ——摘自贴吧帖子</p></blockquote><p>按我的理解，本格接近现实，类似于名侦探柯南中的作案手法，合理且贴合逻辑</p><p>变格脱离现实，更加荒诞，不过相对于来说不那么枯燥？一直推理可没那么有趣哦</p><p>一些称呼：</p><p><strong>新手玩家</strong>——是指即将接触剧本杀游戏的玩家，对剧本杀游戏和玩法还不是很了解，多数仅凭感觉进行推理。</p><p><strong>进阶玩家</strong>——是指那些已经玩过少量的剧本，多依据出现的线索卡进行推理，但对时间线、动机以及作案手法并不能完全还原的玩家。</p><p><strong>硬核玩家（高配玩家）</strong>——是指那些能够洞悉案件过程，在案情推理上脑洞大开，经常处于上帝视角分析案件的高能玩家。</p><p><strong>边缘玩家（或OB角色</strong>[Observer，即观察者的简称]）——是指那些在剧本中处于剧情边缘的玩家，也指在游戏中高频处于“Offline（离线）”状态的玩家。</p><p><strong>自爆玩家</strong>——就是那些在游戏的过程中，喜欢主动暴露角色身份或角色故事的玩家。</p><p><strong>推土机玩家</strong>——就是指那些游戏一开始就上来推理的玩家。</p><p><strong>菠萝头玩家</strong>——就是指那些情感表现毫无波澜，情感状态始终如一，表情无感的冰冷玩家。</p><p>以下是两对相反的玩家：</p><p><strong>持本玩家（或读本玩家）</strong>——习惯性在游戏过程中一直拿着剧本念台词的玩家。</p><p><strong>戏精玩家</strong>——在读完剧本后，可以摆脱剧本的束缚。用一句话来形容他们就是“不是天生演员，却天生爱演”。戏精玩家在游戏过程中是比较影响(应该是适量正向过度负向)游戏体验的。</p><p><strong>情绪玩家</strong>——在玩本时容易将自己的情绪掺杂进去，凭个人主观感情去判断玩家是不是真凶，同样影响玩家们的游戏体验。</p><p><strong>逻辑玩家</strong>——头脑清晰，重视时间线，推理依靠线索和证据。逻辑玩家在游戏过程中虽然容易找到真凶，但如果过分追求硬核推理的组局，可能会使得整个组局缺少些欢乐的氛围。</p><p><strong>剧本复盘</strong>：游戏结束时，主持人重新给玩家还原故事的真相，让大家更详细了解整个故事剧情，角色的故事，真凶作案的手法等等</p><p>如何了解一个剧本，有如下的类似参考指标：</p><p><strong>机制</strong>——参数值越高，整个本的玩法设置越丰富，剧本体验感越凸出。</p><p><strong>推理</strong>——参数值越高，就越注重硬核推理，实属“逻辑玩家”的最爱。</p><p><strong>欢乐</strong>——参数值越高，整场游戏氛围越欢乐</p><p><strong>情感</strong>——参数值越高，就越注重情感的宣泄。</p><p><strong>恐怖</strong>——参数值越高，恐怖感就越强。</p><p><strong>还原</strong>——参数值越高，剧本还原难度越复杂。玩家不仅要根据当前记忆片段还原角色的故事，还可能要推理一些未知的“怪事”发生的缘由。</p><h2 id="Second-Part-拿到凶手怎么办？"><a href="#Second-Part-拿到凶手怎么办？" class="headerlink" title="Second Part 拿到凶手怎么办？"></a>Second Part 拿到凶手怎么办？</h2><h3 id="1-调整心态（稳住别慌）"><a href="#1-调整心态（稳住别慌）" class="headerlink" title="1. 调整心态（稳住别慌）"></a>1. 调整心态（稳住别慌）</h3><p>冷静下来，请记住，无论你的角色是什么，都不要告诉其他人！不要慌张，好好享受你的角色！</p><h3 id="2-熟读剧本"><a href="#2-熟读剧本" class="headerlink" title="2. 熟读剧本"></a>2. 熟读剧本</h3><p>关注自己的作案动机、故事时间线，以及作案过程上。通过读本去获取这些信息，理清自己作案时，可能留下的线索（如：在<strong>何时</strong>，<strong>“什么地方”</strong>用<strong>“什么工具”</strong>杀的人，作案之后<strong>“留下了什么”</strong>）。大家在盘时间线时，尽可能多的弄清楚，自己在作案时，<strong>其他人都在做些什么事情</strong>。</p><h3 id="3-隐藏非必须公开的关键线索"><a href="#3-隐藏非必须公开的关键线索" class="headerlink" title="3. 隐藏非必须公开的关键线索"></a>3. <strong>隐藏非必须公开的关键线索</strong></h3><h3 id="4-说些适当谎言"><a href="#4-说些适当谎言" class="headerlink" title="4. 说些适当谎言"></a>4. 说些适当谎言</h3><p>哪些可以撒谎呢？常见的撒谎言辞，如：</p><p>“我是想杀TA，但是我还没来得及实施杀人计划，就离开了…”</p><p>“这个东西确实是我的，但被一个神秘人给抢走了（或在前往xxx的地方时丢失了）”</p><p>再比如：</p><p>当你将匕首捅了死者后背时，有血渍在你的衣服上。而你有血迹的衣服恰好被别人搜证到了。你就可以说，“我的匕首被神秘人抢夺时，一不小心划伤了我的手臂，手上的血蹭到了我的袖子上…</p><p>那些不可以撒谎呢？<br>在别人阐述的时间线上，看到了你做了什么事情，你就需要<strong>委婉解释</strong>。如果在这件事情上你撒谎不承认，这就很快暴漏了你是“凶手”的身份。(我的理解是，不是直接不承认我做了，而是我做了其他什么事导致这件事的发生)</p><p>作为凶手，虽然可以撒谎，你<strong>不能太激进地撇清自己</strong>，说自己没有杀人动机（在场每个人都或多或少有一些杀人动机），特别是当别人质疑你的时侯。</p><h3 id="5-积极地参与寻找真凶"><a href="#5-积极地参与寻找真凶" class="headerlink" title="5. 积极地参与寻找真凶"></a>5. <strong>积极地参与寻找真凶</strong></h3><p>聆听、嫁祸、试图带偏别人的观点、受到质疑时不要沉默，只会增加嫌疑，考虑话术</p><h2 id="Third-Part-剧本杀分类"><a href="#Third-Part-剧本杀分类" class="headerlink" title="Third Part 剧本杀分类"></a>Third Part 剧本杀分类</h2><p>剧本题材上：上面已经解释了</p><ul><li><strong>本格本</strong>：</li><li><strong>变格本</strong>：</li></ul><p>剧本玩法上：</p><ul><li><strong>开放本</strong>：这种类型的本一般剧情开放，允许玩家自由发挥。此外，玩家凶手指认正确，故事角色会有一种走向。凶手指认失败，故事角色的另一种走向，会有明确交代。</li><li><strong>封闭本</strong>：剧本大多分幕式呈现给玩家，一般不会在第一幕就知道自己的身份，任务也可能存在阶段性。剧情固定，流程固定。</li></ul><h2 id="Fourth-Part-步骤"><a href="#Fourth-Part-步骤" class="headerlink" title="Fourth Part 步骤"></a>Fourth Part 步骤</h2><h3 id="1-游戏前"><a href="#1-游戏前" class="headerlink" title="1.游戏前"></a>1.游戏前</h3><p>找合适的队友（建议找自己熟悉的）-&gt;关注一些剧本测评-&gt;找到适合自己的剧本</p><h3 id="2-游戏中"><a href="#2-游戏中" class="headerlink" title="2.游戏中"></a>2.游戏中</h3><ul><li><p><strong>拿到剧本时，先看你的角色任务！</strong>在剧本的中间部分或结束部分，每个角色都会有自己要完成的任务。带着任务读本，可以帮助你代入角色、高效读本、理清头绪。</p></li><li><p><strong>认真阅读剧本，注意每一个时间线或具体细节</strong>。注意安排好自己的读本速度，剧本阅读时长并没有具体的要求，这个要看剧本本身的体量。</p></li><li><p><strong>别暴漏身份！</strong>通过读本先熟悉角色身份与人物关系，无论你的角色是什么，在游戏开始前一定要<strong>守口如瓶</strong>！随着游戏的进度，其他玩家会在公聊或私聊以及搜证时逐步了解各自的信息。提前暴漏，对自己、对其他玩家而言都<strong>是极为不尊重</strong>的行为。<strong>请记住，我们每个人玩本是为了体验一种不同的人生经历。</strong></p></li><li><p><strong>你手中的剧本一定不要让其他人看！</strong>从某种意义上说，你手中的本就是你的“大脑”。特别是在公聊或私聊时，尽量不要说：“我的本上写的什么什么”，<em>玩家在口述时一定要换成“我的记忆里是这样的…”或者“我的回忆中是怎样的…”</em></p></li><li><p><strong>剧本杀游戏一般都会涉及到搜证环节、公聊或私聊环节。</strong>玩家到时候按照主持人（DM）的要求进行即可。玩家需要认真看线索卡，<strong>做好笔记</strong>，避免遗忘，也不要遗漏任何一个细节。</p><ul><li><p>介绍环节，进行自我介绍，让大家互相了解身份，要学会从这个人物的性格和价值观去思考和行动（从现在开始，我就是他，他就是我）。<strong>切记不要拿着自己的剧本去读</strong>，例如【我剧本就是这么写的】、【我剧本上没有说明……】、【我扮演的角色就是……】，类如这样的话千万不要说，这样会严重影响游戏体验，最好能将剧本<strong>口语化</strong>的表达，可以类似于【我的回忆里是这样的…….】</p></li><li><p>公聊，在公聊（圆桌）过程中尽量减少对自己不利的话题。<strong>谎言是必不可少的，但一定要能圆的回来</strong>。感觉在教我们如何面不改色的撒谎。</p></li><li><p>私聊，私聊中请注意，保护自己的秘密的同时，也要去<strong>套出</strong>自己想要知道的事情。私聊中博取信任也是一份非常高深的学问</p></li><li><p>搜证</p></li><li><p>结案，注意细节</p></li></ul></li></ul><ul><li><strong>指证凶手。玩家在剧本杀游戏设定中，避免不了一个环节就是，在游戏的最后投出你认为哪名玩家才是本场游戏的杀人凶手。（根据主持人【DM】的提醒进行即可）</strong></li></ul><h3 id="3-游戏后"><a href="#3-游戏后" class="headerlink" title="3.游戏后"></a>3.游戏后</h3><p>游戏结束后，<strong>DM（主持人）会对剧本进行复盘</strong>。</p><p>玩家也可以将玩本中不清楚的事情向DM提问，由DM进行解答。</p><h2 id="Fifth-Part-具体环节分析"><a href="#Fifth-Part-具体环节分析" class="headerlink" title="Fifth Part 具体环节分析"></a>Fifth Part 具体环节分析</h2><h3 id="1-如何自我介绍"><a href="#1-如何自我介绍" class="headerlink" title="1.如何自我介绍"></a>1.如何自我介绍</h3><p>太复杂，容易吸引火力，被爆锤。</p><p>太简单，没意思</p><p>一般包含（<strong>名字，年龄，身份，职业，人物关系，目的</strong>）</p><p><strong>对于特定的人物身份、人物关系、人物出现的目的等内容是否需要隐藏或编造，一定要根据你的剧本任务来定。</strong></p><h3 id="2-如何私聊"><a href="#2-如何私聊" class="headerlink" title="2.如何私聊"></a>2.如何私聊</h3><p><strong>是在剧本游戏机制允许的条件下展开讨论的。</strong>那些不允许私聊的剧本游戏就另当别论吧。</p><p>私聊开始之前，玩家们一般都会经历“<strong>第一轮搜证</strong>”与“<strong>第一轮公聊</strong>”。</p><p>玩家为了打消心中的疑虑，需要进一步确认或作出某种行为，就需要<strong>借助私聊进行试探</strong></p><ul><li><p>对于非凶手玩家：</p><p>主要目的：确定真凶；次要目的：完成支线任务，以实际为准</p><p>手段：采用<strong>封闭式</strong>和<strong>开放式</strong>相结合的问题来问其他玩家，以进行比对并确认时间线上的细节，并多询问几名玩家以判断信息的真实性</p><p><strong>封闭式问题有哪些呢</strong>？该类问题答案都<strong>设限</strong>。例如：</p><p>TA抢走了你的未婚妻，你是不是特别恨TA？（要么“是”，要么“不是”）</p><p>在晚上8:00之前，你有没有听到什么声音？（要么“有”，要么“没有”）</p><p>衣服、匕首、毒药，哪一个是你的？（三选一）</p><p><strong>开放式问题有哪些呢？</strong>顾名思义，该类问题比较开放。如：</p><p>在案发之前你在做些什么？</p><p>（如果该玩家想杀人，你就可以问TA）你计划怎么杀人？</p></li></ul><ul><li><p>对于凶手玩家：</p><p>目的：（按我的理解就是混淆是非，干扰判断，博取信任）</p><ul><li>隐藏自己杀人的事实以及时间线上作案的相关事情。</li><li>干扰其他玩家的推凶逻辑，解除其他玩家对你的怀疑</li><li>建立玩家对你的信任，并引导其对其他玩家产生怀疑</li></ul><p>手段：</p><ul><li>积极主动找人私聊（有种我作为凶手我不心虚的感觉，显得我很想找出真凶）</li><li>撒谎之前有一个大前提，就是你的言行需要：符合大家“<strong>已知的”故事时间线和“未知的”证据</strong>）</li><li>假如别人被质疑，可以帮别人解围来获取信任（这招感觉好像得适当点，要不然容易引火上身）</li></ul></li></ul><h3 id="3-如何搜证"><a href="#3-如何搜证" class="headerlink" title="3.如何搜证"></a>3.如何搜证</h3><h2 id="Sixth-Part-实操感受"><a href="#Sixth-Part-实操感受" class="headerlink" title="Sixth Part 实操感受"></a>Sixth Part 实操感受</h2><p>有了再来补充</p><hr><p>2.23剧本杀《北国之春》</p><p>“灾难面前人人都是受害者”</p><p>我，康斯坦丁，为了革命事业奉献一切，到头来谎言罢了。</p><p>作为凶手如何隐藏自己？</p><p>我觉得有两种方法，一种是把思路理的很清楚，能够在多个人的确认下有不在场证明；一种是少说话，做出好奇宝宝的样子，然后在局势变得迷茫的情况下给一点线索，显示自己也在很认真的寻找真凶，并且在别人发言时能够甩锅就甩锅，毕竟说得越多错的越多。</p><p>First Part 参考文章    <a href="https://zhuanlan.zhihu.com/p/265459305">https://zhuanlan.zhihu.com/p/265459305</a></p><p>Second Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/266171750">https://zhuanlan.zhihu.com/p/266171750</a></p><p>Third Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/269180411">https://zhuanlan.zhihu.com/p/269180411</a></p><p>Fourth Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/267068326">https://zhuanlan.zhihu.com/p/267068326</a></p><p>​                                        <a href="https://zhuanlan.zhihu.com/p/83883004">https://zhuanlan.zhihu.com/p/83883004</a></p><p>Fifth Part 参考文章：<a href="https://zhuanlan.zhihu.com/p/299130233">https://zhuanlan.zhihu.com/p/299130233</a></p><p>​                                    <a href="https://zhuanlan.zhihu.com/p/271955890">https://zhuanlan.zhihu.com/p/271955890</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天小周同学要去玩剧本杀，and我被无情嫌弃了Ծ‸Ծ&lt;/p&gt;
&lt;p&gt;这里做一点笔上功夫&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>春节见闻</title>
    <link href="http://example.com/2021/02/14/%E6%98%A5%E8%8A%82%E8%A7%81%E9%97%BB/"/>
    <id>http://example.com/2021/02/14/%E6%98%A5%E8%8A%82%E8%A7%81%E9%97%BB/</id>
    <published>2021-02-14T07:50:51.000Z</published>
    <updated>2021-02-15T07:43:46.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><a id="more"></a><p>交流，以为大家过得很好，其实大家都很普通。</p><p>关于学习方面：多与精英交流，大局观，能侃，系统层级分析，不要过分注重眼前利益。</p><p>提高自己各方面素养（很多方面）。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>论一种思维方式</title>
    <link href="http://example.com/2021/02/06/%E8%AE%BA%E4%B8%80%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/02/06/%E8%AE%BA%E4%B8%80%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/</id>
    <published>2021-02-06T06:29:46.000Z</published>
    <updated>2021-02-10T03:45:35.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>别说为啥没写java的文章了，休息了几天并且有其他事要做，休整好了立马写</p><p>今天要说的是一种思维方式，想摆脱却做不到，我猜可能每个人都有。</p></blockquote><a id="more"></a><h2 id="自我设障"><a href="#自我设障" class="headerlink" title="自我设障"></a>自我设障</h2><h3 id="自我设障的含义和表现"><a href="#自我设障的含义和表现" class="headerlink" title="自我设障的含义和表现"></a>自我设障的含义和表现</h3><p>自我设障（self-handicapping）：为了避免失败带来的负面影响，提前给自己设置障碍。</p><p>1.行为上：个体通过“做点什么破坏性的事情”或是“什么都不做”来阻碍成功结果的出现。</p><p>拖延就是一种最常见的形式。比如用ddl来作为最大生产力驱动自己（你再骂），这样，我们便有理由有安慰自己：你看，这篇论文是因为没有时间草草完成的哦，如果我早点开始做，那结果可能就不一样了。一边怒骂自己不断生产着学术垃圾，一遍干着同样的事。</p><p>还有以下几种典型表现：</p><ul><li><p>临考前摸鱼</p><blockquote><p>“哎呀，只是昨晚通宵打游戏了，没睡好，所以考试没考好的”</p><p>“要不是我昨晚去干其他事情去了，没咋复习”</p></blockquote></li><li><p>故意设置过高的目标或者安排过难的任务。</p><blockquote><p>“不成，这么难的任务，换谁都不行，耶稣来了都没用，我说的！”</p></blockquote></li><li><p>减少努力的程度</p><blockquote><p>“要是我认真，那这件事就是小case”</p></blockquote></li></ul><p>2.言语上：个体用难辨真伪的借口<strong>公开</strong>表示自己处于不利的竞争情境，（<strong>但并不一定减少实际的努力</strong>），失败时也容易博取他人的谅解。</p><p>比如人们常在考试前不经意的提及：</p><blockquote><p>“这几天感冒了/没睡好/精神不好/学习效率太低了”</p></blockquote><p>这种言语上的自我设障会给自己一种心理暗示，而并不一定是真的存在，也许自己并不一定真的是因为没睡好，也不一定是精神状态不好，但多次的公开表示在一定程度上就将其转变成了现实。</p><p>是我们自我保护的一种典型方法，在失败后我们有理由相信别人会谅解我们的失败</p><p>万一成功，自我概念得到提升，“我不复习都那么厉害”，在一定程度上也能增强自信心，也为以后的下次失败埋下了伏笔。</p><h3 id="自我设障的原因"><a href="#自我设障的原因" class="headerlink" title="自我设障的原因"></a>自我设障的原因</h3><p>从外部和内部两个方面来解释：一是印象管理（维护自我形象），二是保护自尊（相信自己有能力）</p><p>1.印象管理</p><p>一个很现实的原因：一旦我们失败了，别人会知道，别人会觉得我无能？看不起我？</p><p>那么，我们需要维护颜面，给别人留下好的印象。</p><p>自我设障能帮助我们更好的做到印象管理。这样，我们在失败后，别人会觉得：哦，并不是他自己的问题，而是他遇到了种种困难，运气不好罢了，不涉及到能力等种种自身因素。而别人不知道的是，这种“困难”是我们自己设下的。</p><p>2.保护自尊</p><p>别人的看法仅仅是部分的原因，更重要的原因在于，如果我们拼尽全力，结果却仍不如人意，就意味着我们揭开了自己的伪装，不得不面对“能力不足”这个残忍的现实了。</p><p>所以，我们才有了这么多的借口。我们不会认为这是自身的不足，而将其归结为种种外部因素。</p><p>人们常常宁愿因为懒惰而失败而不愿因为愚笨而失败<strong>。“我成绩差是因为我没努力”是不是比“成绩差是因为我笨”听起来舒服太多了。</strong></p><p>岔个题，不过可笑的是，往往人们会在若干年后认识到自己的平庸</p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>讲讲我自己的看法，行为上的自我设障是我们需要去克服的，言语上的自我设障并不一定是真的没努力，也有可能是烟幕弹罢了。</p><p>需要控制情绪，当双方都无法去</p><p>参考文章：</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;别说为啥没写java的文章了，休息了几天并且有其他事要做，休整好了立马写&lt;/p&gt;
&lt;p&gt;今天要说的是一种思维方式，想摆脱却做不到，我猜可能每个人都有。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>华尔街韭菜</title>
    <link href="http://example.com/2021/02/02/%E5%8D%8E%E5%B0%94%E8%A1%97%E9%9F%AD%E8%8F%9C/"/>
    <id>http://example.com/2021/02/02/%E5%8D%8E%E5%B0%94%E8%A1%97%E9%9F%AD%E8%8F%9C/</id>
    <published>2021-02-02T12:01:55.000Z</published>
    <updated>2021-02-16T06:50:09.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>b站视频</p></blockquote><a id="more"></a><p>电影：华尔街之狼</p><p>做空</p><p>做多</p><p>爆仓</p><p>券商：帮你买卖股票的中介</p><p>机构</p><p>杠杆：</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;b站视频&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>艺术品拍卖市场乱象</title>
    <link href="http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/"/>
    <id>http://example.com/2021/01/30/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/</id>
    <published>2021-01-30T02:14:27.000Z</published>
    <updated>2021-01-30T03:50:20.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结</p></blockquote><a id="more"></a><p>疫情期间拍卖行业创下新纪录</p><p>著名拍卖行：<br>苏富比、佳士得、保利、</p><p>托、洗钱、黑幕、雅贿</p><p>拍卖行的商业模式：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102420569.png" alt="image-20210130102420569"></p><p>中介、赚取佣金、收取佣金比例</p><p>规则：价格与比例成反比</p><p><strong>拍卖行流程</strong>：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130102735852.png" alt="image-20210130102735852"></p><blockquote><p>吊灯叫价：当气氛还没有热烈起来的时候，拍卖师会指着拍卖大厅的吊灯说，这位先生加价了，以此来调动买家们的情绪，活跃气氛。</p><p>人肉吊灯：俗称托。</p></blockquote><p>拍卖行常用宣传造价的方式来提高拍卖品的身价，例如：</p><p>故意编造一个可歌可泣集战乱、革命、家国之恨等传奇要素于一身的文物</p><p>遗失国宝、媒体狂轰乱炸</p><p>双赢：拍卖行、卖家。</p><p>拍卖行活跃市场氛围、自己买下自己拍卖的藏品</p><p>一种新的玩法，实现买家、卖家、拍卖行三赢的局面</p><p>流程如下：</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130103705089.png" alt="image-20210130103705089"></p><p>艺术家委托朋友将其作品高价拍走，提高自己的身价，私底下送给朋友自己其他的作品，这样朋友拿着升值了的作品再卖出，同时拍卖行再从中收取佣金，牵桥搭线，实现三赢的局面。</p><hr><p>养一个人，炒作出一个画家。</p><p>炒作集团与画家签订协议，提前买断画家接下来几年的画，买下来之后炒作集团开始炒作这批画，比如以每幅20万收购了30幅画，将其炒作成100万，只需卖出几幅画就能将成本收回。</p><p>问题：存在风险</p><p>即便存在媒体宣传和人肉吊灯，买家谁会冒着这么大的风险用100万买下这样一幅画呢</p><p>炒作集团的解决方法：如果出现没有买家买这幅画时，炒作集团会提前与拍卖行商量，派自己人将这幅画买下来，但收取的佣金并不会以正常的佣金比例收取。</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130105703545.png" alt="image-20210130105703545"></p><p>如今这种规则大家都心照不宣。</p><p>艺术市场的频频造神现象就有点道理了</p><hr><p>洗钱，简单来说就是将非法得来的钱用某种方式合法化</p><p>地下钱庄、手续费3-5</p><p>跨国钱庄10-20，数额较大时</p><p>如今风险越来越大</p><p>艺术品洗钱</p><p>风险小、手续费低</p><p>一个例子：<br>A——洗钱者</p><p>B——洗钱组织</p><p>A需要提前1、2年养成收藏艺术品的爱好（），并低价购入一批艺术品。</p><p>到时机成熟了，A让B提供一个价值2000W的艺术品，并用3个亿拍下。</p><p>接着B再去各地买下A提前购入的那批低价艺术品，这样，钱又都回到了A的手里</p><p>并且，分析A和B此时的状态</p><p>A：成功洗钱、用高价买下的艺术品可以被宣传成有良心的好企业家用高价买下流离失所的文物，赢得一个好名头。此外，把买下来的文物建一个民间博物馆作为一个幌子，让以后的文物交易有正规渠道，做得好还能获取国家补贴</p><p>B:从中赚取手续费、从A获取的艺术品可以再拍卖出去</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130110740738.png" alt="image-20210130110740738"></p><hr><p>艺术品质押投资</p><p><img src="/images/%E8%89%BA%E6%9C%AF%E5%93%81%E6%8B%8D%E5%8D%96%E5%B8%82%E5%9C%BA%E4%B9%B1%E8%B1%A1/image-20210130112553255.png" alt="image-20210130112553255"></p><p>一个例子：</p><p>企业将自己的一件价值200w的艺术品以自己的另一个公司主体用3000w买下，拿到这个艺术品之后，在拍卖行的证明下用艺术品作为担保质押出1500w，假如有10件这样的艺术品，就能质押出1.5亿，由于买和卖两家公司都是自己的，就硬托，或者直接不支付赔几十万给拍卖行完事。接着拿着这些质押出来的资金用来炒高其他艺术品，只要炒作铮的钱足以支付手续费和利息，就能以钱生钱。</p><p>风险：</p><p>当泡沫破碎之后。。</p><p>蛋壳公寓。</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1yi4y1c7Cn">https://www.bilibili.com/video/BV1yi4y1c7Cn</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文为观看冲浪普拉斯公众号一篇关于艺术品拍卖乱象视频的总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>spring基于注解的ioc</title>
    <link href="http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/"/>
    <id>http://example.com/2021/01/24/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84ioc/</id>
    <published>2021-01-24T00:22:10.000Z</published>
    <updated>2021-01-24T01:57:44.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring用注解实现ioc</p></blockquote><a id="more"></a><p><strong>注意</strong>：直接打开别人的spring工程时，因为原工程是保留别人电脑的maven路径，需要改到自己的maven路径。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>使用注解之前的必要操作：</p><p>在bean.xml中更换约束（与用xml方式的不同），约束如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为</span></span><br><span class="line"><span class="comment">    context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- base-package 是说明这个包下面可能用到注解的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>曾经XML的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>  <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> | <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别从以下四个方面来解释</p><p>1.用于创建对象的</p><p>2.用于注入数据的</p><p>3.用于改变作用范围的</p><p>4.和生命周期相关的</p><h3 id="用于创建对象的"><a href="#用于创建对象的" class="headerlink" title="用于创建对象的"></a>用于创建对象的</h3><p><code>@Component:</code></p><p>作用：用于把当前类对象存入spring容器中。</p><p>相当于xml配置中的<code>&lt;bean id = &quot;&quot; class = &quot;&quot;&gt;</code></p><p>属性：<strong>value</strong>：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p><p>同样用于创建对象的：</p><p><code>@Controller</code>：一般用在表现层</p><p><code>@Service</code>：一般用在业务层</p><p><code>@Repository</code>：一般用在持久层</p><p>以上三个注解他们的作用和属性与Component是一模一样，这样做有什么好处呢？</p><p>是spring框架为我们提供明确的三层使用的注解，可以使我们的三层对象更加清晰。</p><h3 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring用注解实现ioc&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>人与人的悲欢是不相同的</title>
    <link href="http://example.com/2021/01/22/%E4%BA%BA%E4%B8%8E%E4%BA%BA%E7%9A%84%E6%82%B2%E6%AC%A2%E6%98%AF%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84/"/>
    <id>http://example.com/2021/01/22/%E4%BA%BA%E4%B8%8E%E4%BA%BA%E7%9A%84%E6%82%B2%E6%AC%A2%E6%98%AF%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84/</id>
    <published>2021-01-22T13:56:29.000Z</published>
    <updated>2021-01-29T12:30:18.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>权当划水</p></blockquote><a id="more"></a><p>人与人的悲欢是不相同的，这边娱乐圈的大瓜一波接着一波，那边b站up主墨茶以一种近乎卑微的方式死去。</p><p>就不说别人，我自己的情绪在一天中被新闻媒体的各种消息牵着鼻子走，被生活中的琐事所影响（好吧，这就是我今天划水的原因了）。</p><p>大明星的瓜我只是会心一笑，小人物之死却让我灵魂震颤。</p><p>看完那位up主的动态，直接给我整破防了。</p><p>不知道为什么变得有点多愁善感。</p><p>可能是年龄大了。</p><p>我尝试用科学的理论去探究这个原因。</p><p>却发现并不是什么事情都能用完美的科学理论来解释的。</p><p>扯远了又聊到了人类的进化过程。</p><p>往近了聊就是各种资本化的过程。</p><p>又在乱七八糟的尝试写点什么东西。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;权当划水&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="想法" scheme="http://example.com/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>java 反射</title>
    <link href="http://example.com/2021/01/21/java-%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2021/01/21/java-%E5%8F%8D%E5%B0%84/</id>
    <published>2021-01-21T12:50:55.000Z</published>
    <updated>2021-01-21T12:52:47.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在jdbc和spring框架中有用到反射，记录一下反射的用法</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在jdbc和spring框架中有用到反射，记录一下反射的用法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>spring概述和基于xml的IOC配置</title>
    <link href="http://example.com/2021/01/20/spring%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E4%BA%8Exml%E7%9A%84IOC%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/01/20/spring%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E4%BA%8Exml%E7%9A%84IOC%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-20T01:22:17.000Z</published>
    <updated>2021-01-21T12:48:55.884Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring的简要概述和用xml配置spring的细节</p></blockquote><a id="more"></a><h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><h3 id="spring是什么"><a href="#spring是什么" class="headerlink" title="spring是什么"></a>spring是什么</h3><p>Spring是分层的 Java SE/EE应用full- stack轻量级开源框架，以<code>IoC</code>(Inversion of Control:反转控制）和<code>AOP</code>( Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 <code>Spring MVC</code>和持久层 <code>Spring JDBC</code>以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE企业应用开源框架</p><h3 id="spring开发优势"><a href="#spring开发优势" class="headerlink" title="spring开发优势"></a>spring开发优势</h3><ul><li><strong>方便解耦，简化开发</strong> 通过 Spring提供的<code>IoC</code>容器，可以将对象间的依赖关系交由 Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li><li><strong>AOP编程的支持</strong> 通过 Spring的<code>AOP</code>功能，方便进行面向切面的编程，许多不容易用传统<code>OOP</code>实现的功能可以通过<code>AOP</code>轻松实现。<strong>声明式事务的支持</strong> 可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</li><li><strong>方便程序的测试</strong> 可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</li><li><strong>方便集成各种优秀框架</strong> Spring可以降低各种框架的使用难度，提供了对各种优秀框架（ <code>Struts</code>、<code>Hibernate</code>、<code>Hessian</code>、 <code>Quartz</code> 等）的直接支持。</li><li><strong>降低 JAVAEE API的使用难度</strong> Spring对 javsEE API（如<code>JDBC</code>、 <code>JavaMail</code>、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</li><li><strong>Java源码是经典学习范例</strong> Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诸。它的源代码是Java技术的最佳实践的范例。</li></ul><h3 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h3><img src="../images/spring%E6%A1%86%E6%9E%B6/sadsa.png" alt="spring结构体系" style="zoom: 67%;" /><h2 id="程序的耦合与解耦"><a href="#程序的耦合与解耦" class="headerlink" title="程序的耦合与解耦"></a>程序的耦合与解耦</h2><h3 id="什么是程序的耦合"><a href="#什么是程序的耦合" class="headerlink" title="什么是程序的耦合"></a>什么是程序的耦合</h3><p>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。</p><h3 id="如何解决耦合"><a href="#如何解决耦合" class="headerlink" title="如何解决耦合"></a>如何解决耦合</h3><p>使用工厂模式解耦</p><p>步骤：</p><ol><li>在配置文件中书写全限定类名（key = value）</li><li>通过读取配置文件获取全限定类名，通过反射创建对象</li><li>所有的对象创建均通过FactoryBean进行创建（可以通过单例模式每次只生成一个对象）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义properties类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Map，用于存放对象，可以称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取properties文件对象流</span></span><br><span class="line">            InputStream inputStream = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(inputStream);</span><br><span class="line">            <span class="comment">// 实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">// 取出配置文件中的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">// 取出每个key值</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">// 根据key获取value值</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">// 反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">// 将key和value放到容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的name获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h3><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>IoC的作用：解决程序间的耦合（解除代码中的依赖关系）</p><blockquote><p>spring的核心容器相当于一个<code>Map</code>，存放了IoC管理的对象</p></blockquote><h2 id="使用spring解决耦合问题"><a href="#使用spring解决耦合问题" class="headerlink" title="使用spring解决耦合问题"></a>使用spring解决耦合问题</h2><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><strong>第一步</strong>：在pom.xml中配置依赖：</p><p>导入spring相关依赖和版本，在IDEA中配置好后将会自动导入相关的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：编写持久层（DAO）和业务层（Service）</p><p><strong>第三步</strong>：用maven创建项目后，在resource文件夹中新建bean.xml文件。内容包括：</p><ul><li>必要的依赖</li><li>自己写的<code>&lt;bean&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第四步</strong>：模拟一个表现层用来调用业务层和持久层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个表现层，用于调用业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.根据id获取service</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        IAccountDao adao = ac.getBean(<span class="string">&quot;accountDao&quot;</span>,IAccountDao.class);</span><br><span class="line"><span class="comment">//3.打印得到的bean对象</span></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(adao);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果如下</strong>：</p><p><img src="../images/spring%E6%A1%86%E6%9E%B6/image-20210121172457854.png"></p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext是spring提供的一个<strong>创建核心容器的接口</strong>，可以<strong>通过此接口可以创建IoC核心容器对象</strong>，并通过此对象进行IoC容器内对象的管理。</p><h4 id="ApplicationContext的三个常用实现类"><a href="#ApplicationContext的三个常用实现类" class="headerlink" title="ApplicationContext的三个常用实现类"></a>ApplicationContext的三个常用实现类</h4><ul><li>ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，<strong>要求配置文件必须在类路径下</strong>。不在的话，加载不了。(更常用)</li><li>FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限）</li><li>AnnotationConfigApplicationContext：它是用于<strong>读取注解创建容器</strong>的。</li></ul><p>用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line"><span class="comment">// 1.1 通过相对目录的方式获取核心容器对象</span></span><br><span class="line">   ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">   <span class="comment">// 1.2 通过绝对路径的方式获取核心容器对象</span></span><br><span class="line">   ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;E:\\workspace\\workspace_idea03\\demo-spring\\day02_03spring\\src\\main\\resources\\beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.根据id获取Bean对象（两种方法），可以传入class对象不再进行强转</span></span><br><span class="line">   AccountService as = (AccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">   AccountDao ad = ac.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);</span><br></pre></td></tr></table></figure><p><img src="../images/spring%E6%A1%86%E6%9E%B6/image-20210121174721430.png" alt="Application接口继承关系图"></p><blockquote><p>在IDEA中进入这个类，右键-&gt; Diagrams-&gt;show Diagrams 就可以看到这幅图，同时可以在工具栏中调出每个接口和类的构造器、方法、属性等</p></blockquote><ul><li>BeanFactory 和 ApplicationContext 的区别： 创建对象的时间点不一样。</li><li> ApplicationContext：只要一读取配置文件，默认情况下就会创建对象。 </li><li>BeanFactory：什么使用什么时候创建对象</li></ul><h3 id="spring中创建Bean的三种方式"><a href="#spring中创建Bean的三种方式" class="headerlink" title="spring中创建Bean的三种方式"></a>spring中创建Bean的三种方式</h3><p><strong>bean标签</strong></p><p><strong>作用</strong>： 用于配置对象让 spring 来创建的。 默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</p><p> <strong>属性</strong>： </p><p>id：给对象在容器中提供一个唯一标识。用于获取对象。 </p><p>class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。 </p><p>scope：指定对象的作用范围。</p><ul><li>singleton :默认值，单例的. </li><li>prototype :多例的. </li><li>request :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 request 域中. </li><li>session :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 session 域中. </li><li>global session :WEB 项目中,应用在 Portlet 环境.如果没有 Portlet 环境那么 globalSession 相当于 session. </li></ul><p>init-method：指定类中的初始化方法名称。 </p><p>destroy-method：指定类中销毁方法名称。</p><p><strong>三种方式</strong>：</p><ul><li><p>第一种方式：使用默认无参构造函数创建。</p><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认无参构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><p>下面的代码就是用了默认的无参构造函数。</p><p>相当于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面的代码相当于<code>AccountServiceImpl as = new AccountServiceImpl();</code>调用的是无参的构造函数。</p><ul><li><p>第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><ul><li>指定工厂对象id和全路径名</li><li>指定要创建的对象、工厂对象、工厂对象方法</li></ul><p>此种方式是： 先把工厂的创建交给 spring 来管理。 然后在使用工厂的 bean 来调用里面的方法</p><p>​     factory-bean 属性：用于指定实例工厂 bean 的 id。 </p><p>​    factory-method 属性：用于指定实例工厂中创建对象的方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span>  <span class="attr">factory-bean</span>=<span class="string">&quot;instancFactory&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">factory-method</span>=<span class="string">&quot;createAccountService&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</p><ul><li>直接通过静态工厂方法获取对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class ：全类名 </span></span><br><span class="line"><span class="comment">  factory-method：要调用的方法</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="spring依赖注入"><a href="#spring依赖注入" class="headerlink" title="spring依赖注入"></a>spring依赖注入</h3><p>依赖注入：Dependency Injection。它是 spring 框架核心 ioc 的具体实现。 </p><p>我们的程序在编写时，通过控制反转，把对象的创建交给了 spring，但是代码中不可能出现没有依赖的情况。 ioc 解耦只是降低他们的依赖关系，但不会消除。</p><p>例如：我们的业务层仍会调用持久层的方法。 那这种业务层和持久层的依赖关系，在使用 spring 之后，就让 spring 来维护了。 简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p><ul><li>能注入的数据：有三类<ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul></li><li>注入的方式：有三种<ul><li>第一种：使用构造函数提供</li><li>第二种：使用set方法提供</li><li>第三种：使用注解提供</li></ul></li></ul><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>顾名思义，就是使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让 spring 框架来为我们注入。</p><p>使用构造函数的方式，给 service 中的属性传值<br>要求：<br>类中需要提供一个对应参数列表的构造函数。<br><strong>涉及的标签</strong>：<code>&lt;constructor-arg&gt;</code><br><strong>属性</strong>：</p><ul><li>index:指定参数在构造函数参数列表的索引位置</li><li>type:指定参数在构造函数中的数据类型</li><li>name:指定参数在构造函数中的名称 用这个找给谁赋值<br>— 上面三个都是找给谁赋值，下面两个指的是赋什么值的—</li><li>value:它能赋的值是基本数据类型和 String 类型</li><li>ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>顾名思义，就是在类中提供需要注入成员的 set 方法。具体代码如下：</p><p><strong>设计的标签</strong>：<code>&lt;property&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h4><p>顾名思义，就是给类中的集合成员传值，它用的也是<strong>set方法</strong>注入的方式，只不过变量的<strong>数据类型都是集合</strong>。 我们这里介绍注入数组，List,Set,Map,Properties。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给数组注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 list 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 set 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 Map 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 注入 properties 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring的简要概述和用xml配置spring的细节&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java 内部类</title>
    <link href="http://example.com/2021/01/19/java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://example.com/2021/01/19/java-%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-01-19T03:14:31.000Z</published>
    <updated>2021-01-19T13:37:00.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java 内部类（nested class的一种）</p></blockquote><a id="more"></a><p>在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者 称为外部类</p><p>分类：</p><ul><li><p>成员内部类（static成员内部类和非static成员内部类） </p></li><li><p>局部内部类（没有修饰符）</p></li><li><p>匿名内部类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态成内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类（方法内）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类（代码块内）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类（构造器内）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.<strong>成员内部类</strong></p><ul><li>一方面，作为外部内的成员<ul><li>可以被static修饰（正常来说static是不可以修饰类的）</li><li>可以被四种权限修饰符修饰（public 、protected、default、private）。外部类一般是只能有一个与文件名同名的类被public修饰，其他类只能缺省，protected和private不能使用</li></ul></li></ul><ul><li>另一方面，作为一个类<ul><li>类中可以定义属性、方法、构造器</li><li>可以使用final，不使用final时可以被继承</li><li>可以被abstract修饰</li><li>静态成员内部类不可以调用外部类的非静态方法</li></ul></li></ul><ul><li>如何实例化成员内部类的对象（见下面Dog类和Bird类创建的例子）</li><li>如何在成员内部类中区分调用外部类的结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ceshi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Dog类的实例（Dog类是Person类的一个静态成员内部类）</span></span><br><span class="line">        Person.Dog dog = <span class="keyword">new</span> Person.Dog();</span><br><span class="line">        dog.show();</span><br><span class="line">        <span class="comment">//创建Bird类的实例（Bird类是Person类的一个非静态成员内部类）</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person.Bird bird = person.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">        bird.show();</span><br><span class="line"></span><br><span class="line">        bird.display(<span class="string">&quot;形参&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;Person成员name&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员内部类</span></span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am a dog&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;Bird成员name&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Person.<span class="keyword">this</span>.eat();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//区分内部调用和外部调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参name：&quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;Bird成员name：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类成员name：&quot;</span> + Person.<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p><img src="/images/java-%E5%86%85%E9%83%A8%E7%B1%BB/image-20210119204833281.png"></p><p>2.<strong>局部内部类</strong></p><p>3.<strong>匿名对象和匿名内部类</strong></p><p><strong>匿名对象：没有名字的对象。</strong></p><p><strong>非匿名对象：</strong></p><p>ClassName c=new ClassName();</p><p>c.run();</p><p><strong>匿名对象：</strong></p><p>new ClassName().run();</p><p><strong>注意事项</strong>：</p><p>1、当对象对方法仅进行一次调用的时候，就可以简化成匿名对象。</p><p>2、两个匿名对象不可能是同一个对象。</p><p>3、一般不给匿名对象赋予属性值，因为永远无法获取到。</p><p>4、运行一次，直接就被回收掉了，节省内存空间</p><p><strong>匿名对象的例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anony</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Anony().a=<span class="number">10</span>; <span class="comment">//只是给了匿名对象赋值，并不会改变类中的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过创建对象的方式去调用方法</span></span><br><span class="line">        Anony a=<span class="keyword">new</span> Anony();</span><br><span class="line">        a.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名创建对象并调用方法</span></span><br><span class="line">        <span class="keyword">new</span> Anony().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>：</p><p><img src="/images/java-%E5%86%85%E9%83%A8%E7%B1%BB/image-20210119212111332.png"></p><p><strong>匿名内部类</strong></p><p>匿名内部类会隐式的继承一个类或者实现一个接口。</p><p>或者说，<strong>匿名内部类是一个继承了该类或者实现了该接口的子类匿名对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Inner()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;实现了Inner接口&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java 内部类（nested class的一种）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://example.com/2021/01/17/JDBC/"/>
    <id>http://example.com/2021/01/17/JDBC/</id>
    <published>2021-01-17T04:06:21.000Z</published>
    <updated>2021-01-21T02:11:06.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</p></blockquote><a id="more"></a><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p><strong>通过加载配置文件的方式来获取连接</strong></p><p><strong>java代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1.加载配置文件</span></span><br><span class="line">    InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">    Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">    pros.load(is);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.读取配置信息</span></span><br><span class="line">    String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.加载驱动</span></span><br><span class="line">    Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    System.out.println(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jdbc.properties文件中代码</strong>（位于src目录下）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="使用PreparedStatement实现CRUD操作"><a href="#使用PreparedStatement实现CRUD操作" class="headerlink" title="使用PreparedStatement实现CRUD操作"></a>使用PreparedStatement实现CRUD操作</h2><h3 id="对数据库调用的方式"><a href="#对数据库调用的方式" class="headerlink" title="对数据库调用的方式"></a>对数据库调用的方式</h3><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/images/JDBC/%E8%B0%83%E7%94%A8%E5%88%86%E7%B1%BB.png"></p><h3 id="使用Statement操作数据表的弊端"><a href="#使用Statement操作数据表的弊端" class="headerlink" title="使用Statement操作数据表的弊端"></a>使用Statement操作数据表的弊端</h3><p>因为Statement存在字符串连接和sql注入的弊端，采用PreparedStatement</p><p><img src="/images/JDBC/%E6%B5%81%E7%A8%8B.png" alt="流程"></p><h3 id="自己编写一个JDBCUtils类"><a href="#自己编写一个JDBCUtils类" class="headerlink" title="自己编写一个JDBCUtils类"></a><strong>自己编写一个JDBCUtils类</strong></h3><p>实现获取数据库连接、关闭连接和Statement的操作、关闭资源操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取数据库的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭连接和Statement的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//关闭资源操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)</span><br><span class="line">                rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用PreparedStatement实现增、删、改操作"><a href="#使用PreparedStatement实现增、删、改操作" class="headerlink" title="使用PreparedStatement实现增、删、改操作"></a><strong>使用PreparedStatement实现增、删、改操作</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用PreparedStatement实现查询操作"><a href="#使用PreparedStatement实现查询操作" class="headerlink" title="使用PreparedStatement实现查询操作"></a>使用PreparedStatement实现查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">                <span class="comment">//通过反射获取类中属性名为columnLabel的属性</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                <span class="comment">//设置属性为可以访问的(防止私有的不能访问)</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//给这个类中该属性赋值</span></span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResultSet与ResultSetMetaData"><a href="#ResultSet与ResultSetMetaData" class="headerlink" title="ResultSet与ResultSetMetaData"></a>ResultSet与ResultSetMetaData</h3><p>在上面的查询的例子中用到了ResultSet和ResultSetMetaData来承载查询结果集</p><h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><ul><li>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个<strong>ResultSet 对象</strong></li><li>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的<strong>第一条记录的前面</strong>。</li></ul><ul><li>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，<strong>且指针下移</strong>。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</li></ul><blockquote><p>当获取一个迭代器（iterator）对象后，用iterator.hasNext()和iterator.next()来遍历迭代器元素</p><p>hasNext()：没有指针下移操作，只是判断是否存在下一个元素</p><p>next()：指针下移，返回该指针所指向的元素</p></blockquote><ul><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li></ul><p><strong>关于ResultSet中数据的获取过程如下所示：</strong></p><p><img src="/images/JDBC/%E7%A7%BB%E5%8A%A8%E6%96%B9%E5%BC%8F.png"></p><h4 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h4><ul><li>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</li><li>ResultSetMetaData meta = rs.getMetaData();<ul><li><strong>getColumnName</strong>(int column)：获取指定列的名称（数据库表中的列名）</li><li><strong>getColumnLabel</strong>(int column)：获取指定列的别名（数据库表中起的别名）</li><li><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </li><li><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。</li></ul></li></ul><p><strong>针对于表的字段名与类的属性名不相同的情况</strong>(getColumnName和getColumnLabel的区别)</p><p>比如说在数据库order表中，字段名是order_id,在类中定义的是orderId这个属性，在查询的时候</p><p>用 select order_id orderId from order where name = “pb”   ,这样别名和类名就相同了。</p><p>1.必须声明sql时，使用类的属性名来命名字段的别名<br>2·使用ResultSetMetaData时，需要使用getColumnLabel()来替换getColumnName()<br>获取列的别名。<br>说明：如果sql中没有给字段其别名，getColumnLabel()获取的就是列名</p><p><img src="/images/JDBC/%E5%BE%97%E5%88%B0%E7%BB%93%E6%9E%9C%E9%9B%86.png"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/images/JDBC/1555579816884.png"></p><h2 id="DAO及相关实现类"><a href="#DAO及相关实现类" class="headerlink" title="DAO及相关实现类"></a>DAO及相关实现类</h2><p>目录结构：<br>BaseDao  是一个增删改查的基本操作类</p><p>若要具体实现对某个类的操作。定义一个类的接口，再继承BaseDao类并实现这个接口。</p><p><img src="/images/JDBC/image-20210118094925782.png"></p><p>上图这三个构成了一个基本的操作单位。</p><p>BaseDao：基本操作类</p><p>UserDao：User类的接口</p><p>UserDaoImpl：User的具体实现方法</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>druid.properties中的配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">filters</span>=<span class="string">wall</span></span><br></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关</td></tr></tbody></table><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><h3 id="什么是Apache-DBUtils？"><a href="#什么是Apache-DBUtils？" class="headerlink" title="什么是Apache-DBUtils？"></a>什么是Apache-DBUtils？</h3><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，相当于把crud的各种操作写好封装了，我们在使用的时候只需要调用就好。</p><p><strong>常用API</strong>：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>org.apache.commons.dbutils.DbUtils</li></ul><p>打开官方文档，进入org.apache.commons.dbutils这个package下，可以看到相应的类和接口</p><p><img src="/images/JDBC/image-20210119095920806.png"></p><h3 id="DbUtils"><a href="#DbUtils" class="headerlink" title="DbUtils"></a>DbUtils</h3><ul><li><strong>DbUtils</strong> ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li></ul></li></ul><h3 id="QueryRunner"><a href="#QueryRunner" class="headerlink" title="QueryRunner"></a>QueryRunner</h3><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p><ul><li><strong>更新</strong>（包括插入、更新、删除操作）</li></ul><p><code>public int update(Connection conn, String sql, Object... params) throws SQLException:</code>用来执行一个更新（插入、更新或删除）操作。</p><ul><li><strong>查询</strong></li></ul><p><code>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException</code>：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</p><h3 id="ResultSetHandler接口及实现类"><a href="#ResultSetHandler接口及实现类" class="headerlink" title="ResultSetHandler接口及实现类"></a>ResultSetHandler接口及实现类</h3><p><strong>接口的主要实现类</strong>：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值</li></ul><h3 id="CRUD测试的例子"><a href="#CRUD测试的例子" class="headerlink" title="CRUD测试的例子"></a>CRUD测试的例子</h3><p><strong>操作中使用的数据库表</strong>：customers</p><p><img src="/images/JDBC/image-20210119101304811.png"></p><p><strong>使用的工具类</strong>：JdbcUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从Durid连接池中获取连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getDuridConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">    pro.load(DuridTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">    DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">    Connection conn = ds.getConnection();</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接和Statement的操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span></span>&#123;</span><br><span class="line">    DbUtils.closeQuietly(conn);</span><br><span class="line">    DbUtils.closeQuietly(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据库中每条记录作为一个javaBean</strong>（javaBean的理解？）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date birth)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;, birth=&quot;</span> + birth + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体操作如下：</strong></p><p>1.<strong>添加一条记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接，得到QueryRunner对象，设置sql语句</span></span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;insert into customers(name,email,birth) values (?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">//获取当前日期</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        java.util.Date currentTime = calendar.getTime();</span><br><span class="line">        <span class="comment">//返回修改记录的数量，并更新数据库</span></span><br><span class="line">        <span class="keyword">int</span> count = runner.update(conn,sql,<span class="string">&quot;pb&quot;</span>,<span class="string">&quot;pb@qq.com&quot;</span>,currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102201154.png"></p><p>2.<strong>更新记录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;update customers set email = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//将id为1的记录邮箱设置为110409@qq.com</span></span><br><span class="line">        <span class="keyword">int</span> count = queryRunner.update(conn,sql,<span class="string">&quot;110409@qq.com&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102436335.png"></p><p>3.<strong>删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        <span class="comment">//将name=pb的记录删除</span></span><br><span class="line">        String sql = <span class="string">&quot;delete from customers where name = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = queryRunner.update(conn,sql,<span class="string">&quot;pb&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：原来name为pb这条记录已经被删除掉</p><p><img src="/images/JDBC/image-20210119102602642.png" alt="image-20210119102602642"></p><p>4.<strong>查询操作</strong></p><p>4.1查询一条记录，以javaBean形式返回查询到的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询一条记录（BeanHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">        Customer customer = runner.query(conn, sql, handler, <span class="number">13</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119102922545.png"></p><p>4.2查询多条记录，将得到的多个customer对象放入List集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询多条记录（BeanListHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//用beanListHandler来作为返回的结果集</span></span><br><span class="line">        BeanListHandler&lt;Customer&gt; beanListHandler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">        <span class="comment">//将返回的结果放到列表中</span></span><br><span class="line">        List&lt;Customer&gt; list = queryRunner.query(conn,sql,beanListHandler,<span class="number">4</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//list 快速打印</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"><span class="comment">//        for(Customer customer : list)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(customer);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/JDBC/image-20210119103349982.png"></p><p>4.3用map形式保存返回的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询一条记录（MapHandler）</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        MapHandler handler = <span class="keyword">new</span> MapHandler();</span><br><span class="line">        Map map = runner.query(conn, sql, handler, <span class="number">13</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询多条记录(MapListHandler)</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select id,name,email,birth from Customers where id &lt; ?&quot;</span>;</span><br><span class="line">        MapListHandler mapListHandler = <span class="keyword">new</span> MapListHandler();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = queryRunner.query(conn,sql,mapListHandler,<span class="number">4</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：用map键值对形式保存</p><p><img src="/images/JDBC/image-20210119103538062.png"></p><p><img src="/images/JDBC/image-20210119103553227.png"></p><p>4.4查询数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询数量</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JdbcUtils.getDuridConnection();</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from customers where id &lt; ?&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        ScalarHandler scalarHandler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">        <span class="keyword">long</span> count= (<span class="keyword">long</span>) queryRunner.query(conn,sql,scalarHandler,<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.closeResource(conn,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义ResultSetHandler的实现类"><a href="#自定义ResultSetHandler的实现类" class="headerlink" title="自定义ResultSetHandler的实现类"></a>自定义ResultSetHandler的实现类</h3><p>下面这个类实现了beanHandler的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    Connection conn = JdbcUtils.getDuridConnection();</span><br><span class="line">    String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名内部类，内部重写了handle方法</span></span><br><span class="line">    ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String email = rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                Date birth = rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Customer customer = runner.query(conn, sql, handler, <span class="number">6</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">    JdbcUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点开beanHandler的源码，看一下也差不多，有就返回Bean对象，没有就返回null</p><p><img src="/images/JDBC/image-20210119110955996.png"></p><h2 id="JDBC的一般性操作"><a href="#JDBC的一般性操作" class="headerlink" title="JDBC的一般性操作"></a>JDBC的一般性操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接的操作（</span></span><br><span class="line">            <span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line">            <span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line">            <span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line">            <span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line">            <span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交数据</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//回滚数据</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//3.关闭连接等操作</span></span><br><span class="line">            <span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line">            <span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JDBC" scheme="http://example.com/categories/JDBC/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java web——Filter和Listener</title>
    <link href="http://example.com/2021/01/17/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/"/>
    <id>http://example.com/2021/01/17/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/</id>
    <published>2021-01-17T01:40:02.000Z</published>
    <updated>2021-01-17T04:03:20.337Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于javaweb中组件：过滤器和监听器</p></blockquote><a id="more"></a><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><h3 id="什么是Filter过滤器"><a href="#什么是Filter过滤器" class="headerlink" title="什么是Filter过滤器"></a>什么是Filter过滤器</h3><p>1、Filter 过滤器它是 JavaWeb 的三大组件之一。<strong>三大组件</strong>分别是：Servlet 程序、Listener 监听器、Filter 过滤器 </p><p>2、Filter 过滤器它是 JavaEE 的规范。也就是<strong>接口</strong></p><p>3、Filter 过滤器它的作用是：<strong>拦截请求</strong>，过滤响应。</p><p>拦截请求常见的应用场景有： </p><p>1、权限检查 </p><p>2、日记操作 </p><p>3、事务管理</p><p>……</p><h3 id="Filter的一个例子"><a href="#Filter的一个例子" class="headerlink" title="Filter的一个例子"></a>Filter的一个例子</h3><p><strong>要求</strong>：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必须是<strong>用户登录之后才允许访问</strong>。</p><p><strong>Filter过滤器的图示如下：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94filter%E5%92%8Clistener/image-20210117100553130.png"></p><p><strong>有权限-&gt;放行               无权限-&gt;不允许访问并跳转到其他页面</strong></p><p><strong>Filter 过滤器的使用步骤：</strong> </p><p>1、编写一个类去实现 Filter 接口 </p><p>2、实现过滤方法 doFilter() </p><p>3、到 web.xml 中去配置 Filter 的拦截路径</p><p><strong>主要代码如下：</strong>继承Filter接口，并重写doFilter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        Object user = session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果没有得到用户信息，请求转发到登录页面</span></span><br><span class="line"> servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 让程序继续往下访问用户的目标资源</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置web.xml代码</strong>：类似servlet程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!--配置Filter拦截--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>exercise.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截的路径是admin路径下的所有资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模拟一次登录操作"><a href="#模拟一次登录操作" class="headerlink" title="模拟一次登录操作"></a>模拟一次登录操作</h3><p>上面代码并没有给出一次具体的登录操作，知识获取session中看有没有user的相关信息</p><p><strong>新建一个LoginServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;pb&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,username);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>login.jsp页面</strong>：登录表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">这是登录页面。login.jsp 页面 &lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8123/15_Filter/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    密 码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94filter%E5%92%8Clistener/image-20210117105649624.png"></p><p><strong>流程如下</strong>：</p><p>进入login界面，输入用户名和密码。（正确的账号是pb，密码是123456）</p><ul><li>若账号密码错误，跳转到login.jsp页面（原页面），此时因为没有登陆成功，在AdminFilter中不能获取到user的信息，不能访问到资源，也会跳转到login.jsp</li><li>若密码正确，AdminFilter不会拦截，资源正常访问。</li></ul><h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>Filter 的生命周期包含几个方法：与servlet生命周期类似</p><p> 1、构造器方法 </p><p>2、init 初始化方法 第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建） </p><p>3、doFilter 过滤方法 第 3 步，每次拦截到请求，就会执行 </p><p>4、destroy 销毁 第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）</p><h3 id="FilterConfig-类"><a href="#FilterConfig-类" class="headerlink" title="FilterConfig 类"></a>FilterConfig 类</h3><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。 </p><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。 </p><p><strong>FilterConfig 类的作用是获取 filter 过滤器的配置内容</strong> </p><p>1、获取 Filter 的名称 filter-name 的内容 </p><p>2、获取在 Filter 中配置的 init-param 初始化参数</p><p>3、获取 ServletContext 对象</p><p><strong>AdminFilter类中代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);</span><br><span class="line"><span class="comment">// 1、获取 Filter 的名称 filter-name 的内容</span></span><br><span class="line">       System.out.println(<span class="string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());</span><br><span class="line"><span class="comment">// 2、获取在 web.xml 中配置的 init-param 初始化参数</span></span><br><span class="line">       System.out.println(<span class="string">&quot;初始化参数 username 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="comment">// 3、获取 ServletContext 对象</span></span><br><span class="line">       System.out.println(filterConfig.getServletContext());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml中配置信息</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter别名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter的全类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>exercise.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置filter初始化参数--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/image-20210117111434255.png"></p><h3 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h3><p>Filter 过滤器 </p><p>Chain 链，链条 </p><p>FilterChain 就是过滤器链（<strong>多个过滤器如何一起工作</strong>）</p><p><strong>执行流程如下图所示</strong>：</p><p><img src="/images/java-web%E2%80%94%E2%80%94Filter%E5%92%8CListener/image-20210117112914063.png"></p><p><strong>FilterChain.doFilter(）方法的作用：</strong></p><p>1.执行下一个Filter过滤器（如果有的话）</p><p>2.执行目标资源（如果没有）</p><p><strong>多个Filter过滤器的作用：</strong></p><p>1.所有Filter和目标资源默认都执行在同一个线程中</p><p>2.多个Filter共同执行的时候，他们都是共享一个Request对象</p><p><strong>多个Filter执行的顺序</strong>：</p><p>由它们在web.xml文件中从上到下的配置顺序决定的</p><h3 id="Filter拦截路径匹配"><a href="#Filter拦截路径匹配" class="headerlink" title="Filter拦截路径匹配"></a>Filter拦截路径匹配</h3><ul><li><p>精确匹配<br><code>&lt;url-pattern&gt;/target.jsp&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p></li><li><p>目录匹配<br><code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>* </p></li><li><p>后缀名匹配（不需要加反斜杆，否则会报错）<br><code>&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到<br><code>&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.do 结尾才会拦截到<br><code>&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</code><br>以上配置的路径，表示请求地址必须以.action 结尾才会拦截到</p></li></ul><p><strong>Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在</strong></p><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><h3 id="什么是listener监听器"><a href="#什么是listener监听器" class="headerlink" title="什么是listener监听器"></a>什么是listener监听器</h3><p>1、Listener监听器它是Javaweb的三大组件之一。Javaweb的三大组件分别是：Servlet程序、Filter过滤器、Listener监听器。<br>2、Listener它是JavaEE的规范，就是<strong>接口</strong>。<br>3、监听器的作用是，<strong>监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</strong></p><p>很多监听器都不怎么常用了，下面就讲一下ServletContextListener。</p><h3 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h3><ul><li><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。 </p></li><li><p>ServletContext 对象在 <strong>web 工程启动的时候创建，在 web 工程停止的时候销毁。</strong> </p></li><li><p>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p></li></ul><p><strong>示例如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListenerImpl</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 对象被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 对象被销毁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关于javaweb中组件：过滤器和监听器&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>鲁豫问答法</title>
    <link href="http://example.com/2021/01/15/%E9%B2%81%E8%B1%AB%E9%97%AE%E7%AD%94%E6%B3%95/"/>
    <id>http://example.com/2021/01/15/%E9%B2%81%E8%B1%AB%E9%97%AE%E7%AD%94%E6%B3%95/</id>
    <published>2021-01-15T07:56:38.000Z</published>
    <updated>2021-01-15T08:05:49.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>真的吗？我不信</p></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;真的吗？我不信&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>java web——Cookie和Session</title>
    <link href="http://example.com/2021/01/15/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/"/>
    <id>http://example.com/2021/01/15/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/</id>
    <published>2021-01-15T01:03:47.000Z</published>
    <updated>2021-01-16T15:26:50.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Cookie和Session的用法</p></blockquote><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie?"></a>什么是 Cookie?</h3><p>1、Cookie 翻译过来是饼干的意思。</p><p> 2、Cookie 是服务器通知客户端<strong>保存键值对</strong>的一种技术。 </p><p>3、客户端有了 Cookie 后，每次请求都发送给服务器。 </p><p>4、每个 Cookie 的大小不能超过 4kb</p><h3 id="如何创建-Cookie"><a href="#如何创建-Cookie" class="headerlink" title="如何创建 Cookie"></a>如何创建 Cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">   <span class="comment">//1.创建Cookie</span></span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">   <span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;Cookie 创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理如下图所示：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115094206419.png"></p><p>当客户端发现有set-Cookie这个响应头时，就创建或者修改Cookie。</p><p>下图通过查看检查-&gt;network查看。</p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115094542733.png"></p><h3 id="服务器如何获取-Cookie"><a href="#服务器如何获取-Cookie" class="headerlink" title="服务器如何获取 Cookie"></a>服务器如何获取 Cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">//服务器获取客户端的Cookie只需要req.getCookie();即可，返回Cookie数组</span></span><br><span class="line">   Cookie[] cookies = req.getCookies();</span><br><span class="line">   <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">      resp.getWriter().write(<span class="string">&quot;cookie名称：&quot;</span> + cookie.getName()+ <span class="string">&quot;,cookie值：&quot;</span> + cookie.getValue());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理如下：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115100137267.png"><br><strong>同样的，我们可以在network中看到这个请求头</strong><br><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115100258913.png"></p><h3 id="如何修改Cookie"><a href="#如何修改Cookie" class="headerlink" title="如何修改Cookie"></a>如何修改Cookie</h3><p><strong>方法一：</strong>与Cookie的创建是一致的，因为Cookie没有就创建，有就修改覆盖掉。</p><p>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象 </p><p>2、在构造器，同时赋于新的 Cookie 值。 </p><p>3、调用 response.addCookie( Cookie );</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">   req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">   resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;newValue1&quot;</span>);</span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;新的Cookie修改成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方案二：</strong> </p><p>1、先查找到需要修改的 Cookie 对象 </p><p>2、调用 setValue()方法赋于新的 Cookie 值。 </p><p>3、调用 response.addCookie()通知客户端保存修改</p><p>不在演示了。</p><h3 id="谷歌浏览器如何查看-Cookie："><a href="#谷歌浏览器如何查看-Cookie：" class="headerlink" title="谷歌浏览器如何查看 Cookie："></a>谷歌浏览器如何查看 Cookie：</h3><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210115101713248.png"></p><h3 id="Cookie-生命控制"><a href="#Cookie-生命控制" class="headerlink" title="Cookie 生命控制"></a>Cookie 生命控制</h3><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p><strong>主要方法</strong>：<code>setMaxAge()</code> </p><ul><li>正数，表示在指定的秒数后过期 </li><li>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） </li><li>零，表示马上删除 Cookie</li></ul><p>三种情况测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie的存活时长为3s</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setCookieThreeSecond</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;life3&quot;</span>, <span class="string">&quot;life3&quot;</span>);</span><br><span class="line">   cookie.setMaxAge(<span class="number">3</span>); <span class="comment">// 设置 Cookie 一小时之后被删除。无效</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">   resp.getWriter().write(<span class="string">&quot;已经创建了一个存活3s的 Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除名称为key1的cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   Cookie[] cookies = req.getCookies();</span><br><span class="line">   <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;key1&quot;</span>)) &#123;</span><br><span class="line">         cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">         resp.addCookie(cookie);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浏览器关闭后cookie被删除（默认情况的cookie属于这种情况）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">        IOException </span>&#123;</span><br><span class="line">   Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;defalutLife&quot;</span>, <span class="string">&quot;defaultLife&quot;</span>);</span><br><span class="line">   cookie.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置存活时间</span></span><br><span class="line">   resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie-有效路径-Path-的设置"><a href="#Cookie-有效路径-Path-的设置" class="headerlink" title="Cookie 有效路径 Path 的设置"></a>Cookie 有效路径 Path 的设置</h3><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。 </p><p>path 属性是通过请求的地址来进行有效的过滤。</p><p> CookieA path=/工程路径 </p><p>CookieB path=/工程路径/abc</p><p>请求地址如下：</p><p> <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a> </p><p>CookieA 发送 CookieB 不发送 </p><p><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a> </p><p>CookieA 发送 CookieB 发送</p><p><strong>简单来说：就是cookie满足path路径（在路径下），就能成功发送</strong></p><p><strong>用到的方法是</strong>：<strong>cookie.setPath(String url);</strong></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="什么是Session？"><a href="#什么是Session？" class="headerlink" title="什么是Session？"></a>什么是Session？</h3><p>1、每个客户端都有自己的一个 Session 会话。 </p><p>2、Session 会话中，我们经常用来保存用户登录之后的信息。</p><h3 id="Session的创建与获取"><a href="#Session的创建与获取" class="headerlink" title="Session的创建与获取"></a>Session的创建与获取</h3><p><strong>创建和获取</strong> <strong>Session</strong>。它们的 API 是一样的： <code>request.getSession()</code> ；</p><p>第一次调用是：创建 Session 会话 </p><p>之后调用都是：获取前面创建好的 Session 会话对象。</p><p>判断session到底是不是刚创建出来的：<code>session.isNew();</code></p><p><strong>每个会话都有一个身份证号</strong>。也就是 ID 值。而且这个 ID 是<strong>唯一的</strong>。 <code>session.getId();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();  </span><br><span class="line"><span class="keyword">boolean</span> isNew = session.isNew();</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;isNew的值时：&quot;</span> + isNew + <span class="string">&quot; &lt;br/&gt; &quot;</span> + <span class="string">&quot;id是: &quot;</span> + session.getId());</span><br></pre></td></tr></table></figure><h3 id="Session-域数据的存取"><a href="#Session-域数据的存取" class="headerlink" title="Session 域数据的存取"></a>Session 域数据的存取</h3><p>与cookie不同，session的值可以是Object类型的。</p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116220222545.png"></p><p><strong>session的存放</strong>：<code>req.getSession().setAttribute(String, Object);</code></p><p><strong>session的取出</strong>：<code>Object object = session.getAttribute(String);</code></p><h3 id="Session-生命周期控制"><a href="#Session-生命周期控制" class="headerlink" title="Session 生命周期控制"></a>Session 生命周期控制</h3><p><code>public void setMaxInactiveInterval(int interval)</code> 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。</p><ul><li><p>值为正数的时候，设定 Session 的超时时长。</p></li><li><p>负数表示永不超时（极少使用）</p></li></ul><p><code>public int getMaxInactiveInterval(</code>)获取 Session 的超时时间<br><code>public void invalidate()</code> 让当前 Session 会话马上超时无效。</p><p><strong>Session 默认的超时时间长为 30 分钟。</strong><br><strong>原因</strong>：在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session</p><p><strong>如下图所示：</strong></p><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116224453690.png"></p><p>当然，我们可以在每个servlet程序单独的web.xml文件中设置默认时间，如下设置该servlet时间为10分钟。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="session与浏览器之间的技术关联"><a href="#session与浏览器之间的技术关联" class="headerlink" title="session与浏览器之间的技术关联"></a>session与浏览器之间的技术关联</h3><p><img src="/images/java-web%E2%80%94%E2%80%94Cookie%E5%92%8CSession/image-20210116231504548.png"></p><h2 id="小结：Session与Cookie的区别与联系"><a href="#小结：Session与Cookie的区别与联系" class="headerlink" title="小结：Session与Cookie的区别与联系"></a>小结：Session与Cookie的区别与联系</h2><p>待续。。。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Cookie和Session的用法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java web——Servlet</title>
    <link href="http://example.com/2021/01/14/java-web-Servlet/"/>
    <id>http://example.com/2021/01/14/java-web-Servlet/</id>
    <published>2021-01-14T05:55:28.000Z</published>
    <updated>2021-01-14T14:48:00.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于Servlet</p></blockquote><a id="more"></a><h2 id="Servlet-技术"><a href="#Servlet-技术" class="headerlink" title="Servlet 技术"></a>Servlet 技术</h2><h3 id="什么是-Servlet"><a href="#什么是-Servlet" class="headerlink" title="什么是 Servlet"></a>什么是 Servlet</h3><p>1、Servlet 是 JavaEE 规范之一。规范就是<strong>接口</strong><br> 2、Servlet 就 JavaWeb <strong>三大组件之一</strong>。三大组件分别是：<strong>Servlet 程序</strong>、<strong>Filter 过滤器</strong>、<strong>Listener 监听器</strong>。<br> 3、Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端。</p><h3 id="手动实现-Servlet-程序"><a href="#手动实现-Servlet-程序" class="headerlink" title="手动实现 Servlet 程序"></a>手动实现 Servlet 程序</h3><p><strong>步骤</strong>：</p><p>1、编写一个类去实现 Servlet 接口 </p><p>2、实现 service 方法，处理请求，并响应数据 </p><p>3、到 web.xml 中去配置 servlet 程序的访问地址</p><p>我实现的时候，并没有自动导入相关的包，需要我们手动找到Tomcat的lib目录下把Servlet的jar包导入进去。</p><p><img src="/images/java-web-Servlet/image-20210114145911295.png"></p><p>我们导入这个jar包即可</p><p><img src="/images/java-web-Servlet/image-20210114150205821.png"></p><hr><p>第一步和第二步：在src目录下编写一个类去实现 Servlet 接口，重写service方法</p><p><strong>注：service 方法是专门用来处理请求和响应的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloServlet被访问了！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：到 web.xml 中去配置 servlet 程序的访问地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class 是 Servlet 程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>exercise.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern 标签配置访问地址 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">/ 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">/hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：配置好后运行Tomcat，只能有一个Tomcat在运行，否则会报错端口被占用。</p><p>运行成功后在浏览器中输入刚刚配置好的地址：<em>hello就是我们刚刚在<url-pattern>中配置的地址</em></p><p><img src="/images/java-web-Servlet/image-20210114151507915.png"></p><p>在IDEA中可以看到一下运行结果，说明运行成功</p><p><img src="/images/java-web-Servlet/image-20210114151656217.png"></p><h3 id="Servlet程序的访问过程"><a href="#Servlet程序的访问过程" class="headerlink" title="Servlet程序的访问过程"></a>Servlet程序的访问过程</h3><p>下面这张图很完整的诠释了资源的定位和访问过程，要记住</p><p><img src="/images/java-web-Servlet/image-20210114152254369.png" alt="记住这张图"></p><h3 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h3><p>1、执行 Servlet 构造器方法</p><p>2、执行 init 初始化方法 </p><p> <em>第一、二步，是在第一次访问，的时候创建 Servlet 程序会调用。</em> </p><p>3、执行 service 方法 </p><p><em>第三步，每次访问都会调用。</em> </p><p>4、执行 destroy 销毁方法 </p><p><em>第四步，在 web 工程停止的时候调用</em></p><h3 id="GET-和-POST-请求的分发处理"><a href="#GET-和-POST-请求的分发处理" class="headerlink" title="GET 和 POST 请求的分发处理"></a>GET 和 POST 请求的分发处理</h3><p>在service方法中获得请求的方式，请求的方式是get，就执行get方法的相关操作；请求的方式是post，就执行post的相关操作。</p><p>如何知道请求的方式呢？</p><p><img src="/images/java-web-Servlet/image-20210114154324992.png"></p><p>ServletRequest有一个子接口HttpServletRequest ，它有getMethod方法，可以获得请求的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * service 方法是专门用来处理请求和响应的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3 service === Hello Servlet 被访问了&quot;</span>);</span><br><span class="line"><span class="comment">// 类型转换（因为它有 getMethod()方法）</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="comment">// 获取请求的方式</span></span><br><span class="line">        String method = httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doGet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 get 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 post 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过继承-HttpServlet-实现-Servlet-程序"><a href="#通过继承-HttpServlet-实现-Servlet-程序" class="headerlink" title="通过继承 HttpServlet 实现 Servlet 程序"></a>通过继承 HttpServlet 实现 Servlet 程序</h3><p>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。 </p><p><strong>具体步骤</strong>：</p><p>1、编写一个类去继承 HttpServlet 类 </p><p>2、根据业务需要重写 doGet 或 doPost 方法 </p><p>3、到 web.xml 中的配置 Servlet 程序的访问地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doGet（）在 get 请求的时候调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 的 doGet 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doPost（）在 post 请求的时候调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 的 doPost 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet类的继承体系"><a href="#Servlet类的继承体系" class="headerlink" title="Servlet类的继承体系"></a>Servlet类的继承体系</h3><img src="/images/java-web-Servlet/image-20210114162308178.png" style="zoom: 80%;" /><h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><p>ServletConfig类是Servlet程序的配置信息</p><h3 id="ServletConfig类的三大作用"><a href="#ServletConfig类的三大作用" class="headerlink" title="ServletConfig类的三大作用"></a>ServletConfig类的三大作用</h3><p>1、可以获取 Servlet 程序的别名 servlet-name 的值 ：   配置文件中*<servlet-name>*中的值就是别名</p><p>2、获取初始化参数 init-param </p><p>3、获取 ServletContext 对象</p><p><strong>servlet中代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Servlet初始化方法&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;程序的别名是：&quot;</span> + servletConfig.getServletName());</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化参数username的值时：&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取ServletContext对象：&quot;</span> + servletConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml配置文件代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>exercise.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>pb<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在浏览器中访问servlet程序的运行结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114165553379.png"></p><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><h3 id="什么是-ServletContext？"><a href="#什么是-ServletContext？" class="headerlink" title="什么是 ServletContext？"></a>什么是 ServletContext？</h3><p>1、ServletContext 是一个<strong>接口</strong>，它表示 Servlet 上下文对象 </p><p>2、<strong>一个 web 工程，只有一个 ServletContext 对象实例</strong>。 </p><p>3、ServletContext 对象是一个<strong>域对象</strong>。</p><p> 4、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</p><p><strong>什么是域对象?</strong> </p><p>域对象，是可以像 Map 一样存取数据的对象，叫域对象。 </p><p>这里的域指的是存取数据的操作范围，整个 web 工程。 </p><p>​                        存数据                     取数据              删除数据</p><p> Map                 put()                         get()              remove() </p><p>域对象        setAttribute()         getAttribute()    removeAttribute();</p><h3 id="ServletContext-类的四个作用"><a href="#ServletContext-类的四个作用" class="headerlink" title="ServletContext 类的四个作用"></a>ServletContext 类的四个作用</h3><p>1、获取 web.xml 中配置的上下文参数 context-param </p><p>2、获取当前的工程路径，格式:  /工程路径 </p><p>3、获取工程部署后在服务器硬盘上的绝对路径 </p><p>4、像 Map 一样存取数据</p><p><strong>servlet代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取 web.xml 中配置的上下文参数 context-param</span></span><br><span class="line">        ServletContext context = getServletContext();  <span class="comment">//获取servletContext对象</span></span><br><span class="line">        System.out.println(context.getInitParameter(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(context.getInitParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">// 2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前工程路径：&quot;</span> + context.getContextPath());</span><br><span class="line">        <span class="comment">// 3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">         <span class="comment">//斜杠被服务器解析地址为:http://ip:port/工程名/ 映射到IDEA代码的web目录&lt;br/&gt;</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;工程部署的路径是:&quot;</span> + context.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件配置：</strong>（<servlet> 和 <servlet-mapping> 没有写出）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个 web 工程) ，每个web工程只有一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>pb<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114173623140.png"></p><hr><p><strong>第四个作用</strong>：ServletContext 像 Map 一样存取数据</p><p>下面两段代码都是继承了HttpServlet类，在doPost方法中。</p><p><strong>HelloServlet中代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;保存之前: Context1 获取 key1 的值是:&quot;</span>+ context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">context.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Context1 中获取域数据 key1 的值是:&quot;</span>+ context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>HelloServlet1中代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = getServletContext();</span><br><span class="line">    System.out.println(context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要验证第四点，<strong>ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</strong></p><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a><strong>Http协议</strong></h2><p>所谓 HTTP 协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议。</p><p> HTTP 协议中的数据又叫报文。</p><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p><strong>常用请求头的说明</strong></p><ul><li><p> Accept: 表示客户端可以接收的数据类型 </p></li><li><p>Accpet-Languege: 表示客户端可以接收的语言类型 </p></li><li><p>User-Agent: 表示客户端浏览器的信息</p></li><li><p> Host： 表示请求时的服务器 ip 和端口号</p></li></ul><p><strong>哪些是 GET 请求，哪些是 POST 请求</strong></p><p> GET 请求有哪些：</p><p> 1、form 标签 method=get</p><p> 2、a 标签 </p><p>3、link 标签引入 css </p><p>4、Script 标签引入 js 文件</p><p> 5、img 标签引入图片 </p><p>6、iframe 引入 html 页面 </p><p>7、在浏览器地址栏中输入地址后敲回车 POST 请求有哪些： </p><p>8、form 标签 method=post</p><p>POST 请求有哪些：</p><p> 8、form 标签 method=post</p><h3 id="常用的响应码说明"><a href="#常用的响应码说明" class="headerlink" title="常用的响应码说明"></a>常用的响应码说明</h3><p>200 表示请求成功 </p><p>302 表示请求重定向</p><p>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p><p>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h3 id="MIME-类型说明"><a href="#MIME-类型说明" class="headerlink" title="MIME 类型说明"></a>MIME 类型说明</h3><p>MIME 是 HTTP 协议中数据类型。</p><p> MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。</p><p>MIME 类型的格式是“大类型/小 类型”，并与某一种文件的扩展名相对应。</p><h2 id="HttpServletRequest-类"><a href="#HttpServletRequest-类" class="headerlink" title="HttpServletRequest 类"></a>HttpServletRequest 类</h2><p>我们可以通过 HttpServletRequest 对象，获取到所有请求的信息。 </p><h3 id="HttpServletRequest-类的常用方法"><a href="#HttpServletRequest-类的常用方法" class="headerlink" title="HttpServletRequest 类的常用方法"></a>HttpServletRequest 类的常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. getRequestURI() 获取请求的资源路径</span><br><span class="line"></span><br><span class="line">2. getRequestURL() 获取请求的统一资源定位符（绝对路径）</span><br><span class="line"></span><br><span class="line">3. getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line"></span><br><span class="line">4. getHeader() 获取请求头 </span><br><span class="line"></span><br><span class="line">5. getParameter() 获取请求的参数</span><br><span class="line"></span><br><span class="line">6. getParameterValues() 获取请求的参数（多个值的时候使用） </span><br><span class="line"></span><br><span class="line">7. getMethod() 获取请求的方式 GET 或 POST </span><br><span class="line"></span><br><span class="line">8. setAttribute(key, value); 设置域数据</span><br><span class="line"></span><br><span class="line">9. getAttribute(key); 获取域数据</span><br><span class="line"></span><br><span class="line">10. getRequestDispatcher() 获取请求转发对象</span><br></pre></td></tr></table></figure><p><strong>示例如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// i.getRequestURI() 获取请求的资源路径</span></span><br><span class="line">    System.out.println(<span class="string">&quot;URI =&gt; &quot;</span> + req.getRequestURI());</span><br><span class="line">    <span class="comment">// ii.getRequestURL() 获取请求的统一资源定位符（绝对路径）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;URL =&gt; &quot;</span> + req.getRequestURL());</span><br><span class="line">    <span class="comment">// iii.getRemoteHost() 获取客户端的 ip 地址</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 localhost 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 127.0.0.1&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 127.0.0.1 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 127.0.0.1&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 在 IDEA 中，使用 真实 ip 访问时，得到的客户端 ip 地址是 ===&gt;&gt;&gt; 真实的客户端 ip 地址&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;客户端 ip 地址 =&gt; &quot;</span> + req.getRemoteHost());</span><br><span class="line">    <span class="comment">// iv.getHeader() 获取请求头</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请求头 User-Agent ==&gt;&gt; &quot;</span> + req.getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line">    <span class="comment">// vii.getMethod() 获取请求的方式 GET 或 POST</span></span><br><span class="line">    System.out.println( <span class="string">&quot;请求的方式 ==&gt;&gt; &quot;</span> + req.getMethod() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下所示：</strong></p><p><img src="/images/java-web-Servlet/image-20210114200944483.png"></p><h3 id="如何获取请求参数"><a href="#如何获取请求参数" class="headerlink" title="如何获取请求参数"></a>如何获取请求参数</h3><p><strong>表单代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8123/06_Servlet/hello3&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>&gt;</span>C++</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>java代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">    System.out.println(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">    System.out.println(<span class="string">&quot;兴趣爱好&quot;</span> + Arrays.asList(hobby));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表单效果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203013358.png"></p><p><strong>IDEA结果：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203052445.png"></p><h3 id="解决Post请求中文乱码问题"><a href="#解决Post请求中文乱码问题" class="headerlink" title="解决Post请求中文乱码问题"></a>解决Post请求中文乱码问题</h3><p>上面的例子使用Get请求，当用户名输入为中文时可以得到正常的结果。</p><p>若将请求方式改为Post，把代码移入doPost方法中。</p><p><strong>在表单中的输入如下图所示：</strong></p><p><img src="/images/java-web-Servlet/image-20210114203642617.png"></p><p><strong>IDEA中的到的结果如下图所示</strong><br><img src="/images/java-web-Servlet/image-20210114203701212.png"></p><p><strong>现象</strong>：当用户名输入为中文时，会出现乱码。</p><p><strong>解决方法：</strong>在doPost()方法中，加上下面这句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求体的字符集为 UTF-8，从而解决 post 请求的中文乱码问题</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p><strong>概念：</strong>请求转发是指，服务器收到请求后，从一个资源跳转到另一个资源的操作。</p><p><img src="/images/java-web-Servlet/image-20210114213327551.png"></p><p><strong>特点：</strong></p><p>1、浏览器地址栏没有变化<br>2、他们是<strong>一次请求</strong><br>3、他们共享Request域中的数据<br>4、可以转发到WEB-INF目录下（如果直接用浏览器访问的话是不可以的）<br>5、不可以访问工程以外的资源</p><p><strong>servlet1程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet1（柜台 1）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 给材料 盖一个章，并传递到 Servlet2（柜台 2）去查看</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;柜台 1 的章&quot;</span>);</span><br><span class="line">        <span class="comment">// 问路：Servlet2（柜台 2）怎么走</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ , 映射到 IDEA 代码的 web 目录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">      RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line">        <span class="comment">// 走向 Sevlet2（柜台 2）</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>servlet2程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet2（柜台 2）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 查看柜台 1 是否有盖章</span></span><br><span class="line">        Object key1 = req.getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;柜台 1 是否有章：&quot;</span> + key1);</span><br><span class="line">        <span class="comment">// 处理自己的业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2 处理自己的业务 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意下面servlet1程序中的两条关键语句：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line"></span><br><span class="line">requestDispatcher.forward(req,resp);</span><br></pre></td></tr></table></figure><h3 id="web中斜杆的含义"><a href="#web中斜杆的含义" class="headerlink" title="web中斜杆的含义"></a>web中斜杆的含义</h3><p>在 web 中 / 斜杠 是一种绝对路径。</p><ul><li><p>/ 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a></p></li><li><p>/ 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p><p>比如<img src="/images/java-web-Servlet/image-20210114224746280.png"></p></li></ul><h2 id="HttpServletResponse-类"><a href="#HttpServletResponse-类" class="headerlink" title="HttpServletResponse 类"></a>HttpServletResponse 类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>每次请求进来，Tomcat 服务器都会创建一个 Response 对象传 递给 Servlet 程序去使用。HttpServletResponse 表示所有响应的信息。</p><p> 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</p><p>用两个输出流来表示响应</p><ul><li><p>字节流                 getOutputStream();       常用于下载（传递二进制数据） </p></li><li><p>字符流                 getWriter();                      常用于回传字符串（常用）</p><p>两个流同时只能使用一个。 使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p></li></ul><h3 id="往客户端回传数据"><a href="#往客户端回传数据" class="headerlink" title="往客户端回传数据"></a>往客户端回传数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h3><p><strong>问题：</strong>若在响应中写入中文数据，就会出现乱码问题</p><p><strong>解决方法：</strong></p><ul><li><p>方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务器字符集为 UTF-8 </span></span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集 </span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法二</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头 </span></span><br><span class="line"><span class="comment">// 注意！此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><p><strong>概述：</strong>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说，我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）。</p><p><img src="/images/java-web-Servlet/image-20210114221734161.png"></p><p><strong>特点：</strong>（注意与请求转发的特点对比）</p><p>1、浏览器地址栏<strong>会发生变化</strong><br>2、<strong>两次请求</strong><br>3、不共享Request域中数据<br>4、不能访问WEB-INF下的资源<br>5、可以访问工程外的资源</p><p><strong>Response1程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;response1&quot;</span>);</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">        <span class="comment">// 设置响应状态码 302 ，表示重定向，（已搬迁）</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">// 设置响应头，说明 新的地址在哪里</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;http://localhost:8123/06_Servlet/response2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二种方法（推荐）</span></span><br><span class="line">       <span class="comment">// resp.sendRedirect(&quot;http://localhost:8123/06_Servlet/response2&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Response2程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;真正处理用户请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从浏览器的response1中可以看出，代码302，location指向response2<br><img src="/images/java-web-Servlet/image-20210114223715661.png"></p><p>最终在response2中正常访问，如下图所示：</p><p><img src="/images/java-web-Servlet/image-20210114223826422.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>每次写一个servlet程序时都要在xml文件中配置好地址</li><li>xml文件的<url-pattern>/hello</url-pattern>中的标签内容一定要写”/“</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关于Servlet&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java web" scheme="http://example.com/categories/java-web/"/>
    
    
    <category term="分享" scheme="http://example.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
